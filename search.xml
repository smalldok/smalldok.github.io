<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker run --restart and --rm</title>
      <link href="/docker/docker%20run%20--restart%20and%20--rm/"/>
      <url>/docker/docker%20run%20--restart%20and%20--rm/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker容器的重启策略"><a href="#Docker容器的重启策略" class="headerlink" title="Docker容器的重启策略"></a>Docker容器的重启策略</h1><p>Docker容器的重启策略是面向生产环境的一个启动策略，在开发过程中可以忽略该策略。<br>Docker容器的重启都是由Docker守护进程完成的，因此与守护进程息息相关。  </p><p>Docker容器的重启策略如下：</p><ul><li>no，默认策略，在容器退出时不重启容器</li><li>on-failure，在容器非正常退出时（退出状态非0），才会重启容器<br>on-failure:3，在容器非正常退出时重启容器，最多重启3次</li><li>always，在容器退出时总是重启容器</li><li>unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</li></ul><h1 id="docker-run的–restart选项"><a href="#docker-run的–restart选项" class="headerlink" title="docker run的–restart选项"></a>docker run的–restart选项</h1><p>通过<code>--restart</code>选项，可以设置容器的重启策略，以决定在容器退出时Docker守护进程是否重启刚刚退出的容器。<br><code>--restart</code>选项通常只用于detached模式的容器。<br><code>--restart</code>选项不能与<code>--rm</code>选项同时使用。显然，<code>--restart</code>选项适用于detached模式的容器，而<code>--rm</code>选项适用于foreground模式的容器。</p><p>在<code>docker ps</code>查看容器时，对于使用了<code>--restart</code>选项的容器，其可能的状态只有<code>Up</code>或<code>Restarting</code>两种状态。</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always bba-208</span><br><span class="line">docker run -d --restart=on-failure:10 bba-208</span><br></pre></td></tr></table></figure><p>补充：</p><p>查看容器重启次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &quot;&#123;&#123; .RestartCount &#125;&#125;&quot; bba-208</span><br></pre></td></tr></table></figure><p>查看容器最后一次的启动时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f &quot;&#123;&#123; .State.StartedAt &#125;&#125;&quot; bba-208</span><br></pre></td></tr></table></figure></p><h1 id="docker-run的–rm选项"><a href="#docker-run的–rm选项" class="headerlink" title="docker run的–rm选项"></a>docker run的–rm选项</h1><p>在Docker容器退出时，默认容器内部的文件系统仍然被保留，以方便调试并保留用户数据。<br>但是，对于foreground容器，由于其只是在开发调试过程中短期运行，其用户数据并无保留的必要，因而可以在容器启动时设置<code>--rm</code>选项，这样在容器退出时就能够自动清理容器内部的文件系统。示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm bba-208</span><br></pre></td></tr></table></figure></p><p>等价于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm=true bba-208</span><br></pre></td></tr></table></figure></p><p>显然，<code>--rm</code>选项不能与<code>-d</code>同时使用，即只能自动清理foreground容器，不能自动清理detached容器<br>注意，<code>--rm</code>选项也会清理容器的匿名data volumes。</p><p>所以，执行<code>docker run</code>命令带<code>--rm</code>命令选项，等价于在容器退出后，执行<code>docker rm -v</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker save-load and export-import</title>
      <link href="/docker/docker%20save-load%20and%20export-import/"/>
      <url>/docker/docker%20save-load%20and%20export-import/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-镜像导入导出"><a href="#docker-镜像导入导出" class="headerlink" title="docker 镜像导入导出"></a>docker 镜像导入导出</h1><p>两组导入导出命令：  </p><ul><li>docker save/load</li><li>docker export/import</li></ul><p>两种使用场景(两者可以结合使用)： </p><table><thead><tr><th>命令</th><th>场景</th></tr></thead><tbody><tr><td>save/load</td><td>如果部署的节点服务器不能连外部或者内部镜像仓库，则可以docker save镜像打包，然后拷贝上传到要部署的节点服务其上，使用docker load载入</td></tr><tr><td>export/import</td><td>用于制作基础镜像，比如容器启动后，在容器中安装一些软件或者环境的设置，使用docker export导出修改后的容器，然后分发给其他人使用(比如作为基础的开发环境)</td></tr></tbody></table><p>也可以使用docker commit命令，提交修改后的容器，并上传至镜像仓库;<br>注意：用docker commit命令打包的镜像，比Dockerfile方式打出的镜像大(镜像分层问题)</p><h1 id="测试环境准备"><a href="#测试环境准备" class="headerlink" title="测试环境准备"></a>测试环境准备</h1><p>步骤：</p><ul><li>构建一个centos镜像</li><li>进入容器安装软件</li><li>配置防火墙</li><li>提交容器修改</li></ul><p>构建镜像、运行容器、进入容器后台</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/smalldok/docker-based-tools.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> dind_centos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker build -t dind_centos .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name docker-0 --privileged -d dind_centos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it -u root docker-0 /bin/bash</span></span><br></pre></td></tr></table></figure><p>安装软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装支持ifconfig命令的工具</span></span><br><span class="line">yum install net-tools</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装firewalld</span></span><br><span class="line">yum install firewalld firewall-config</span><br><span class="line">systemctl start  firewalld # 启动</span><br></pre></td></tr></table></figure><p>开放docker-swarm需要的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开放防火墙端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=2377/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7946/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7946/udp</span><br><span class="line">firewall-cmd --permanent --add-port=4789/udp</span><br><span class="line">firewall-cmd --reload # 永久打开端口需要reload一下</span><br><span class="line">firewall-cmd --list-all # 查看防火墙，添加的端口也可以看到</span><br></pre></td></tr></table></figure><h1 id="docker-export-import"><a href="#docker-export-import" class="headerlink" title="docker export/import"></a>docker export/import</h1><ul><li>docker export<br>docker export是将container的文件系统打包; </li><li>docker import<br>docker import将container导入后成为一个Image,而不是恢复为一个container;<br>可指定image[:tag]，为镜像指定新名称；如果名称相同，则会覆盖老的镜像；</li></ul><p><code>docker export 导出容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                        NAMES</span><br><span class="line">1eb256b1d4b1        dind_centos         "wrapdocker /usr/sbi…"   About an hour ago   Up About an hour       docker-0</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">export</span> 1eb256b1d4b1 &gt; dind_centos.tar</span></span><br></pre></td></tr></table></figure><p><code>docker import 导入</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker import dind_centos.tar dind_centos:1.0</span></span><br><span class="line">sha256:4e8612dad5ba4230e618a424727a679e0f52f7a1fcfb16bbfe5626338784d404</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">dind_centos         1.0                 4e8612dad5ba        20 seconds ago      539MB</span><br><span class="line">dind_centos         latest              9031f35e0ec5        4 days ago          550MB</span><br><span class="line">centos              latest              49f7960eb7e4        3 weeks ago         200MB</span><br></pre></td></tr></table></figure><p><code>查看之前对容器的修改是否还在</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name docker-test --privileged -d dind_centos:1.0 wrapdocker /usr/sbin/init</span></span><br><span class="line">960ecfc2f531533ba36c3cefb00fa9f784cdafd14a898577c52262f03d3faede</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看ifconfig是否生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifconfig</span></span><br></pre></td></tr></table></figure><h1 id="docker-save-load"><a href="#docker-save-load" class="headerlink" title="docker save/load"></a>docker save/load</h1><ul><li><p>docker save<br>docker save 可以对image或者container打包；对container打包，其实打的是容器背后的image;<br>docker save 可以用来将一个或者多个Image打包，如： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 打包之后的test.tar包含nginx:1.0 httpd:1.4这两个镜像</span><br><span class="line">docker save -o test.tar nginx:1.0 httpd:1.4</span><br></pre></td></tr></table></figure></li><li><p>docker load  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 该命令会把nginx:1.0 httpd:1.4载入进来，如果本地已经存在这两个镜像，会被覆盖</span><br><span class="line">docker load -i test.tar</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker swarm mode</title>
      <link href="/docker/docker%20swarm/"/>
      <url>/docker/docker%20swarm/</url>
      
        <content type="html"><![CDATA[<h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><ul><li><code>三台linux服务器或者linux容器,并且安装docker环境</code></li></ul><p>这里我采用容器, 需docker run docker,也就是docker上运行centos容器，centos容器中再运行docker环境;<br>构建容器环境，参考：<a href="https://github.com/smalldok/docker-based-tools/tree/master/dind_centos" target="_blank" rel="noopener">https://github.com/smalldok/docker-based-tools/tree/master/dind_centos</a></p><p>本地构建dind_centos镜像之后,分别创建如下三个容器（对应好Ip和hostname）</p><table><thead><tr><th>role</th><th>ip</th><th>hostname</th><th>desc</th></tr></thead><tbody><tr><td>manager node</td><td>172.17.0.2</td><td>docker-0</td><td>-</td></tr><tr><td>work node</td><td>172.17.0.3</td><td>docker-1</td><td>-</td></tr><tr><td>work node</td><td>172.17.0.4</td><td>docker-2</td><td>-</td></tr></tbody></table><ul><li><code>主机间开放端口</code><br>在各个节点进行通信的时候,必须开放相关的防火墙策略,其中包括：<br>tcp port 2377为集群管理通信<br>tcp and udp port 7946为节点通信<br>udp port 4789为网络间流量  </li></ul><p>分别在各主机上执行如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开放防火墙端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=2377/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7946/tcp</span><br><span class="line">firewall-cmd --permanent --add-port=7946/udp</span><br><span class="line">firewall-cmd --permanent --add-port=4789/udp</span><br><span class="line">firewall-cmd --reload # 永久打开端口需要reload一下</span><br><span class="line">firewall-cmd --list-all # 查看防火墙，添加的端口也可以看到</span><br></pre></td></tr></table></figure><p>centos7镜像需要安装的工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ifconfig命令支持</span></span><br><span class="line">yum install net-tools</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装firewalld</span></span><br><span class="line">yum install firewalld firewall-config</span><br><span class="line">systemctl start  firewalld # 启动</span><br><span class="line">systemctl status firewalld # 或者 firewall-cmd --state 查看状态</span><br></pre></td></tr></table></figure><h1 id="创建swarm集群"><a href="#创建swarm集群" class="headerlink" title="创建swarm集群"></a>创建swarm集群</h1><p><code>初始化集群，节点之间相互通信的IP地址为172.17.0.2，默认端口2377</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker swarm init --advertise-addr 172.17.0.2</span><br><span class="line">Swarm initialized: current node (dlr9h76ov43r7239sq3iksjyw) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3d7ynvjvs9kqdqaut2sir2ky42uoiv54fmwef5s7odei33a031-3rcwr1styfzw8f8j3k9mvbz9c 172.17.0.2:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.</span><br></pre></td></tr></table></figure><p><code>swarm集群模式是否激活</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker info|grep -i swarm</span><br><span class="line">Swarm: active</span><br></pre></td></tr></table></figure><p><code>默认监听两个TCP端口</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2377：集群的管理端口、7946：节点之间的通信端口</span></span><br><span class="line">[root@docker-0 swarm]# netstat -tnlp|grep docker</span><br><span class="line">tcp6       0      0 :::2377                 :::*                    LISTEN      78/dockerd      </span><br><span class="line">tcp6       0      0 :::7946                 :::*                    LISTEN      78/dockerd</span><br></pre></td></tr></table></figure><p><code>查看网络</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认会创建一个overlay的网络ingress、一个bridge网络docker_gwbridge</span></span><br><span class="line">[root@docker-0 swarm]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">301fd3e9c939        bridge              bridge              local</span><br><span class="line">5ab7c9aec44f        docker_gwbridge     bridge              local</span><br><span class="line">9faeade5067d        host                host                local</span><br><span class="line">k0m6xm3c1pgr        ingress             overlay             swarm</span><br><span class="line">74eb81b4e335        none                null                local</span><br></pre></td></tr></table></figure><p><code>查看集群中的节点,当有多个manager节点的时候,是通过raft协议来选取主节点,也就是leader节点</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Active              Leader              18.03.1-ce</span><br></pre></td></tr></table></figure><p><code>swarm配置文件</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> swarm配置文件都在/var/lib/docker/swarm目录中,有相关的证书和manager的配置文件,使用的是raft协议</span></span><br><span class="line">[root@docker-0 swarm]# ls -l</span><br><span class="line">total 20</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun 26 03:23 certificates  # 使用tls来进行安全通信</span><br><span class="line">-rw------- 1 root root  145 Jun 26 03:23 docker-state.json # 用来记录通信的地址和端口,也会记录本地的地址和端口</span><br><span class="line">drwx------ 4 root root 4096 Jun 26 03:23 raft # raft协议</span><br><span class="line">-rw------- 1 root root   66 Jun 26 03:23 state.json  # manager的ip和端口</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jun 26 03:23 worker  # 记录工作节点下发的任务信息</span><br></pre></td></tr></table></figure><p><code>登陆docker-1, 将docker-1节点加入集群</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker swarm join --token SWMTKN-1-3d7ynvjvs9kqdqaut2sir2ky42uoiv54fmwef5s7odei33a031-3rcwr1styfzw8f8j3k9mvbz9c 172.17.0.2:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p><code>登陆docker-2, 将docker-2节点加入集群</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-2 /]# docker swarm join --token SWMTKN-1-3d7ynvjvs9kqdqaut2sir2ky42uoiv54fmwef5s7odei33a031-3rcwr1styfzw8f8j3k9mvbz9c 172.17.0.2:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure><p><code>当忘记了加入集群的token,可以使用如下命令找到,然后在node节点上直接执行,就可以加入worker节点或者manager节点</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker swarm join-token worker</span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3d7ynvjvs9kqdqaut2sir2ky42uoiv54fmwef5s7odei33a031-3rcwr1styfzw8f8j3k9mvbz9c 172.17.0.2:2377</span><br></pre></td></tr></table></figure><p><code>查看集群节点信息</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Active              Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active                                  18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Ready               Active                                  18.03.1-ce</span><br></pre></td></tr></table></figure><p><code>节点之间的角色可以随时进行转换(使用update进行更新)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node update --role manager docker-1</span><br><span class="line">docker-1</span><br><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Active              Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active              Reachable           18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Ready               Active                                  18.03.1-ce</span><br><span class="line">[root@docker-0 swarm]# docker node update --role worker docker-1</span><br><span class="line">docker-1</span><br><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Active              Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active                                  18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Ready               Active                                  18.03.1-ce</span><br></pre></td></tr></table></figure><h1 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h1><p>service是一组task集合，包括多个task，一个task为一个容器;<br>例如运行nginx服务,从而拆解为几个nginx的容器在各个节点上进行运行；</p><p><code>创建名称为web的服务，基于nginx镜像</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name web nginx</span><br><span class="line">plwzhwijh15j6tpg7yz7wshdp</span><br><span class="line">overall progress: 1 out of 1 tasks</span><br><span class="line">1/1: running</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p><code>创建名称为frontweb的服务，基于nginx镜像，模式为global</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name frontweb --mode global nginx</span><br><span class="line">p2geazk5hdckzzb9rdd1m5n9l</span><br><span class="line">overall progress: 3 out of 3 tasks</span><br><span class="line">dlr9h76ov43r: running</span><br><span class="line">wscczkpfb15c: running</span><br><span class="line">pgpnatt19yjt: running</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p><code>查看运行的服务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE               PORTS</span><br><span class="line">p2geazk5hdck        frontweb            global              3/3                 nginx:latest    </span><br><span class="line">plwzhwijh15j        web                 replicated          1/1                 nginx:latest</span><br></pre></td></tr></table></figure><p><code>查看web运行信息,默认情况下manager节点也可以运行容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">qjrl2qg04a3b        web.1               nginx:latest        docker-0            Running             Running 15 minutes ago</span><br></pre></td></tr></table></figure><p><code>查看frontweb运行信息,默认情况下manager节点也可以运行容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps frontweb</span><br><span class="line">ID                  NAME                                 IMAGE               NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</span><br><span class="line">n7r3e85ukc2m        frontweb.pgpnatt19yjti3eqy0gc3ebwg   nginx:latest        docker-2            Running             Running 5 minutes ago</span><br><span class="line">paf09ihxyr5q        frontweb.wscczkpfb15c5knm6cr6lj712   nginx:latest        docker-1            Running             Running 5 minutes ago</span><br><span class="line">o7yrjm0jbll1        frontweb.dlr9h76ov43r7239sq3iksjyw   nginx:latest        docker-0            Running             Running 6 minutes ago</span><br></pre></td></tr></table></figure><p><strong>创建服务时，服务的几种状态</strong><br>prepared 表示准备,主要是从仓库拉取镜像；<br>starting 启动容器,进行验证容器状态；<br>running 正常运行  </p><p><strong>服务模式</strong><br>replicated 表示副本，默认使用的mode，并且默认情况只会创建一个副本，主要使用目的是为了高可用;<br>global 必须在每个节点上运行一个task(也就是容器),可以看到上面创建frontweb服务时，使用global创建了三个容器;</p><p>查看frontweb服务详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service inspect frontweb --pretty</span><br><span class="line"></span><br><span class="line">ID:             p2geazk5hdckzzb9rdd1m5n9l</span><br><span class="line">Name:           frontweb</span><br><span class="line">Service Mode:   Global</span><br><span class="line">Placement:</span><br><span class="line">UpdateConfig:</span><br><span class="line"> Parallelism:   1</span><br><span class="line"> On failure:    pause</span><br><span class="line"> Monitoring Period: 5s</span><br><span class="line"> Max failure ratio: 0</span><br><span class="line"> Update order:      stop-first</span><br><span class="line">RollbackConfig:</span><br><span class="line"> Parallelism:   1</span><br><span class="line"> On failure:    pause</span><br><span class="line"> Monitoring Period: 5s</span><br><span class="line"> Max failure ratio: 0</span><br><span class="line"> Rollback order:    stop-first</span><br><span class="line">ContainerSpec:</span><br><span class="line"> Image:         nginx:latest@sha256:3e2ffcf0edca2a4e9b24ca442d227baea7b7f0e33ad654ef1eb806fbd9bedcf0</span><br><span class="line">Resources:</span><br><span class="line">Endpoint Mode:  vip</span><br></pre></td></tr></table></figure><h1 id="服务扩容缩容"><a href="#服务扩容缩容" class="headerlink" title="服务扩容缩容"></a>服务扩容缩容</h1><p>集群必然涉及服务高可用，从而会有服务的扩容缩容</p><p><code>将web服务扩容为3个task</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service scale web=3</span><br><span class="line">web scaled to 3</span><br><span class="line">overall progress: 3 out of 3 tasks</span><br><span class="line">1/3: running   [==================================================&gt;]</span><br><span class="line">2/3: running   [==================================================&gt;]</span><br><span class="line">3/3: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p><code>查看服务，可看到web服务的replicas副本数量为3个</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE               PORTS</span><br><span class="line">p2geazk5hdck        frontweb            global              3/3                 nginx:latest</span><br><span class="line">plwzhwijh15j        web                 replicated          3/3                 nginx:latest</span><br></pre></td></tr></table></figure><p><code>可以看到三个节点上都运行了一个web服务(task)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">qjrl2qg04a3b        web.1               nginx:latest        docker-0            Running             Running 41 minutes ago</span><br><span class="line">s6ejxq4xb1qo        web.2               nginx:latest        docker-2            Running             Running 3 minutes ago</span><br><span class="line">5xim2g6fmom8        web.3               nginx:latest        docker-1            Running             Running 3 minutes ago</span><br></pre></td></tr></table></figure><p>在默认情况下，管理节点也可以运行task，所以上面可以看到Manager节点上也运行了web服务</p><p><code>将web服务缩容为2个</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service scale web=2</span><br><span class="line">web scaled to 2</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p><code>查看运行的web容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE               ERROR               PORTS</span><br><span class="line">qjrl2qg04a3b        web.1               nginx:latest        docker-0            Running             Running about an hour ago</span><br><span class="line">s6ejxq4xb1qo        web.2               nginx:latest        docker-2            Running             Running 9 minutes ago</span><br></pre></td></tr></table></figure><p>当要让swarm的manager节点不运行容器的时候，只要更改节点的状态，从Active变成Drain即可；<br>如果在manager上运行容器，那么当manager宕机的时候，如果不是多节点的manager，会导致服务无法进行调度；</p><p><code>将manager节点的状态修改为Drain状态，使得此节点不会运行相关的task任务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node update --availability drain docker-0</span><br><span class="line">docker-0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看节点的状态从active变成drain</span></span><br><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Drain               Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active                                  18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Ready               Active                                  18.03.1-ce</span><br></pre></td></tr></table></figure><p><code>本来运行在docker-0节点上的所有task会被关闭，然后mode=replicated的服务会自动迁移到其他的worker节点上(这一点有利也有弊)，mode=global的服务不会自动迁移</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">q57mgwxfdxl0        web.1               nginx:latest        docker-1            Running             Running 2 minutes ago</span><br><span class="line">qjrl2qg04a3b         \_ web.1           nginx:latest        docker-0            Shutdown            Shutdown 2 minutes ago</span><br><span class="line">s6ejxq4xb1qo        web.2               nginx:latest        docker-2            Running             Running 18 minutes ago</span><br></pre></td></tr></table></figure><h1 id="自动故障转移"><a href="#自动故障转移" class="headerlink" title="自动故障转移"></a>自动故障转移</h1><p>当运行在某节点上的task被关闭、或者节点宕机、或者网络抖动，mode=replicated的服务会自动迁移到其他的worker节点上(这一点有利也有弊)，mode=global的服务不会自动迁移；<br>mode=replicated时的自动迁移，在生产环境中需要考虑的一个问题就是，如果出现了自动failover，那么其他的机器是否有足够的资源来创建这些容器，所以需要考虑node节点剩余资源的问题，例如cpu和内存；</p><p>场景模拟：<br>1、mode=replicated的web服务，在docker-1和docker-2这2个节点上分别运行着一个task；<br>2、模拟将docker-2节点进行宕机(关闭docker服务)，观察docker-1节点上将会有2个task运行；<br>3、恢复docker-2节点服务，观察docker-1节点上还是会有2个task运行，docker-2节点不会有task运行，可以看到并不会把之前迁移到docker-1上的服务自动迁移回来，所以这里也比较坑；</p><p>模拟宕机前：</p><table><thead><tr><th>服务名</th><th>节点主机名</th><th>运行状态</th></tr></thead><tbody><tr><td>web.1</td><td>docker-1</td><td>Running</td></tr><tr><td>web.2</td><td>docker-2</td><td>Running</td></tr></tbody></table><p>模拟宕机后(docker-2宕机)：</p><table><thead><tr><th>服务名</th><th>节点主机名</th><th>运行状态</th></tr></thead><tbody><tr><td>web.1</td><td>docker-1</td><td>Running</td></tr><tr><td>web.2</td><td>docker-1</td><td>Running</td></tr><tr><td>web.2</td><td>docker-2</td><td>Shutdown</td></tr></tbody></table><p>模拟恢复后：</p><table><thead><tr><th>服务名</th><th>节点主机名</th><th>运行状态</th></tr></thead><tbody><tr><td>web.1</td><td>docker-1</td><td>Running</td></tr><tr><td>web.2</td><td>docker-1</td><td>Running</td></tr><tr><td>web.2</td><td>docker-2</td><td>Shutdown</td></tr></tbody></table><p><code>查看服务分布</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS</span><br><span class="line">q57mgwxfdxl0        web.1               nginx:latest        docker-1            Running             Running 25 minutes ago</span><br><span class="line">s6ejxq4xb1qo        web.2               nginx:latest        docker-2            Running             Running 42 minutes ago</span><br></pre></td></tr></table></figure><p><code>模拟docker-2宕机</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登陆docker-2节点，关闭docker服务</span></span><br><span class="line">[root@docker-2 /]# systemctl stop docker</span><br></pre></td></tr></table></figure><p><code>查看节点信息，可以看到docker-2已经为down，也就是主机宕机</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Drain               Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active                                  18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Down                Active                                  18.03.1-ce</span><br></pre></td></tr></table></figure><p><code>观察docker-1节点上将会有2个task运行，宕机的docker-2标记为shutdown</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE             ERROR               PORTS</span><br><span class="line">q57mgwxfdxl0        web.1               nginx:latest        docker-1            Running             Running 42 minutes ago</span><br><span class="line">uqpzuj4tkwpd        web.2               nginx:latest        docker-1            Running             Running 2 minutes ago</span><br><span class="line">s6ejxq4xb1qo         \_ web.2           nginx:latest        docker-2            Shutdown            Running 2 minutes ago</span><br></pre></td></tr></table></figure><p><code>将docker-2节点进行上线</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-2 /]# systemctl start docker</span><br></pre></td></tr></table></figure><p><code>查看服务节点信息，docker-2状态变为ready,表示可以运行task任务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">dlr9h76ov43r7239sq3iksjyw *   docker-0            Ready               Drain               Leader              18.03.1-ce</span><br><span class="line">wscczkpfb15c5knm6cr6lj712     docker-1            Ready               Active                                  18.03.1-ce</span><br><span class="line">pgpnatt19yjti3eqy0gc3ebwg     docker-2            Ready               Active                                  18.03.1-ce</span><br></pre></td></tr></table></figure><p><code>再次查看web服务的分布，服务没有再迁移回docker-2节点</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">q57mgwxfdxl0        web.1               nginx:latest        docker-1            Running             Running about an hour ago</span><br><span class="line">uqpzuj4tkwpd        web.2               nginx:latest        docker-1            Running             Running 16 minutes ago</span><br><span class="line">s6ejxq4xb1qo         \_ web.2           nginx:latest        docker-2            Shutdown            Shutdown 2 minutes ago</span><br></pre></td></tr></table></figure><h1 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h1><p>访问服务分为两种，对内、对外；<br>对内：内部访问的服务，不对外开放端口<br>对外：外部节点可访问，对外开放端口，也就是主机映射端口  </p><p><code>创建2个副本的httpd服务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name web --replicas=2 httpd</span><br><span class="line">6mxfzdhrqeqgexmbyq5u7j6ds</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name web --publish 8000:80 --replicas=2 httpd</span><br></pre></td></tr></table></figure><p><code>查看运行容器的主机</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">5fwbadj1s8gx        web.1               httpd:latest        docker-2            Running             Running about a minute ago</span><br><span class="line">klab0nnwke22        web.2               httpd:latest        docker-1            Running             Running about a minute ago</span><br></pre></td></tr></table></figure><p><code>登陆节点服务，查看运行的容器</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES</span><br><span class="line">74429db851d3        httpd:latest        "httpd-foreground"   33 seconds ago      Up 13 seconds       80/tcp              web.2.klab0nnwke223tzztixiii1uq</span><br><span class="line"></span><br><span class="line">[root@docker-2 /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND              CREATED              STATUS              PORTS               NAMES</span><br><span class="line">577c242824f0        httpd:latest        "httpd-foreground"   About a minute ago   Up About a minute   80/tcp              web.1.5fwbadj1s8gxx4smkils5lmu9</span><br></pre></td></tr></table></figure><p><code>查看运行容器的IP地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker exec 74429db851d3 ip addr show</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">18: eth0@if19: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据IP地址访问，只能在本节点上进行访问，属于内部网络，也就是docker_gwbrige网络</span></span><br><span class="line">[root@docker-1 /]# curl 172.18.0.2</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>添加主机映射端口，将服务对外开放，使外部能访问此服务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service update --publish-add 8000:80 web</span><br><span class="line">web</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以观察到，原来的容器被关闭，重新创建了新的容器</span></span><br><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">sad9u6d1gf1v        web.1               httpd:latest        docker-2            Running             Running 2 minutes ago</span><br><span class="line">5fwbadj1s8gx         \_ web.1           httpd:latest        docker-2            Shutdown            Shutdown 2 minutes ago</span><br><span class="line">nbxubcnx7dpy        web.2               httpd:latest        docker-1            Running             Running 2 minutes ago</span><br><span class="line">klab0nnwke22         \_ web.2           httpd:latest        docker-1            Shutdown            Shutdown 2 minutes ago</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 无论是manager节点还是worker节点，均监听了8000端口，均可以访问</span></span><br><span class="line">[root@docker-0 swarm]# curl 172.17.0.3:8000</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@docker-0 swarm]# curl 172.17.0.4:8000</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;It works!&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">[root@docker-0 swarm]# curl 172.17.0.3:8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 集群中每个机器都会监听8000端口，无论是否运行了这个容器</span></span><br><span class="line">[root@docker-0 swarm]# netstat -ntlp|grep 8000</span><br><span class="line">tcp6       0      0 :::8000                 :::*                    LISTEN      66487/dockerd</span><br></pre></td></tr></table></figure><p>以上使用的就是routing mesh功能，在swarm内部实现了负载均衡，使用的网络为swarm自动创建的overlay网络。<br>当使用publish端口时，最大坏处是对外暴露了端口号，而且在使用的时候，如果进行了故障转移，那么多个服务运行在同一个主机上面，会造成端口占用冲突；</p><h1 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h1><p>docker-swarm原生提供了服务发现功能，也可以使用外部中间件，如consul/etcd/zookeeper;  </p><p><code>创建overlay网络</code><br>要使用服务发现，需要相互通信的service必须属于同一个overlay网络,所以我们先创建一个新的overlay网络；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker network create --driver overlay web</span><br><span class="line">s9jlkeot6iua2pzldff16dz8k</span><br><span class="line">[root@docker-0 swarm]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">301fd3e9c939        bridge              bridge              local</span><br><span class="line">5ab7c9aec44f        docker_gwbridge     bridge              local</span><br><span class="line">9faeade5067d        host                host                local</span><br><span class="line">k0m6xm3c1pgr        ingress             overlay             swarm</span><br><span class="line">74eb81b4e335        none                null                local</span><br><span class="line">s9jlkeot6iua        web                 overlay             swarm</span><br></pre></td></tr></table></figure><p>默认的ingress没有提供服务发现，必须创建自己的overlay网络；</p><p><code>部署service到新建的overlay</code><br>部署一个web服务，并将其挂载到新创建的overlay网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name my-web --replicas=2 --network web httpd</span><br><span class="line">qvws1y4kvkkiii9ny1tzmfrio</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running</span><br><span class="line">2/2: running</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>部署一个test服务用于测试，挂载到同一个overlay网络  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name test --network web busybox sleep 10000000</span><br><span class="line">0o216j6g3cny2ulrs9ncacr4r</span><br><span class="line">overall progress: 1 out of 1 tasks</span><br><span class="line">1/1: running</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sleep 10000000的作用是保持busybox容器处于运行状态，我们才能进入到容器访问my-web</span></span><br><span class="line">[root@docker-0 swarm]# docker service ps test</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">z6ozex5qo747        test.1              busybox:latest      docker-1            Running             Running 29 seconds ago</span><br></pre></td></tr></table></figure><p><code>验证：</code><br>通过docker service ps test确认test所在节点在docker-1;<br>登陆到docker-1节点，并进入test容器，然后ping my-web</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND              CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4f23e905ab2b        busybox:latest      "sleep 10000000"     10 seconds ago      Up 7 seconds                            test.1.z6ozex5qo74781icswy4245pd</span><br><span class="line">0af60046e58c        httpd:latest        "httpd-foreground"   3 minutes ago       Up 2 minutes        80/tcp              my-web.1.llob2wie0nx1x98m1vw780hcv</span><br><span class="line"></span><br><span class="line">[root@docker-1 /]# docker exec test.1.z6ozex5qo74781icswy4245pd ping -c 2 my-web</span><br><span class="line">PING my-web (10.0.0.5): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.5: seq=0 ttl=64 time=0.112 ms</span><br><span class="line">64 bytes from 10.0.0.5: seq=1 ttl=64 time=0.167 ms</span><br><span class="line"></span><br><span class="line">--- my-web ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.112/0.139/0.167 ms</span><br></pre></td></tr></table></figure><p>10.0.0.5是虚拟IP</p><p><code>查看各个主机的IP地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker exec test.1.z6ozex5qo74781icswy4245pd nslookup tasks.my-web</span><br><span class="line">Server:    127.0.0.11</span><br><span class="line">Address 1: 127.0.0.11</span><br><span class="line"></span><br><span class="line">Name:      tasks.my-web</span><br><span class="line">Address 1: 10.0.0.6 my-web.2.zrj1b3nqaqfgmm3ipaj4grk33.web</span><br><span class="line">Address 2: 10.0.0.7 my-web.1.llob2wie0nx1x98m1vw780hcv.web</span><br></pre></td></tr></table></figure><p><code>查看VIP地址</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 /]# docker exec test.1.z6ozex5qo74781icswy4245pd nslookup my-web</span><br><span class="line">Server:    127.0.0.11</span><br><span class="line">Address 1: 127.0.0.11</span><br><span class="line"></span><br><span class="line">Name:      my-web</span><br><span class="line">Address 1: 10.0.0.5</span><br></pre></td></tr></table></figure><p>对于服务使用者，test服务根本就不需要知道my-web副本的IP、VIP，只需直接用service的名字就能访问服务；</p><h1 id="滚动更新service"><a href="#滚动更新service" class="headerlink" title="滚动更新service"></a>滚动更新service</h1><p>当需要进行更新的时候，swarm可以设定相应的策略来进行更新，例如并行更新多少个容器，更新时间间隔等；<br>滚动更新降低了应用更新的风险，如果某个副本更新失败，整个更新将暂停，其他副本则可以继续提供服务，同时，在更新的过程中，总是有副本在运行的，因此也保证了业务连续性；</p><p>swarm安装如下步骤进行滚动更新：  </p><ul><li>停止第一个副本</li><li>调度任务。选择worker node</li><li>在worker上用新的镜像启动副本</li><li>如果更新成功则继续更新下一个，如果失败，暂停整个更新的过程</li></ul><p>测试：创建2个副本的service，镜像使用httpd:2.2.31,然后将其更新到httpd:2.2.32</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name web-update --replicas=2 httpd:2.2.31</span><br><span class="line">yhjzc1lmkygvzk7zma6v7rwfy</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line">[root@docker-0 swarm]# docker service ps web-update</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">pnss5ryum1f9        web-update.1        httpd:2.2.31        docker-1            Running             Running about a minute ago</span><br><span class="line">o7fkw7jl78j2        web-update.2        httpd:2.2.31        docker-2            Running             Running about a minute ago</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将web-update更新到httpd:2.2.32 (默认一次只更新一个副本，且副本间没有等待时间)</span></span><br><span class="line">[root@docker-0 swarm]# docker service update --image httpd:2.2.32 web-update</span><br><span class="line">web-update</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line">[root@docker-0 swarm]# docker service ps web-update</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS</span><br><span class="line">ri7pp1gwfpof        web-update.1        httpd:2.2.32        docker-1            Running             Running 8 seconds ago</span><br><span class="line">pnss5ryum1f9         \_ web-update.1    httpd:2.2.31        docker-1            Shutdown            Shutdown about a minute ago</span><br><span class="line">974r7xpufhry        web-update.2        httpd:2.2.32        docker-2            Running             Running about a minute ago</span><br><span class="line">o7fkw7jl78j2         \_ web-update.2    httpd:2.2.31        docker-2            Shutdown            Shutdown 2 minutes ago</span><br></pre></td></tr></table></figure><p><code>更新前,先设置更新的并发数和更新的时间间隔，--update-parallelism设置并行更新的副本数，通过--update-delay指定滚动更新的时间间隔</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 副本增加到6个，并且设置更新并发数为2个，时间间隔为1分5秒</span></span><br><span class="line">[root@docker-0 swarm]# docker service update --replicas 6 --update-parallelism 2 --update-delay 1m05s web-update</span><br><span class="line">web-update</span><br><span class="line">overall progress: 6 out of 6 tasks</span><br><span class="line">1/6: running   [==================================================&gt;]</span><br><span class="line">2/6: running   [==================================================&gt;]</span><br><span class="line">3/6: running   [==================================================&gt;]</span><br><span class="line">4/6: running   [==================================================&gt;]</span><br><span class="line">5/6: running   [==================================================&gt;]</span><br><span class="line">6/6: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line">[root@docker-0 swarm]# docker service ps web-update</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                ERROR               PORTS</span><br><span class="line">ri7pp1gwfpof        web-update.1        httpd:2.2.32        docker-1            Running             Running 10 minutes ago</span><br><span class="line">pnss5ryum1f9         \_ web-update.1    httpd:2.2.31        docker-1            Shutdown            Shutdown 11 minutes ago</span><br><span class="line">974r7xpufhry        web-update.2        httpd:2.2.32        docker-2            Running             Running 11 minutes ago</span><br><span class="line">o7fkw7jl78j2         \_ web-update.2    httpd:2.2.31        docker-2            Shutdown            Shutdown 12 minutes ago</span><br><span class="line">l5gt07q396dw        web-update.3        httpd:2.2.32        docker-2            Running             Running about a minute ago</span><br><span class="line">tj4fookdmlko        web-update.4        httpd:2.2.32        docker-1            Running             Running 49 seconds ago</span><br><span class="line">ncyji5qju1co        web-update.5        httpd:2.2.32        docker-2            Running             Running 49 seconds ago</span><br><span class="line">1x58y4zqqyq6        web-update.6        httpd:2.2.32        docker-1            Running             Running about a minute ago</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看具体的信息，可以看到设置更新的参数</span></span><br><span class="line">[root@docker-0 swarm]# docker service inspect web-update --pretty</span><br><span class="line"></span><br><span class="line">ID:             yhjzc1lmkygvzk7zma6v7rwfy</span><br><span class="line">Name:           web-update</span><br><span class="line">Service Mode:   Replicated</span><br><span class="line"> Replicas:      6</span><br><span class="line">Placement:</span><br><span class="line">UpdateConfig:</span><br><span class="line"> Parallelism:   2</span><br><span class="line"> Delay:         1m5s</span><br><span class="line"> On failure:    pause</span><br><span class="line"> Monitoring Period: 5s</span><br><span class="line"> Max failure ratio: 0</span><br><span class="line"> Update order:      stop-first</span><br><span class="line">RollbackConfig:</span><br><span class="line"> Parallelism:   1</span><br><span class="line"> On failure:    pause</span><br><span class="line"> Monitoring Period: 5s</span><br><span class="line"> Max failure ratio: 0</span><br><span class="line"> Rollback order:    stop-first</span><br><span class="line">ContainerSpec:</span><br><span class="line"> Image:         httpd:2.2.32@sha256:a28a1a54ee7c4e03249b5eb3fed0c387399ffa5bb422ab50cbb19ffde76e58e7</span><br><span class="line">Resources:</span><br><span class="line">Endpoint Mode:  vip</span><br></pre></td></tr></table></figure><p><code>将目前的6个副本从httpd:2.2.32, 更新到httpd:2.4.16</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">可以观察到，每次2个副本同时更新，1分05秒后进行下一组的2个副本更新</span></span><br><span class="line">[root@docker-0 swarm]# docker service update --image httpd:2.4.16 web-update</span><br><span class="line">web-update</span><br><span class="line">overall progress: 6 out of 6 tasks</span><br><span class="line">1/6: running</span><br><span class="line">2/6: running</span><br><span class="line">3/6: running</span><br><span class="line">4/6: running</span><br><span class="line">5/6: running</span><br><span class="line">6/6: running</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p>如果在中途更新失败，则暂停整个集群的更新；<br>那么将会导致整个集群的副本版本不一致，这时需要rollback回滚；</p><h2 id="更新回滚"><a href="#更新回滚" class="headerlink" title="更新回滚"></a>更新回滚</h2><p>swarm有个方便的回滚功能，如果更新后的效果不理想，可以通过–rollback快速恢复到更新之前的状态；<br>但是它只能回滚到上一次执行docker service update之前的状态，并不能无限制回滚；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service update --rollback web-update</span><br></pre></td></tr></table></figure><p>测试下来，这个回滚并不是很稳定，会有回滚失败导致容器副本数减少、有些副本回滚没成功问题；</p><h1 id="节点标签"><a href="#节点标签" class="headerlink" title="节点标签"></a>节点标签</h1><p>给node节点加label标签，用于控制task运行在哪些节点；<br>生产环境上有时需要手动将容器分布在不同的节点；</p><p><code>更新节点属性，为节点添加标签</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node update --label-add ncname=docker-1-label docker-1</span><br><span class="line">docker-1</span><br><span class="line">[root@docker-0 swarm]# docker node update --label-add ncname=docker-2-label docker-2</span><br><span class="line">docker-2</span><br></pre></td></tr></table></figure><p><code>查看设置的标签</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker node inspect docker-1 --pretty</span><br><span class="line">ID:                     wscczkpfb15c5knm6cr6lj712</span><br><span class="line">Labels:</span><br><span class="line"> - ncname=docker-1-label</span><br></pre></td></tr></table></figure><p><code>根据label , 指定节点来运行相关的任务</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service create --name web --constraint node.labels.ncname==docker-1-label --replicas 2 nginx</span><br><span class="line">5xqg712i4ugcli6myq0u4pa75</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running   [==================================================&gt;]</span><br><span class="line">2/2: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以看到，运行在指定的机器上</span></span><br><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS</span><br><span class="line">g0n5bz0zrml1        web.1               nginx:latest        docker-1            Running             Running 13 seconds ago</span><br><span class="line">jdaah28caxa9        web.2               nginx:latest        docker-1            Running             Running 13 seconds ago</span><br></pre></td></tr></table></figure><p><code>去掉指定的标签</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service update --constraint-rm node.labels.ncname==docker-1-label web</span><br><span class="line">web</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running</span><br><span class="line">2/2: running</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><p><code>服务迁移到另一台主机上</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service update --constraint-add node.labels.ncname==docker-2-label web</span><br><span class="line">web</span><br><span class="line">overall progress: 2 out of 2 tasks</span><br><span class="line">1/2: running</span><br><span class="line">2/2: running</span><br><span class="line">verify: Service converged</span><br><span class="line"></span><br><span class="line">[root@docker-0 swarm]# docker service ps web</span><br><span class="line">ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE                 ERROR               PORTS</span><br><span class="line">vhc4kvdlbvhd        web.1               nginx:latest        docker-2            Running             Running about a minute ago</span><br><span class="line">g0n5bz0zrml1         \_ web.1           nginx:latest        docker-1            Shutdown            Shutdown about a minute ago</span><br><span class="line">3uc0w4ozudfm        web.2               nginx:latest        docker-2            Running             Running 53 seconds ago</span><br><span class="line">jdaah28caxa9         \_ web.2           nginx:latest        docker-1            Shutdown            Shutdown 55 seconds ago</span><br></pre></td></tr></table></figure><p>这种修改也可以使用rollback进行回滚；<br>但我使用回滚命令，然而并没有什么卵用，留待以后再做验证<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-0 swarm]# docker service update --rollback web</span><br></pre></td></tr></table></figure></p><h1 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h1><p>在企业生产环境中，合理的健康检查设置可以保证应用的可用性。现在很多应用框架已经内置了监控检查能力，比如Spring Boot Actuator。配合Docker内置的健康检测机制，可以非常简洁实现应用可用性监控，自动故障处理，和零宕机更新。</p><p>有两种方式：</p><ul><li>dockerfile 中加指令方式</li><li>docker service create 参数指令方式</li></ul><h2 id="dockerfile-中加指令方式"><a href="#dockerfile-中加指令方式" class="headerlink" title="dockerfile 中加指令方式"></a>dockerfile 中加指令方式</h2><p>HEALTHCHECK 指令格式：</p><ul><li>HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</li><li>HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉</li></ul><p>注：在Dockerfile中 HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>使用包含 HEALTHCHECK 指令的dockerfile构建出来的镜像，在实例化Docker容器的时候，就具备了健康状态检查的功能。启动容器后会自动进行健康检查。</p><p>HEALTHCHECK 支持下列选项：</p><ul><li>–interval=&lt;间隔&gt;：两次健康检查的间隔，默认为 30 秒；</li><li>–timeout=&lt;间隔&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；</li><li>–retries=&lt;次数&gt;：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。</li><li>–start-period=&lt;间隔&gt;: 应用的启动的初始化时间，在启动过程中的健康检查失效不会计入，默认 0 秒； (从17.05)引入</li></ul><p>在 HEALTHCHECK [选项] CMD 后面的命令，格式和 ENTRYPOINT 一样，分为 shell 格式，和 exec 格式。命令的返回值决定了该次健康检查的成功与否：</p><ul><li>0：成功；</li><li>1：失败；</li><li>2：保留值，不要使用</li></ul><p>容器启动之后，初始状态会为 starting (启动中)。Docker Engine会等待 interval 时间，开始执行健康检查命令，并周期性执行。如果单次检查返回值非0或者运行需要比指定 timeout 时间还长，则本次检查被认为失败。如果健康检查连续失败超过了 retries 重试次数，状态就会变为 unhealthy (不健康)。</p><p>注：</p><ul><li>一旦有一次健康检查成功，Docker会将容器置回 healthy (健康)状态</li><li>当容器的健康状态发生变化时，Docker Engine会发出一个 health_status 事件。</li></ul><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl来帮助判断，其 Dockerfile 的 HEALTHCHECK 可以这么写：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM elasticsearch:5.5</span><br><span class="line"> </span><br><span class="line">HEALTHCHECK --interval=5s --timeout=2s --retries=12 \</span><br><span class="line">  CMD curl --silent --fail localhost:9200/_cluster/health || exit 1</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 es]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 root root 148 Jun 28 07:48 Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@docker-1 es]# docker build -t test/elasticsearch:5.5 .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line">[root@docker-1 es]# docker run --rm -d --name=elasticsearch test/elasticsearch:5.5</span><br></pre></td></tr></table></figure><p><code>查看Elasticsearch容器从 starting 状态进入了 healthy 状态</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@docker-1 es]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED             STATUS                             PORTS                NAMES</span><br><span class="line">f129ea7ebc6e        test/elasticsearch:5.5   "/docker-entrypoint.…"   47 seconds ago      Up 10 seconds (health: starting)   9200/tcp, 9300/tcp   elasticsearch</span><br><span class="line">[root@docker-1 es]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                    COMMAND                  CREATED              STATUS                    PORTS                NAMES</span><br><span class="line">f129ea7ebc6e        test/elasticsearch:5.5   "/docker-entrypoint.…"   About a minute ago   Up 36 seconds (healthy)   9200/tcp, 9300/tcp   elasticsearch</span><br></pre></td></tr></table></figure><p><code>另外一种方法是在 docker run 命令中，直接指明healthcheck相关策略。</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -d \</span></span><br><span class="line">    --name=elasticsearch \</span><br><span class="line">    --health-cmd="curl --silent --fail localhost:9200/_cluster/health || exit 1" \</span><br><span class="line">    --health-interval=5s \</span><br><span class="line">    --health-retries=12 \</span><br><span class="line">    --health-timeout=2s \</span><br><span class="line">    elasticsearch:5.5</span><br></pre></td></tr></table></figure><p><code>为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr）都会被存储于健康状态里，可以用 docker inspect 来查看。我们可以通过如下命令，来获取过去5个容器的健康检查结果</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format='&#123;&#123;json .State.Health&#125;&#125;' elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">docker inspect elasticsearch | jq ".[].State.Health"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">docker inspect elasticsearch</span><br></pre></td></tr></table></figure><p>返回<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "Status": "healthy",</span><br><span class="line">  "FailingStreak": 0,</span><br><span class="line">  "Log": [</span><br><span class="line">    &#123;</span><br><span class="line">      "Start": "2018-06-28T09:04:45.612342812Z",</span><br><span class="line">  "End": "2018-06-28T09:04:45.736592584Z",</span><br><span class="line">      "ExitCode": 0,</span><br><span class="line">      "Output": "..."</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>建议在Dockerfile中声明相应的健康检查策略，这样可以方便镜像的使用</p><p>Docker社区为提供了一些包含健康检查的实例镜像，我们可以在如下项目中获取 <a href="https://github.com/docker-library/healthcheck" target="_blank" rel="noopener">https://github.com/docker-library/healthcheck</a></p><h2 id="docker-service-create-参数指令方式"><a href="#docker-service-create-参数指令方式" class="headerlink" title="docker service create 参数指令方式"></a>docker service create 参数指令方式</h2><p>在Docker 1.13之后，在Docker Swarm mode中提供了对健康检查策略的支持</p><p>可以在 docker service create 命令中指明健康检查策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker service create -d \</span></span><br><span class="line">    --name=elasticsearch \</span><br><span class="line">    --health-cmd="curl --silent --fail localhost:9200/_cluster/health || exit 1" \</span><br><span class="line">    --health-interval=5s \</span><br><span class="line">    --health-retries=12 \</span><br><span class="line">    --health-timeout=2s \</span><br><span class="line">    elasticsearch</span><br></pre></td></tr></table></figure><p>在Swarm模式下，Swarm manager会监控服务task的健康状态，如果容器进入 unhealthy 状态，它会停止容器并且重新启动一个新容器来取代它。这个过程中会自动更新服务的 load balancer (routing mesh) 后端或者 DNS记录，可以保障服务的可用性。</p><p>在1.13版本之后，在服务更新阶段也增加了对健康检查的支持，这样在新容器完全启动成功并进入健康状态之前，load balancer/DNS解析不会将请求发送给它。这样可以保证应用在更新过程中请求不会中断。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="空间不足"><a href="#空间不足" class="headerlink" title="空间不足"></a>空间不足</h2><p>如果哪天发现镜像无法构建，那一般都是空间问题；</p><p>方法一：暴力清除<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看哪个目录占用空间最大</span></span><br><span class="line">du -sh /*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止docker服务</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除/var/lib/docker目录下的所有文件</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动docker服务</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p><p>注意：docker 服务重启后，需要重新加入集群节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-3d7ynvjvs9kqdqaut2sir2ky42uoiv54fmwef5s7odei33a031-3rcwr1styfzw8f8j3k9mvbz9c 172.17.0.2:2377</span><br></pre></td></tr></table></figure></p><p>方法二： 转移/var/lib/docker目录<br>略…</p>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker日志收集方案</title>
      <link href="/docker/docker%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/"/>
      <url>/docker/docker%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="docker-日志收集方案"><a href="#docker-日志收集方案" class="headerlink" title="docker 日志收集方案"></a>docker 日志收集方案</h1><p>容器日志采集：</p><ul><li>基于docker api的日志流采集(stdout)；</li><li>日志文件采集（log file）</li></ul><p>传统应用日志采集：</p><ul><li>日志文件采集</li></ul><p>工具选型：</p><ul><li>支持文件日志和stdout</li><li>只支持文件日志</li><li>只支持stdout</li></ul><table><thead><tr><th>工具名称</th><th>支持文件日志</th><th>支持stdout</th><th>使用感受</th></tr></thead><tbody><tr><td>log-pilot</td><td>yes</td><td>yes</td><td>不错</td></tr><tr><td>filebeat</td><td>yes</td><td>no</td><td>6.3.0版本总是读不到数据</td></tr><tr><td>logspout</td><td>no</td><td>yes</td><td>他的stdout实现与log-pilot一样,调用的docker api</td></tr><tr><td>docker log dirver</td><td>no</td><td>yes</td><td>dirver支持none/json-file/syslog/fluentd/..</td></tr></tbody></table><p>日志采集工具要点：</p><ul><li>尽量不要影响主机上的应用、占用资源越小越好，不过如果是容器应用的话倒是可以限制其使用的资源；</li><li>是否支持灵活的日志标记，这样可以方便后续归类和数据分析，目前看下来log-pilot还不错；</li></ul><p>案例：</p><ul><li>tomcat既有stdout输出，也有文件日志输出(access.log)，这时你会选择哪个采集工具？</li><li>java应用既有stdout输出(console)，也有文件日志输出(xxxx.log)，这时你会选择哪个采集工具？</li><li>xxx应用，只有文件日志输出(xxxx.log)，这时你会选择哪个采集工具？</li></ul><h2 id="log-pilot"><a href="#log-pilot" class="headerlink" title="log-pilot"></a>log-pilot</h2><p>限定容器资源、用docker-compose启动<br>准备环境</p><p>阿里开源：<a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">https://github.com/AliyunContainerService/log-pilot</a></p><p>log-pilot 具有如下特性：</p><ul><li>一个单独的 log 进程收集机器上所有容器的日志。不需要为每个容器启动一个 log 进程。</li><li>支持文件日志和 stdout。docker log dirver 亦或 logspout 只能处理 stdout，log-pilot 不仅支持收集 stdout 日志，还可以收集文件日志。</li><li>声明式配置。当您的容器有日志要收集，只要通过 label 声明要收集的日志文件的路径，无需改动其他任何配置，log-pilot 就会自动收集新容器的日志。</li><li>支持多种日志存储方式。无论是强大的阿里云日志服务，还是比较流行的 elasticsearch 组合，甚至是 graylog，log-pilot 都能把日志投递到正确的地点。</li></ul><h3 id="采集输出到console"><a href="#采集输出到console" class="headerlink" title="采集输出到console"></a>采集输出到console</h3><p>环境准备：一台主机<br>步骤： 先启动一个 log-pilot，再启动一个 tomcat 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开一个终端，启动<span class="built_in">log</span>-pilot容器（不要关闭终端, 观察控制台日志）</span></span><br><span class="line">docker run --name mypilot --rm -it \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v /:/host \</span><br><span class="line">--privileged  \</span><br><span class="line">    registry.cn-hangzhou.aliyuncs.com/acs-sample/log-pilot:latest</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开一个终端，启动tomcat容器</span></span><br><span class="line">docker run --name mytomcat -it --rm  -p 10080:8080 \</span><br><span class="line">-v /usr/local/tomcat/logs \</span><br><span class="line">--label aliyun.logs.catalina=stdout \</span><br><span class="line">--label aliyun.logs.access=/usr/local/tomcat/logs/localhost_access_log.*.txt \</span><br><span class="line">tomcat</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>aliyun.logs.catalina=stdout</code> 告诉 log-pilot 这个容器要收集 stdout 日志。</li><li><code>aliyun.logs.access=/usr/local/tomcat/logs/localhost_access_log.*.txt</code> 则表示要收集容器内 /usr/local/tomcat/logs/ 目录下所有名字匹配 localhost_access_log.*.txt 的文件日志。后面会详细介绍 label 的用法。</li></ul><p>log-pilot 会监控 Docker 容器事件，当发现带有 aliyun.logs.xxx 容器时，自动解析容器配置，并且开始收集对应的日志。启动 tomcat 之后，会发现 log-pilot 的终端立即输出了一大堆的内容，其中包含 tomcat 启动时输出的 stdout 日志，也包括 log-pilot 自己输出的一些调试信息。</p><p>可以打开浏览器访问刚刚部署的 tomcat，您会发现每次刷新浏览器，在 log-pilot 的终端里都能看到类似的记录。其中 message 后面的内容就是从 /usr/local/tomcat/logs/localhost_access_log.XXX.txt 里收集到的日志。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开一个终端，进入tomcat容器</span></span><br><span class="line">docker exec -it -u root mytomcat /bin/bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 模拟浏览器访问tomcat</span></span><br><span class="line">curl 127.0.0.1:8080</span><br></pre></td></tr></table></figure><h3 id="采集输出到ES-kibana"><a href="#采集输出到ES-kibana" class="headerlink" title="采集输出到ES+kibana"></a>采集输出到ES+kibana</h3><p>环境准备：一台主机(可以跟上面同一台主机)</p><p>部署ELK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先在宿主机上执行如下命令</span></span><br><span class="line">sudo sysctl -w vm.max_map_count=262144</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行ELK容器</span></span><br><span class="line">docker run -d -p 5601:5601 -p 9200:9200 -p 5044:5044 -p 9300:9300 -it --name elk sebp/elk:630</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查</span></span><br><span class="line">浏览器访问kibana控制台  http://主机IP:5601</span><br><span class="line">浏览器访问es  http://主机IP:9200</span><br></pre></td></tr></table></figure><p>重启log-pilot</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭前面运行的<span class="built_in">log</span>-pilot</span></span><br><span class="line">docker stop mypilot</span><br><span class="line">docker rm mypilot</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动<span class="built_in">log</span>-pilot，注意替换ES所在的主机IP地址</span></span><br><span class="line">docker run --rm -it \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">    -v /:/host \</span><br><span class="line">    --privileged \</span><br><span class="line">    -e FLUENTD_OUTPUT=elasticsearch \</span><br><span class="line">    -e ELASTICSEARCH_HOST=172.17.0.3 \</span><br><span class="line">    -e ELASTICSEARCH_PORT=9200 \</span><br><span class="line">    registry.cn-hangzhou.aliyuncs.com/acs-sample/log-pilot:latest</span><br></pre></td></tr></table></figure><p>相比前面启动 log-pilot 的方式，这里增加了三个环境变量：</p><ul><li>FLUENTD_OUTPUT=elasticsearch：把日志发送到 ElasticSearch。</li><li>ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}：ElasticSearch 的域名。</li><li>ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT}：ElasticSearch 的端口号。</li></ul><p>继续运行前面的 tomcat，再次访问，让 tomcat 产生一些日志，所有这些新产生的日志都将发送到 ElasticSearch 里。</p><p>打开 kibana，此时您还看不到新日志，需要先创建 index。log-pilot 会把日志写到 ElasticSearch 特定的 index下，规则如下：</p><p>如果应用上使用了标签 <code>aliyun.logs.tags</code>，并且 <code>tags</code> 里包含 <code>target</code>，使用 <code>target</code> 作为 ElasticSearch 里的 index。否则，使用标签 <code>aliyun.logs.XXX</code> 里的 <code>XXX</code> 作为 index。</p><p>在前面 tomcat 里的例子里，没有使用 <code>liyun.logs.tags</code> 标签，所以默认使用了 <code>access</code> 和 <code>catalina</code> 作为 index。我们先创建 index <code>access</code>。</p><p><img src="/docker/docker日志收集方案/kibana-creat-index.png" alt="kibana-creat-index"><br>创建好 index 就可以查看日志了。<br><img src="/docker/docker日志收集方案/kibana-showlog.png" alt="kibana-creat-index"></p><h3 id="使用编排文件运行log-pilot"><a href="#使用编排文件运行log-pilot" class="headerlink" title="使用编排文件运行log-pilot"></a>使用编排文件运行log-pilot</h3><p>log-pilot docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    pilot:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/acs-sample/log-pilot:latest</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/:/host</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      FLUENTD_OUTPUT:</span> <span class="string">elasticsearch</span> <span class="comment">#按照您的需要替换</span></span><br><span class="line"><span class="attr">      ELASTICSEARCH_HOST:</span> <span class="string">$&#123;elasticsearch&#125;</span> <span class="comment">#按照您的需要替换</span></span><br><span class="line"><span class="attr">      ELASTICSEARCH_PORT:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">      logging:</span></span><br><span class="line"><span class="attr">        driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">        options:</span></span><br><span class="line"><span class="attr">           max-size:</span> <span class="string">"10m"</span></span><br><span class="line"><span class="attr">           max-file:</span> <span class="string">"5"</span></span><br><span class="line"><span class="attr">    cpu_shares:</span> <span class="number">512</span>  <span class="comment">#限制CPU使用份额权重,默认1024</span></span><br><span class="line"><span class="attr">    mem_limit:</span> <span class="number">600</span><span class="string">m</span>  <span class="comment">#内存限制600M</span></span><br><span class="line"><span class="attr">    memswap_limit:</span> <span class="number">800</span><span class="string">m</span> <span class="comment">#内存+swap限制800M</span></span><br><span class="line"><span class="attr">      blkio_config:</span></span><br><span class="line"><span class="attr">        weight:</span> <span class="number">300</span> <span class="comment">#限制读写磁盘带宽,默认500,取值0-1000</span></span><br><span class="line"><span class="attr">      networks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">    webnet:</span></span><br><span class="line"><span class="attr">       driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>查看限制的CPU、内存是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看CPU</span></span><br><span class="line">cat /sys/fs/cgroup/cpu/docker/&lt;容器长ID&gt;/cpu.shares</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看内存</span></span><br><span class="line">cat /sys/fs/cgroup/memory/docker/&lt;容器长ID&gt;/memory.limit_in_bytes</span><br><span class="line">cat /sys/fs/cgroup/memory/docker/&lt;容器长ID&gt;/memory.memsw.limit_in_bytes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者直接查看容器详细信息</span></span><br><span class="line">docker inspect &lt;容器长ID&gt;</span><br></pre></td></tr></table></figure><p>tomcat docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"2"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">    mytomcat:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">tomcat:latest</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/usr/local/tomcat/logs</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"aliyun.logs.catalina=stdout"</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"aliyun.logs.access=/usr/local/tomcat/logs/localhost_access_log.*.txt"</span></span><br><span class="line"><span class="attr">      logging:</span></span><br><span class="line"><span class="attr">        driver:</span> <span class="string">json-file</span></span><br><span class="line"><span class="attr">        options:</span></span><br><span class="line"><span class="attr">           max-size:</span> <span class="string">"10m"</span></span><br><span class="line"><span class="attr">           max-file:</span> <span class="string">"5"</span></span><br><span class="line"><span class="attr">      networks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">webnet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">    webnet:</span></span><br><span class="line"><span class="attr">       driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f mylogpilot.yml up</span><br><span class="line">docker-compose -f mytomcat.yml up</span><br></pre></td></tr></table></figure><h3 id="label-说明"><a href="#label-说明" class="headerlink" title="label 说明"></a>label 说明</h3><p>启动 tomcat 时，声明了下面两个 label 来告诉 log-pilot 这个容器的日志位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--label aliyun.logs.catalina=stdout</span><br><span class="line">--label aliyun.logs.access=/usr/local/tomcat/logs/localhost_access_log.*.txt</span><br></pre></td></tr></table></figure><p>您还可以在应用容器上添加更多的标签。</p><ul><li><code>aliyun.logs.$name = $path</code><ul><li>变量 <code>name</code> 是日志名称，只能包含 0~9、a~z、A~Z 和连字符（-）。</li><li>变量 <code>path</code> 是要收集的日志路径，必须具体到文件，不能只写目录。文件名部分可以使用通配符，例如，<code>/var/log/he.log</code> 和 <code>/var/log/*.log</code> 都是正确的值，但 <code>/var/log</code> 不行，不能只写到目录。<code>stdout</code> 是一个特殊值，表示标准输出。</li></ul></li><li><code>aliyun.logs.$name.format</code>：日志格式，目前支持以下格式。<ul><li>none：无格式纯文本。</li><li>json：json 格式，每行一个完整的 json 字符串。</li><li>csv：csv 格式。</li></ul></li><li><p><code>aliyun.logs.$name.tags</code>：上报日志时，额外增加的字段，格式为 <code>k1=v1,k2=v2</code>，每个 key-value 之间使用逗号分隔，例如 <code>aliyun.logs.access.tags=&quot;name=hello,stage=test&quot;</code>，上报到存储的日志里就会出现 <code>name</code> 字段和 <code>stage</code> 字段。</p><p>如果使用 ElasticSearch 作为日志存储，<code>target</code> 这个 tag 具有特殊含义，表示 ElasticSearch 里对应的 index。</p></li></ul><h3 id="最后的思考"><a href="#最后的思考" class="headerlink" title="最后的思考"></a>最后的思考</h3><ul><li>采集到重复数据问题，比如采集程序重启之后，读到重复数据，是否有排重？根据什么规则排重？</li><li>采集数据是否会发生遗漏，比如采集程序重启之后，是否有标记最后读取的位置</li><li>采集输出到后端，是否有过滤，或者可以自定义过滤</li><li>采集输出到后端，是否尽量保证不丢失，采用的策略是什么</li></ul><p>如果log-pilot做不到上述事情,或者扩展起来麻烦，则考虑自己写个agent, 起码自己写的程序，知道如何驾驭;</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>log-pilot官方<br><a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">https://github.com/AliyunContainerService/log-pilot</a><br><a href="https://helpcdn.aliyun.com/document_detail/50441.html" target="_blank" rel="noopener">https://helpcdn.aliyun.com/document_detail/50441.html</a>  </li><li>Docker日志收集最佳实践<br><a href="https://yq.aliyun.com/articles/72700" target="_blank" rel="noopener">https://yq.aliyun.com/articles/72700</a></li><li>logspout<br><a href="https://github.com/gliderlabs/logspout" target="_blank" rel="noopener">https://github.com/gliderlabs/logspout</a></li><li>logspout 网友扩展<br><a href="https://www.jianshu.com/p/bd482c13ea66" target="_blank" rel="noopener">https://www.jianshu.com/p/bd482c13ea66</a></li></ul><h1 id="几种采集架构图"><a href="#几种采集架构图" class="headerlink" title="几种采集架构图"></a>几种采集架构图</h1><ul><li><p>业务埋点数据、应用日志数据<br>log-pilot-&gt;kafka-&gt;logstash-&gt;es-&gt;kibana<br>log-pilot-&gt;kafka-&gt;storm/spark<br><img src="/docker/docker日志收集方案/flow1.png" alt="flow1"></p></li><li><p>应用日志数据<br>log-pilot-&gt;logstash-&gt;es-&gt;kibana<br><img src="/docker/docker日志收集方案/flow2.png" alt="flow2"></p></li><li><p>采集文件日志<br>采集工具可以用log-pilot、filebeat、fluentd、flume、….<br><img src="/docker/docker日志收集方案/flow3.png" alt="flow3"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker构建Jenkins image</title>
      <link href="/docker/docker%E6%9E%84%E5%BB%BAjenkins%20image/"/>
      <url>/docker/docker%E6%9E%84%E5%BB%BAjenkins%20image/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>基于官方Jenkins镜像，构建打包环境，包括Maven/git/nodejs;<br>预安装jenkins各种插件；<br>具体见：   <a href="https://github.com/smalldok/jenkins-maven-git-nodejs-docker" target="_blank" rel="noopener">https://github.com/smalldok/jenkins-maven-git-nodejs-docker</a></p><p>以下是构建jenkins image步骤</p><h1 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h1><ul><li><p>启动docker服务</p></li><li><p>拉取jenkins镜像(docker hub 官方)<br>官方镜像搜索：<a href="https://hub.docker.com" target="_blank" rel="noopener">https://hub.docker.com</a><br><code>docker pull jenkins:2.60.3</code> 或者<code>docker pull jenkins</code></p></li><li>查看镜像<br><code>docker images</code></li><li>删除镜像<br><code>docker rmi 7b210b6c238a</code> 或者 <code>docker rmi -f 7b210b6c238a</code></li><li>运行镜像  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjenkins -p 8080:8080 -p 50000:50000 -v /Users/smalldok/work/idea-work/docker/volume/jenkins_home:/var/jenkins_home jenkins:2.60.3</span><br></pre></td></tr></table></figure></li></ul><p>或者以交互方式运行(这种适合更新修改镜像内部的东西)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjenkins -i -t -p 8080:8080 -p 50000:50000 -v /Users/smalldok/work/idea-work/docker/volume/jenkins_home:/var/jenkins_home jenkins:2.60.3 /bin/bash</span><br><span class="line"></span><br><span class="line">然后exit退出、commit来重新创建镜像副本</span><br></pre></td></tr></table></figure></p><p>或者后台方式运行(推荐)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjenkins -d --env JAVA_OPTS=&quot;-Xmx8192m&quot; -p 8080:8080 -p 50000:50000 -v /Users/smalldok/work/idea-work/docker/volume/jenkins_home:/var/jenkins_home jenkins:2.60.3</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myjenkins -d --env JAVA_OPTS=&quot;-Xmx8192m&quot; -p 8080:8080 -p 50000:50000 -v /Users/smalldok/work/idea-work/docker/volume/jenkins_home:/var/jenkins_home -e ROOT_PASS=&quot;jenkins&quot; jenkins:2.60.3</span><br></pre></td></tr></table></figure><ul><li>jenkins解锁<br>启动后访问<a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a> 出现Unlock Jenkins页面，按提示在jenkins容器中获取密码；<br>命令行进入容器:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l</span><br><span class="line">docker exec -it 91e4b117c7f0 /bin/bash</span><br><span class="line">cat /var/jenkins_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></li></ul><p>以root用户进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it -u root myjenkins /bin/bash</span><br></pre></td></tr></table></figure></p><h1 id="制作Dockerfile"><a href="#制作Dockerfile" class="headerlink" title="制作Dockerfile"></a>制作Dockerfile</h1><h3 id="验证jenkins-plugin安装"><a href="#验证jenkins-plugin安装" class="headerlink" title="验证jenkins plugin安装"></a>验证jenkins plugin安装</h3><h5 id="jenkins-plugin-list"><a href="#jenkins-plugin-list" class="headerlink" title="jenkins plugin list"></a>jenkins plugin list</h5><ul><li>Organization and Administration<br>dashboard-view<br>cloudbees-folder<br>antisamy-markup-formatter<br>backup</li><li>Build Features<br>token-macro<br>build-timeout<br>credentials-binding<br>ws-cleanup<br>timestamper</li><li>Build Tools<br>nodejs<br>build-name-setter<br>scm-api 源码管理工具</li><li>Build Analysis and Reporting<br>无</li><li>Pipelines and Continuous Delivery<br>build-pipeline-plugin<br>parameterized-trigger<br>copyartifact</li><li>Source Code Management<br>git-client<br>git<br>gitlab-plugin<br>github-pullrequest  </li><li>User Management and Security<br>matrix-auth<br>pam-auth<br>ldap<br>role-strategy  </li><li>Notifications and Publishing<br>Publish Over SSH<br>ssh-credentials<br>SSH<br>Mailer<br>email-ext</li><li>project and view<br>nested-view<br>sectioned-view  </li><li>docker<br>docker-commons<br>docker-build-publish<br>docker-plugin<br>kubernetes</li></ul><h5 id="jenkins-plugin-txt"><a href="#jenkins-plugin-txt" class="headerlink" title="jenkins plugin.txt"></a>jenkins plugin.txt</h5><p>查找或下载插件 <a href="https://plugins.jenkins.io/" target="_blank" rel="noopener">https://plugins.jenkins.io/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">dashboard-view:latest</span><br><span class="line">cloudbees-folder:latest</span><br><span class="line">antisamy-markup-formatter:latest</span><br><span class="line">backup:latest</span><br><span class="line"></span><br><span class="line">token-macro:latest</span><br><span class="line">build-timeout:latest</span><br><span class="line">credentials-binding:latest</span><br><span class="line">ws-cleanup:latest</span><br><span class="line">timestamper:latest</span><br><span class="line"></span><br><span class="line">nodejs:latest</span><br><span class="line">build-name-setter:latest</span><br><span class="line">scm-api:latest</span><br><span class="line"></span><br><span class="line">build-pipeline-plugin:latest</span><br><span class="line">parameterized-trigger:latest</span><br><span class="line">copyartifact:latest</span><br><span class="line"></span><br><span class="line">git-client:latest</span><br><span class="line">git:latest</span><br><span class="line">gitlab-plugin:latest</span><br><span class="line">github-pullrequest:latest</span><br><span class="line"></span><br><span class="line">matrix-auth:latest</span><br><span class="line">pam-auth:latest</span><br><span class="line">ldap:latest</span><br><span class="line">role-strategy:latest</span><br><span class="line"></span><br><span class="line">publish-over-ssh:latest</span><br><span class="line">ssh-credentials:latest</span><br><span class="line">ssh:latest</span><br><span class="line">mailer:latest</span><br><span class="line">email-ext:latest</span><br><span class="line"></span><br><span class="line">nested-view:latest</span><br><span class="line">sectioned-view:latest</span><br><span class="line"></span><br><span class="line">docker-commons:latest</span><br><span class="line">docker-build-publish:latest</span><br><span class="line">docker-plugin:latest</span><br><span class="line">kubernetes:latest</span><br></pre></td></tr></table></figure></p><p>验证插件安装  </p><ul><li><p>进入容器命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it -u root myjenkins /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>准备plugins.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/jenkins/</span><br><span class="line">vi plugins.txt</span><br></pre></td></tr></table></figure></li><li><p>执行插件安装脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/install-plugins.sh $(cat /usr/share/jenkins/plugins.txt | tr &apos;\n&apos; &apos; &apos;)</span><br></pre></td></tr></table></figure></li></ul><p>单个失败，则重新安装,如：<br><code>/usr/local/bin/install-plugins.sh jira-trigger:latest</code><br>安装完成后，查看<code>/usr/share/jenkins/ref/plugins</code>目录；</p><ul><li>登录jenkins 控制台页面查看<br><a href="http://127.0.0.1:8080/pluginManager/installed" target="_blank" rel="noopener">http://127.0.0.1:8080/pluginManager/installed</a><h3 id="验证JDK、GIT、SSH安装"><a href="#验证JDK、GIT、SSH安装" class="headerlink" title="验证JDK、GIT、SSH安装"></a>验证JDK、GIT、SSH安装</h3>JDK，默认在jenkins基础镜像中已经安装，见官方Dockerfile: <code>https://github.com/jenkinsci/docker/blob/master/Dockerfile</code><br>GIT，默认在上面安装jenkins插件git时已经安装;<br>SSH，默认在上面安装jenkins插件ssh时已经安装;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">git --version</span><br><span class="line">ssh</span><br></pre></td></tr></table></figure></li></ul><h3 id="验证maven安装"><a href="#验证maven安装" class="headerlink" title="验证maven安装"></a>验证maven安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y wget</span><br><span class="line"># get maven 3.5.3</span><br><span class="line">wget --no-verbose -O /tmp/apache-maven-3.5.3.tar.gz http://archive.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line"># verify checksum</span><br><span class="line">echo &quot;51025855d5a7456fc1a67666fbef29de /tmp/apache-maven-3.5.3.tar.gz&quot; | md5sum -c</span><br><span class="line"></span><br><span class="line"># install maven</span><br><span class="line">tar xzf /tmp/apache-maven-3.5.3.tar.gz -C /opt/</span><br><span class="line">ln -s /opt/apache-maven-3.5.3 /opt/maven</span><br><span class="line">ln -s /opt/maven/bin/mvn /usr/local/bin</span><br><span class="line">rm -f /tmp/apache-maven-3.5.3.tar.gz</span><br><span class="line"></span><br><span class="line"># env</span><br><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line">MAVEN_HOME=&quot;/opt/maven&quot;</span><br><span class="line">PATH=&quot;$PATH:$MAVEN_HOME&quot;</span><br><span class="line">export MAVEN_HOME</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">保存wq! 然后生效source ~/.bashrc</span><br><span class="line"></span><br><span class="line">#check MAVEN</span><br><span class="line">mvn -v</span><br><span class="line">echo $MAVEN_HOME</span><br></pre></td></tr></table></figure><h3 id="验证nodejs安装"><a href="#验证nodejs安装" class="headerlink" title="验证nodejs安装"></a>验证nodejs安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># get nodejs 9.9.0</span><br><span class="line">wget --no-verbose -O /tmp/node-v9.9.0-linux-x64.tar.gz https://nodejs.org/dist/v9.9.0/node-v9.9.0-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line"># install nodejs</span><br><span class="line">tar xzf /tmp/node-v9.9.0-linux-x64.tar.gz -C /opt/</span><br><span class="line">ln -s /opt/node-v9.9.0-linux-x64 /opt/nodejs</span><br><span class="line">ln -s /opt/nodejs/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /opt/nodejs/bin/npm /usr/local/bin/npm</span><br><span class="line">rm -f /tmp/node-v9.9.0-linux-x64.tar.gz</span><br><span class="line"></span><br><span class="line">#check nodejs</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像,基于官方jenkins2.60.3,包括openJDK8</span><br><span class="line"># 见 https://github.com/jenkinsci/docker/blob/master/Dockerfile</span><br><span class="line">#</span><br><span class="line"># 预安装jenkins各种插件maven/git/nodejs/docker plugin等等,详见: resources/plugins.txt</span><br><span class="line"># 预安装maven、git、nodejs、SSH环境</span><br><span class="line">#</span><br><span class="line"># github: https://github.com/smalldok/jenkins+maven-git-nodejs-docker</span><br><span class="line"></span><br><span class="line">FROM jenkins:2.60.3</span><br><span class="line">MAINTAINER smalldok yaojialing5566@gmail.com</span><br><span class="line"></span><br><span class="line"># Install Jenkins Plugins</span><br><span class="line">COPY resources/plugins.txt /usr/share/jenkins/plugins.txt</span><br><span class="line">RUN /usr/local/bin/install-plugins.sh $(cat /usr/share/jenkins/plugins.txt | tr &apos;\n&apos; &apos; &apos;)</span><br><span class="line"></span><br><span class="line"># Install maven</span><br><span class="line">USER root</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y wget</span><br><span class="line"></span><br><span class="line"># get maven 3.5.3</span><br><span class="line">RUN wget --no-verbose -O /tmp/apache-maven-3.5.3.tar.gz http://archive.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.tar.gz</span><br><span class="line"></span><br><span class="line"># verify checksum</span><br><span class="line">RUN echo &quot;51025855d5a7456fc1a67666fbef29de /tmp/apache-maven-3.5.3.tar.gz&quot; | md5sum -c</span><br><span class="line"></span><br><span class="line"># install maven</span><br><span class="line">RUN tar xzf /tmp/apache-maven-3.5.3.tar.gz -C /opt/ \</span><br><span class="line">&amp;&amp; ln -s /opt/apache-maven-3.5.3 /opt/maven \</span><br><span class="line">&amp;&amp; ln -s /opt/maven/bin/mvn /usr/local/bin \</span><br><span class="line">&amp;&amp; rm -f /tmp/apache-maven-3.5.3.tar.gz</span><br><span class="line"></span><br><span class="line">ENV MAVEN_HOME /opt/maven</span><br><span class="line"></span><br><span class="line"># Switch back to Jenkins user</span><br><span class="line">USER jenkins</span><br></pre></td></tr></table></figure><h3 id="Build-image"><a href="#Build-image" class="headerlink" title="Build image"></a>Build image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># build</span><br><span class="line">docker build -t smalldok/jenkins:1.0 .</span><br><span class="line"></span><br><span class="line"># check image</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"># run</span><br><span class="line">docker run --name myjenkins -d --env JAVA_OPTS=&quot;-Xmx8192m&quot; -p 8080:8080 -p 50000:50000 -v /Users/smalldok/work/idea-work/docker/volume/jenkins_home:/var/jenkins_home -e ROOT_PASS=&quot;jenkins&quot; smalldok/jenkins:1.0</span><br><span class="line"></span><br><span class="line"># open console</span><br><span class="line">http://127.0.0.1:8080/</span><br><span class="line"></span><br><span class="line"># stop container</span><br><span class="line">docker stop myjenkins</span><br><span class="line"></span><br><span class="line"># delete container</span><br><span class="line">docker rm myjenkins</span><br></pre></td></tr></table></figure><h3 id="Push-image"><a href="#Push-image" class="headerlink" title="Push image"></a>Push image</h3><p><strong>镜像上传阿里云</strong>：  </p><ul><li>注册阿里云docker registry <a href="https://cr.console.aliyun.com" target="_blank" rel="noopener">https://cr.console.aliyun.com</a></li><li>在账户中创建命名空间、镜像仓库</li><li>登录阿里云docker registry  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login --username=[用户名] registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure></li></ul><p>登录registry的用户名是您的阿里云账号全名，密码是您开通服务时设置的密码。<br>你可以在镜像管理首页点击右上角按钮修改docker login密码。</p><ul><li>将镜像推送到registry<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker login --username=[用户名] registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">$ docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/smalldok/jenkins:[镜像版本号]</span><br><span class="line">$ docker push registry.cn-hangzhou.aliyuncs.com/smalldok/jenkins:[镜像版本号]</span><br></pre></td></tr></table></figure></li></ul><p><strong>镜像上传docker官方(被墙)</strong></p><ul><li>注册Hub账号：<br><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></li><li>在账户中创建仓库：Create Repository</li><li><p>login hub</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure></li><li><p>upload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push smalldok/jenkins:1.0</span><br></pre></td></tr></table></figure></li><li><p>其他命令  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改镜像tag</span><br><span class="line">docker tag &lt;imageID&gt; &lt;namespace&gt;/&lt;image name&gt;:&lt;version tag eg latest&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>删除容器，会删除<code>-v /your/home:/var/jenkins_home</code>指定挂载目录下的数据？<br>不会，例如：执行<code>docker rm myjenkins</code>,并不会删除宿主机/your/home下的数据</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>构建Image Size过大问题？<br>一条指令构建一层layer，应该减少层即可减少体积;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN aaaaa</span><br><span class="line">RUN bbbbb</span><br><span class="line">RUN ccccc</span><br></pre></td></tr></table></figure></p><p>应尽量改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN aaaaa \</span><br><span class="line">    &amp;&amp; bbbbb \</span><br><span class="line">    &amp;&amp; ccccc</span><br></pre></td></tr></table></figure></p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><p>docker: Error response from daemon: error creating overlay mount to /Users/smalldok/install/docker/docker-root-dir/overlay2/517ba0e3473b5196356d2c970322371964dff4c8803acc88421e71a34aabe783-init/merged: invalid argument.<br>不要修改docker root dir，还原为默认的/var/lib/docker下</p><h3 id="问题4："><a href="#问题4：" class="headerlink" title="问题4："></a>问题4：</h3><p>ocker: Error response from daemon: Conflict. The container name “/myjenkins” is already in use by container “e4c7f088c941063dfbea65c65ec683978dab2d309fa252a9f735594f6bb481d9”. You have to remove (or rename) that container to be able to reuse that name.<br>主机上运行docker rm xxxx 删除容器</p><h3 id="问题5："><a href="#问题5：" class="headerlink" title="问题5："></a>问题5：</h3><p>在容器中执行vi xxx.txt 报错 vi: command not found；<br>在使用docker容器时，有时候里边没有安装vim，敲vim命令时提示说：vim: command not found，这个时候就需要安装vim，可是当你敲apt-get install vim命令时，提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">E: Unable to locate package vim</span><br></pre></td></tr></table></figure></p><p>这时候需要敲：apt-get update，这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。<br>等更新完毕以后再敲命令：apt-get install vim命令即可。</p>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring-retry 破坑</title>
      <link href="/spring-retry%20%E7%A0%B4%E5%9D%91/"/>
      <url>/spring-retry%20%E7%A0%B4%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p><code>A接口</code> -&gt; <code>B接口</code> 调用失败，重试、重试失败降级处理；<br>如：实现第三方的app Push推送；<br>如：消息系统推送消息给订阅方；</p><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>项目基于springboot，在根pom.xml中引用，所以这里没有<code>&lt;version&gt;</code>，以springboot中的版本为准;<br>项目根<code>pom.xml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></p><p>项目mode<code>pom.xml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- spring-retry --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h2 id="spring-retry知识"><a href="#spring-retry知识" class="headerlink" title="spring-retry知识"></a>spring-retry知识</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retryable</span>(value= &#123;RemoteAccessException.class&#125;,maxAttempts = <span class="number">3</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">1000l</span>,multiplier = <span class="number">1</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Recover</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(RemoteAccessException e)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Retryable</code><br><code>value</code>选择需要重试的异常，可指定多个；<br><code>maxAttempts</code> 最大重试次数,超过则调用@Recover指定的方法(根据异常类型)<br><code>delay</code> 每次重试的间隔时间</li><li><code>@Recover</code><br>当超过重试次数，则调用此注解的方法(根据异常类型)</li></ul><p><code>使用原则：不要全部异常都进行重试，要有选择性的根据异常重试；</code></p><h2 id="两种使用方式"><a href="#两种使用方式" class="headerlink" title="两种使用方式"></a>两种使用方式</h2><p>我目前使用的第一种方式，因为业务比较简单；</p><h3 id="1、-Retryable和-Recover在同一个类中"><a href="#1、-Retryable和-Recover在同一个类中" class="headerlink" title="1、@Retryable和@Recover在同一个类中"></a>1、@Retryable和@Recover在同一个类中</h3><p><code>@EnableRetry</code>启动配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RetryConfig</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>业务类RemoteService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Retryable</span>(value= &#123;RemoteAccessException.class&#125;,maxAttempts = <span class="number">3</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">1000l</span>,multiplier = <span class="number">1</span>))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something..."</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"RPC调用异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Recover</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recover</span><span class="params">(RemoteAccessException e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"recover====&gt;"</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>约束：<br>1、@Retryable 和 @Recover必须在同一个类中<br>2、这个类必须是受spring管理的bean<br>3、方法必须是public</p><h3 id="2、拦截器"><a href="#2、拦截器" class="headerlink" title="2、拦截器"></a>2、拦截器</h3><p><code>@EnableRetry</code>启动配置,且加上<code>拦截器</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"mq.consumer.callback"</span>, name = &#123;<span class="string">"retry-times"</span>,<span class="string">"retry-delay-inMilliseconds"</span>&#125; ,matchIfMissing = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConsumerProperties consumerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每一个业务方法对应一个拦截器和自定义recover</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"retryInterceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RetryOperationsInterceptor <span class="title">retryInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RetryInterceptorBuilder</span><br><span class="line">                .stateless().recoverer(<span class="keyword">new</span> CustomMessageRecover())</span><br><span class="line">                .backOffOptions(<span class="number">0L</span>,<span class="number">1</span>D, consumerProperties.getCallback().getRetryDelayInMilliseconds())</span><br><span class="line">                .maxAttempts(consumerProperties.getCallback().getRetryTimes()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomMessageRecover</span> <span class="keyword">implements</span> <span class="title">MethodInvocationRecoverer</span>&lt;<span class="title">Void</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">recover</span><span class="params">(Object[] args, Throwable cause)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"IN THE RECOVER ZONE!!!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>业务类RemoteService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Retryable</span>(value= &#123;RemoteAccessException.class&#125;,interceptor = <span class="string">"retryInterceptor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do something..."</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RemoteAccessException(<span class="string">"RPC调用异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意到没？@Recover注解的方法不在里面了；已经由拦截器代理到CustomMessageRecover类</p>]]></content>
      
      
      <categories>
          
          <category> 服务治理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重试 </tag>
            
            <tag> 降级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h2客户端工具DbVisualizer</title>
      <link href="/h2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7DbVisualizer/"/>
      <url>/h2%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7DbVisualizer/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>一般springboot中启动h2，即可通过网页访问控制台，来操作H2；<br>如，<code>http://localhost:9088/xxxserver/h2-console</code><br>但是要启动项目才能访问，极大的不方便；<br>因此需要第三方工具直接打开<code>mychannel.mv.db</code>文件，像在console上操作一样；</p></blockquote><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>工具版本：<br><code>DbVisualizer 9.0.7</code><br>网上有破解的，它还可连接所有主流关系型数据库(我日常就用的它)  </li><li>项目中使用的h2版本：<code>h2-1.4.193</code></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>假设<code>mychannel.mv.db</code>文件在<code>/aaa/bbb</code>目录<br>=&gt;  /aaa/bbb/mychannel.mv.db</li><li>打开DbVisualizer向导,创建一个H2连接：<br>Database Type: <code>H2</code><br>Driver(JDBC)： <code>H2 embedded</code><br>Database filename: <code>/aaa/bbb/mychannel</code><br>Database Userid: 项目里面设置的用户名<br>Database Password: 项目里面设置的密码</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>DbVisualizer 的H2驱动问题<br>DbVisualizer 自己会下载数据库驱动，但自带的h2驱动为 1.3 的版本，目前最新h2版本为 1.4 （因为1.3版本默认是 dbname.h2.db 形式的，用1.3驱动无法正确打开最新的 dbname.mv.db 形式的数据库文件，因为默认后缀不同，连接URL带上数据库名，dbvisualizer 会自动认为是 dbname.h2.db 由于文件不存在，所以变成是新建一个 dbname.h2.db 数据库文件了）  </li><li>解决办法<br>把最新版本的h2的jar包(本地maven仓库中拿)，复制到 DbVisualizer 安装目录下的 DbVisualizer\jdbc\h2 中，把原有目录中的h2.jar 删掉，把最新版本的h2 jar 包命名为 h2.jar 替换原有的。<br>这样就能识别新版本的h2，打开已经创建了的 *.mv.db 了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H2 </tag>
            
            <tag> 嵌入式数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot-webjars集成前端UI</title>
      <link href="/springboot-webjars%E9%9B%86%E6%88%90%E5%89%8D%E7%AB%AFUI/"/>
      <url>/springboot-webjars%E9%9B%86%E6%88%90%E5%89%8D%E7%AB%AFUI/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是WebJars"><a href="#什么是WebJars" class="headerlink" title="什么是WebJars"></a>什么是WebJars</h2><p>WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。<br>如果我们将这些前端资源打成jar包，我们就可以进行依赖管理。</p><p>我们经常看到类似如下这种带管理后台的第三方工具，在springboot中这么使用：<br><img src="/springboot-webjars集成前端UI/springboot-admin依赖方式.png" alt="springboot-admin">   </p><h2 id="springboot-处理静态资源知识"><a href="#springboot-处理静态资源知识" class="headerlink" title="springboot 处理静态资源知识"></a>springboot 处理静态资源知识</h2><p>Spring Boot 默认将 /** 所有访问映射到以下目录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classpath:/META-INF/resources</span><br><span class="line">classpath:/resources</span><br><span class="line">classpath:/<span class="keyword">static</span></span><br><span class="line">classpath:/<span class="keyword">public</span></span><br></pre></td></tr></table></figure></p><p>优先级顺序为：META/resources &gt; resources &gt; static &gt; public  </p><p>如果UI页面不放在这些默认目录，则需要在springboot webconfiguration中配置资源映射(本文就是采用资源映射方式)；  </p><p>参考：<br><a href="http://www.cnblogs.com/magicalSam/p/7189476.html" target="_blank" rel="noopener">http://www.cnblogs.com/magicalSam/p/7189476.html</a><br><a href="https://github.com/codecentric/spring-boot-admin/blob/master/spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerWebConfiguration.java" target="_blank" rel="noopener">https://github.com/codecentric/spring-boot-admin/blob/master/spring-boot-admin-server/src/main/java/de/codecentric/boot/admin/config/AdminServerWebConfiguration.java</a></p><h2 id="找个web前端工程"><a href="#找个web前端工程" class="headerlink" title="找个web前端工程"></a>找个web前端工程</h2><ul><li>一个管理后台前端项目<br><a href="http://panjiachen.github.io/vueAdmin-template" target="_blank" rel="noopener">http://panjiachen.github.io/vueAdmin-template</a><br>fork到我自己的github<br><a href="https://github.com/smalldok/vueAdmin-template.git" target="_blank" rel="noopener">https://github.com/smalldok/vueAdmin-template.git</a></li><li>在本地<code>git clone https://github.com/smalldok/vueAdmin-template.git</code></li><li><p>进入vueAdmin-template目录，新建pom.xml文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">  &lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">&lt;groupId&gt;com.github&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;xxx-admin-server-ui&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt; </span><br><span class="line"></span><br><span class="line">&lt;properties&gt; </span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; </span><br><span class="line">&lt;java.version&gt;1.7&lt;/java.version&gt; </span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;executions&gt;</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;yarn-install&lt;/id&gt;</span><br><span class="line">              &lt;phase&gt;validate&lt;/phase&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;exec&lt;/goal&gt;</span><br><span class="line">              &lt;/goals&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                &lt;executable&gt;yarn&lt;/executable&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                  &lt;argument&gt;install&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">            &lt;/execution&gt;</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;yarn-build&lt;/id&gt;</span><br><span class="line">              &lt;phase&gt;generate-resources&lt;/phase&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;exec&lt;/goal&gt;</span><br><span class="line">              &lt;/goals&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                &lt;executable&gt;yarn&lt;/executable&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                  &lt;argument&gt;run&lt;/argument&gt;</span><br><span class="line">                  &lt;argument&gt;build&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">            &lt;/execution&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">            &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;yarn-test&lt;/id&gt;</span><br><span class="line">              &lt;phase&gt;test&lt;/phase&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;exec&lt;/goal&gt;</span><br><span class="line">              &lt;/goals&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                &lt;executable&gt;yarn&lt;/executable&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                  &lt;argument&gt;run&lt;/argument&gt;</span><br><span class="line">                  &lt;argument&gt;test&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">            &lt;/execution&gt;</span><br><span class="line">--&gt;</span><br><span class="line">          &lt;/executions&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><br><span class="line">          &lt;configuration&gt;</span><br><span class="line">            &lt;nonFilteredFileExtensions&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;woff&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;ttf&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;woff2&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;eot&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;swf&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">              &lt;nonFilteredFileExtension&gt;ico&lt;/nonFilteredFileExtension&gt;</span><br><span class="line">            &lt;/nonFilteredFileExtensions&gt;</span><br><span class="line">          &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line">      &lt;resources&gt;</span><br><span class="line">        &lt;resource&gt;</span><br><span class="line">          &lt;directory&gt;dist&lt;/directory&gt;</span><br><span class="line">          &lt;targetPath&gt;META-INF/xxx-admin-server-ui&lt;/targetPath&gt;</span><br><span class="line">          &lt;filtering&gt;true&lt;/filtering&gt;</span><br><span class="line">        &lt;/resource&gt;</span><br><span class="line">      &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">  &lt;/project&gt;</span><br></pre></td></tr></table></figure></li><li><p>安装jdk1.8、maven3（略）</p></li><li>安装nodejs（略）</li><li><p>安装yarn<br>1.执行命令<code>npm -i -g yarn</code><br>2.查看当前的源，默认是：官网 ,<code>yarn config get registry</code><br>3.改成taobao的源,<code>yarn config set registry https://registry.npm.taobao.org</code></p></li><li><p>执行<code>mvn  install</code><br>不出意外，会在本地maven仓库中生成<code>xxx-admin-server-ui-1.0.0-SNAPSHOT.jar</code>;<br><img src="/springboot-webjars集成前端UI/xxx-admin-server-ui-xxx.jar.png" alt="xxx-admin-server-ui-xxx.jar">   </p></li><li>以上步骤，最好都在mac下操作</li></ul><h2 id="springboot-集成前端"><a href="#springboot-集成前端" class="headerlink" title="springboot 集成前端"></a>springboot 集成前端</h2><p><code>http://start.spring.io</code>创建一个springboot项目，名字叫xxx-admin-server</p><ul><li>pom.xml配置<br><img src="/springboot-webjars集成前端UI/pom.xml.png" alt="pom.xml"> </li><li>web config<br><img src="/springboot-webjars集成前端UI/webconfig.png" alt="webconfig"> </li><li>启动项目，访问<code>http://127.0.0.1:8080/</code>，最终效果<br><img src="/springboot-webjars集成前端UI/最终效果.png" alt="最终效果"> </li></ul>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> springboot </tag>
            
            <tag> 后台管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发工具之vscode安装配置</title>
      <link href="/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8Bvscode%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B9%8Bvscode%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前端的一些开发工具"><a href="#前端的一些开发工具" class="headerlink" title="前端的一些开发工具"></a>前端的一些开发工具</h2><p><code>vscode</code> <code>atom</code> <code>sublime text</code> <code>webstorm</code></p><h2 id="mac-vscode-安装"><a href="#mac-vscode-安装" class="headerlink" title="mac vscode 安装"></a>mac vscode 安装</h2><p>官网下载安装即可，略….<br><code>我安装后的效果</code><br><img src="/前端开发工具之vscode安装配置/vscode.png" alt="vscode">  </p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li><p><code>vscode-icon</code><br>项目工程文件加上漂亮图标，方便识别，必备良品！  </p></li><li><p><code>Debugger for Chrome</code><br>映射 chrome 的 debug功能，静态页面都可以用 vscode 来打断点调试</p></li><li><p><code>vscode-fileheader</code><br>添加头部注释：作者、创建时间、最新修改时间;<br>1、设置头注释，打开<code>.vscode/settings.json</code>，查找<code>fileheader</code><br>2、插入头注释快捷键ctrl+alt+i</p></li><li><p><code>beautify</code><br>格式化html，css，js</p></li><li><code>HTML Snippets</code><br>可以在不输入 &lt; 的情况下提示</li><li><code>Git History</code><br>显示git log和line history</li></ul><p>更多插件参考：<br><a href="https://segmentfault.com/a/1190000006697219" target="_blank" rel="noopener">vscode 插件推荐 - 献给所有前端工程师</a></p><p><a href="http://www.cnblogs.com/xwwin/p/6247765.html" target="_blank" rel="noopener">http://www.cnblogs.com/xwwin/p/6247765.html</a></p><h2 id="vscode-配置备份"><a href="#vscode-配置备份" class="headerlink" title="vscode 配置备份"></a>vscode 配置备份</h2><p>这么多配置，不备份怎么行</p><blockquote><p><code>方式一：备份到github gist</code>  </p><ul><li>github 上生成token，然后复制token  </li><li>上传备份<br>vscode中按shift+alt +u  在弹出窗里输入你的token，然后会生成syncSummary.txt文件在窗口中打开；  </li><li>下载备份<br>打开syncSummary.txt文件，找到<code>sync.gist</code>值；<br>vscode中按shift+alt +d，在弹出窗里输入这个值；   </li><li>参考文章：<br><a href="http://www.cnblogs.com/ashidamana/p/6761085.html" target="_blank" rel="noopener">vscode同步设置&amp;扩展插件</a></li></ul><p><code>方式二：备份github或者git oschina(分支形式)</code>  </p><ul><li>在github或者git oschina创建一个项目<br><a href="https://xxxx/smalldok/mybackup.git" target="_blank" rel="noopener">https://xxxx/smalldok/mybackup.git</a>  </li><li>命令行，进入vscode安装目录  </li><li>备份<br>git init<br>git add .<br>git commit -m “xxxxxxx”<br>git checkout -b mac-vscode1.14.2<br>git remote add origin <a href="https://xxxx/smalldok/mybackup.git" target="_blank" rel="noopener">https://xxxx/smalldok/mybackup.git</a><br>git push origin mac-vscode1.14.2</li><li>恢复<br>git pull –rebase origin mac-vscode1.14.2</li></ul></blockquote><p><strong><code>方式二</code>也是我自己备份电脑上各种配置的做法</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins+springboot</title>
      <link href="/jenkins-springboot/"/>
      <url>/jenkins-springboot/</url>
      
        <content type="html"><![CDATA[<p>1、环境<br>2、jenkins服务器与部署服务器SSH打通<br>3、jenkins配置<br>4、部署服务器配置</p><p>附：服务端小组协作流程图</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>服务器</th><th>安装</th><th>描述</th></tr></thead><tbody><tr><td>jenkins服务器</td><td>jenkins2.60.1</td><td>-</td></tr><tr><td>-</td><td>jdk1.8</td><td>-</td></tr><tr><td>-</td><td>git2.1.4</td><td>-</td></tr><tr><td>-</td><td>maven3</td><td>-</td></tr><tr><td>部署服务器</td><td>centos6.6</td><td>7有BUG</td></tr><tr><td>-</td><td>jdk1.8</td><td>-</td></tr><tr><td>-</td><td>openssh-server</td><td>-</td></tr><tr><td>github项目例子</td><td><a href="https://github.com/smalldok/springboot-jenkins" target="_blank" rel="noopener">https://github.com/smalldok/springboot-jenkins</a></td><td>-</td></tr></tbody></table><h1 id="jenkins服务器与部署服务器SSH打通"><a href="#jenkins服务器与部署服务器SSH打通" class="headerlink" title="jenkins服务器与部署服务器SSH打通"></a>jenkins服务器与部署服务器SSH打通</h1><p>主要是jenkins中可以远程执行部署服务器的SHELL脚本；  </p><p><code>部署服务器</code> 启动SSH服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa |grep ssh #检查是否装了SSH包</span><br><span class="line"><span class="meta">#</span><span class="bash">没有的话yum install openssh-server</span></span><br><span class="line">chkconfig --list sshd #检查SSHD是否在本运行级别下设置为开机启动</span><br><span class="line">chkconfig --level 2345 sshd on  #如果没设置启动就设置下.</span><br><span class="line">service sshd restart  #重新启动</span><br><span class="line">netstat -antp |grep sshd  #看是否启动了22端口.确认下.</span><br><span class="line">iptables -nL  #看看是否放行了22口.</span><br></pre></td></tr></table></figure></p><p><code>jenkins服务器</code> 测试远程执行SHELL<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">jenkins服务器上生产RSA公钥私钥对</span></span><br><span class="line"><span class="meta">#</span><span class="bash">jenkens_home目录中的.ssh目录中运行命令</span></span><br><span class="line">ssh-keygen -t rsa  #一直回车</span><br><span class="line">ssh-copy-id -i smalldok@172.17.0.2 #传输公钥给需要访问的服务器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">jenkins服务器上测试：</span></span><br><span class="line">ssh smalldok@172.17.0.2 "/home/smalldok/test.sh"</span><br></pre></td></tr></table></figure></p><p><code>test.sh</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo "&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span><br></pre></td></tr></table></figure></p><h1 id="jenkins-配置"><a href="#jenkins-配置" class="headerlink" title="jenkins 配置"></a>jenkins 配置</h1><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p><code>jenkins 系统管理-&gt;插件管理</code><br>安装maven-intestrating-plugin(新建maven构建项目用)；<br>安装Role-based Authorization Strategy(用户角色权限设置)；  </p><h3 id="jdk-git-maven设置"><a href="#jdk-git-maven设置" class="headerlink" title="jdk/git/maven设置"></a>jdk/git/maven设置</h3><p><code>jenkins 系统管理-&gt;Global Tool Configuration</code><br>分别设置jdk、git、maven</p><h3 id="项目构建配置"><a href="#项目构建配置" class="headerlink" title="项目构建配置"></a>项目构建配置</h3><p>见<a href="https://github.com/smalldok/springboot-jenkins.git" target="_blank" rel="noopener">https://github.com/smalldok/springboot-jenkins.git</a></p><h3 id="创建用户、分配权限、视图"><a href="#创建用户、分配权限、视图" class="headerlink" title="创建用户、分配权限、视图"></a>创建用户、分配权限、视图</h3><p>jenkins权限管理，实现不同用户组显示对应视图views中不同的jobs ；<br>场景：<br>隔离开发环境、测试环境、生产环境；<br>开发人员构建开发环境的项目；<br>测试人员构建测试环境的项目；<br>运维人员构建生产环境的项目；  </p><p><code>视图</code>  </p><table><thead><tr><th>All</th><th>dev-A项目</th><th>dev-B项目</th><th>test-B项目</th></tr></thead><tbody><tr><td>-</td><td>dev-MyDemo</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>dev-xxServer</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td><td>test-xxServer</td></tr></tbody></table><p>即：<br>开发人员登录jenkins只能看到dev-A项目、dev-B项目视图；<br>测试人员登录jenkins只能看到test-B项目视图；</p><p><code>admin All视图</code><br><img src="/jenkins-springboot/admin All视图.png" alt="adminAll视图"><br><code>dev-A项目视图</code><br>这个视图下，存放A项目的开发构建环境<br><img src="/jenkins-springboot/dev-A项目视图.png" alt="dev-A项目视图"><br><code>dev-B项目视图</code><br>这个视图下，存放B项目的开发构建环境<br><img src="/jenkins-springboot/dev-B项目视图.png" alt="dev-B项目视图"><br><code>test-B项目视图</code><br>这个视图下，存放B项目的测试构建环境<br><img src="/jenkins-springboot/test-B项目视图.png" alt="test-B项目视图">  </p><p><code>分别创建如上三个视图</code><br>把项目加入到相关的视图中；<br>开发的项目前缀，以dev-开头；<br>开发的项目前缀，以test-开头；  </p><p><code>创建用户（乔治、佩奇）</code><br><img src="/jenkins-springboot/创建用户.png" alt="创建用户"></p><p><code>jenkins 系统管理-&gt;Manage and Assign Roles-&gt;Manage Roles</code><br><img src="/jenkins-springboot/角色权限配置1.png" alt="角色权限配置1"><br><code>jenkins 系统管理-&gt;Manage and Assign Roles-&gt;Assign Roles</code><br><img src="/jenkins-springboot/角色权限配置2.png" alt="角色权限配置2"></p><p><code>佩奇登录jenkins的效果</code><br><img src="/jenkins-springboot/佩奇视图.png" alt="佩奇视图"><br><code>乔治登录jenkins的效果</code><br><img src="/jenkins-springboot/乔治视图.png" alt="乔治视图"></p><p>参考：<a href="http://blog.sina.com.cn/s/blog_8d8f99440101hpzb.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_8d8f99440101hpzb.html</a></p><h3 id="配置备份"><a href="#配置备份" class="headerlink" title="配置备份"></a>配置备份</h3><p>配置目录（jenkins_home）加入git版本库</p><h1 id="部署服务器配置"><a href="#部署服务器配置" class="headerlink" title="部署服务器配置"></a>部署服务器配置</h1><p>目标服务器上，提前建好几个目录<br>/home/smalldok/build<br>/home/smalldok/backcup<br>/home/smalldok/release</p><p>还需要一个deploy的shell<br>见-&gt; <a href="https://github.com/smalldok/springboot-jenkins.git" target="_blank" rel="noopener">https://github.com/smalldok/springboot-jenkins.git</a></p><h1 id="服务端小组协作流程图"><a href="#服务端小组协作流程图" class="headerlink" title="服务端小组协作流程图"></a>服务端小组协作流程图</h1><p><img src="/jenkins-springboot/服务端小组协作流程图.png" alt="服务端小组协作流程图"></p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/test/"/>
      <url>/test/</url>
      
        <content type="html"><![CDATA[<p>test….</p><p> <a href="/download/MPush开发手册.pdf">MPush开发手册</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IaaS-PaaS-SaaS区别</title>
      <link href="/IaaS-PaaS-SaaS%E5%8C%BA%E5%88%AB/"/>
      <url>/IaaS-PaaS-SaaS%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>Infrastructure（基础设施）-as-a- Service，<br>Platform（平台）-as-a-Service，<br>Software（软件）-as-a-Service。<br>基础设施在最下端，平台在 中间，软件在顶端;</p><p>如果你是一个网站站长，想要建立一个网站。不采用云服务，你所需要的投入大概是：买服务器，安装服务器软件，编写网站程序。现在你追随潮流，采用流行的云计算，如果你采用IaaS服务，那么意味着你就不用自己买服务器了，随便在哪家购买虚拟机，但是还是需要自己装服务器软件而如果你采用PaaS的服务，那么意味着你既不需要买服务器，也不需要自己装服务器软件，只需要自己开发网站程序如果你再进一步，购买某些在线论坛或者在线网店的服务,这意味着你也不用自己开发网站程序，只需要使用它们开发好的程序，而且他们会负责程序的升级、维护、增加服务器等，而你只需要专心运营即可，此即为SaaS。</p><p>IaaS：阿里云 亚马逊云 腾讯云<br>PaaS：新浪云 百度云</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Iaas </tag>
            
            <tag> PaaS </tag>
            
            <tag> SaaS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><img src="/hello-world/test.jpg" alt="test"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mpush源码阅读总结</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>通盘阅读其源码，可以了解<code>端到云</code>、<code>云到端</code>的消息<code>推送流程</code>和<code>实现细节</code>；</li><li>有客户端DEMO(安卓/IOS/WEB端) 、服务端DEMO、业务端DEMO</li><li>实现了<code>TCP服务</code>、<code>websocket服务</code>、<code>HTTP代理服务</code>(客户端通过http下发消息)</li><li>定义了统一的<code>生命周期组件</code>，统一组件的初始化、启动、关闭<br>例如：NettyTCPServer extends BaseService</li><li><code>SPI扩展</code>，支持指定名称的单个加载、多个加载时排序取第一个</li><li><code>流控</code>  <ul><li><code>GlobalFlowControl</code>   #单进程全局流控，对MPNS发送给网关的流控(单进程)  </li><li><code>RedisFlowControl</code>    #redis   流控(多进程)，用于限制广播消息到客户端的数量（这里代码实现不安全）</li><li><code>FastFlowControl</code>     #快速流控(单进程)，用于限制广播消息到客户端的数量（这里代码实现不安全）  </li><li><code>ExactFlowControl</code>    #分段流控，分段统计，把1s 分成 100份，10ms一份，限制10ms内允许的最大数量  </li></ul></li><li>配置集中管理</li><li><code>监控</code>，实现了JVM、各个线程池指标的监控</li><li><code>性能监控</code>，利用Profiler做方法耗时的埋点打印</li><li><code>时间线</code>，通过TimeLine，可以清晰知道msg流转到哪个组件，有点像trace，只不过它是单进程的</li><li><code>线程池</code>，定义了5种线程池，包括MQ/event-bus/push-client-timer/push-task-timer/ack-timer</li><li><code>事件总线</code>，使用Guava的EventBus，方便其他组件订阅建连、断连、异常事件</li></ul><h1 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h1><h2 id="网络组件"><a href="#网络组件" class="headerlink" title="网络组件"></a>网络组件</h2><p>不够抽象，与消息推送的实现逻辑混合在一起，使得结构不清晰；<br>关于网络组件抽象这一块，可以参考下SOFA-Bolt的实现；</p><blockquote><p>SOFABolt 是蚂蚁金融服务集团开发的一套基于 Netty 实现的网络通信框架。  </p><ul><li>为了让 Java 程序员能将更多的精力放在基于网络通信的业务逻辑实现上，而不是过多的纠结于网络底层 NIO 的实现以及处理难以调试的网络问题，Netty 应运而生。</li><li>为了让中间件开发者能将更多的精力放在产品功能特性实现上，而不是重复地一遍遍制造通信框架的轮子，SOFABolt 应运而生。  </li></ul><p>该产品已经运用在了蚂蚁中间件的微服务 (SOFARPC)、消息中心、分布式事务、分布式开关、以及配置中心等众多产品上<br><a href="https://github.com/alipay/sofa-bolt" target="_blank" rel="noopener">https://github.com/alipay/sofa-bolt</a></p></blockquote><h2 id="通信模型与超时控制"><a href="#通信模型与超时控制" class="headerlink" title="通信模型与超时控制"></a>通信模型与超时控制</h2><p>通信模型没有抽象出来(oneway/sync/future/callback)</p><p>超时控制用了netty的HashedWheelTimer和SchedulerExecutor调度线程池这2种实现；<br>目测之所以采用SchedulerExecutor调度线程池，是因为在客户端代码中只想依赖JDK实现；</p><p>可以在站内搜索文章《通信模型与超时控制》</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>集中在一个类里面，虽然集中管理比较方便，但始终感觉不太优雅；<br>不支持扩展通过配置中心动态修改配置；</p><h2 id="流控"><a href="#流控" class="headerlink" title="流控"></a>流控</h2><p>代码实现不太安全</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息类型和消息协议</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B6%88%E6%81%AF%E7%B1%BB%E5%9E%8B%E5%92%8C%E6%B6%88%E6%81%AF%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="消息类型"><a href="#消息类型" class="headerlink" title="消息类型"></a>消息类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Command &#123;</span><br><span class="line">    HEARTBEAT(<span class="number">1</span>),          <span class="comment">// 心跳</span></span><br><span class="line">    HANDSHAKE(<span class="number">2</span>),          <span class="comment">// 握手</span></span><br><span class="line">    LOGIN(<span class="number">3</span>),</span><br><span class="line">    LOGOUT(<span class="number">4</span>),</span><br><span class="line">    BIND(<span class="number">5</span>),               <span class="comment">// 绑定用户</span></span><br><span class="line">    UNBIND(<span class="number">6</span>),             <span class="comment">// 解绑用户</span></span><br><span class="line">    FAST_CONNECT(<span class="number">7</span>),       <span class="comment">// 快速重连</span></span><br><span class="line">    PAUSE(<span class="number">8</span>),</span><br><span class="line">    RESUME(<span class="number">9</span>),</span><br><span class="line">    ERROR(<span class="number">10</span>),             <span class="comment">// 错误消息</span></span><br><span class="line">    OK(<span class="number">11</span>),                <span class="comment">// 成功消息</span></span><br><span class="line">    HTTP_PROXY(<span class="number">12</span>),        <span class="comment">// HTTP代理</span></span><br><span class="line">    KICK(<span class="number">13</span>),              <span class="comment">// 踢人</span></span><br><span class="line">    GATEWAY_KICK(<span class="number">14</span>),</span><br><span class="line">    PUSH(<span class="number">15</span>),              <span class="comment">// 推送</span></span><br><span class="line">    GATEWAY_PUSH(<span class="number">16</span>),</span><br><span class="line">    NOTIFICATION(<span class="number">17</span>),</span><br><span class="line">    GATEWAY_NOTIFICATION(<span class="number">18</span>),</span><br><span class="line">    CHAT(<span class="number">19</span>),</span><br><span class="line">    GATEWAY_CHAT(<span class="number">20</span>),</span><br><span class="line">    GROUP(<span class="number">21</span>),</span><br><span class="line">    GATEWAY_GROUP(<span class="number">22</span>),</span><br><span class="line">    ACK(<span class="number">23</span>),</span><br><span class="line">    UNKNOWN(-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="消息协议"><a href="#消息协议" class="headerlink" title="消息协议"></a>消息协议</h1><ul><li>mpush使用的为自定义私有协议，定长Header + body, 其中header部分固定13个字节。</li><li>心跳固定为一个字节，值为 -33。</li></ul><table><thead><tr><th>名称</th><th>类型</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>int</td><td>4</td><td>表示body的长度</td></tr><tr><td>cmd</td><td>byte</td><td>1</td><td>表示消息协议类型</td></tr><tr><td>checkcode</td><td>short</td><td>2</td><td>是根据body生成的一个校验码</td></tr><tr><td>flags</td><td>byte</td><td>1</td><td>表示当前包启用的特性，比如是否启用加密，是否启用压缩</td></tr><tr><td>sessionId</td><td>int</td><td>4</td><td>消息会话标识用于消息响应</td></tr><tr><td>lrc</td><td>byte</td><td>1</td><td>纵向冗余校验，用于校验header</td></tr><tr><td>body</td><td>byte</td><td>不固定</td><td>消息内容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI定制化</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/SPI%E5%AE%9A%E5%88%B6%E5%8C%96/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/SPI%E5%AE%9A%E5%88%B6%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h1><p>建议直接百度 java spi, 官方介绍: <a href="http://docs.oracle.com/javase/tutorial/sound/SPI-intro.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/tutorial/sound/SPI-intro.html</a></p><h1 id="mpush-使用SPI的目的"><a href="#mpush-使用SPI的目的" class="headerlink" title="mpush 使用SPI的目的"></a>mpush 使用SPI的目的</h1><p>肯定是为了扩展性，在不想修改源码的情况下，去替换系统原有的实现，代价最小也最灵活。</p><h1 id="mpush目前支持的SPI列表"><a href="#mpush目前支持的SPI列表" class="headerlink" title="mpush目前支持的SPI列表"></a>mpush目前支持的SPI列表</h1><p>所有受支持的SPI都在mpuhs-api模块的com.mpush.api.spi包下面。  </p><ul><li><code>ServerEventListenerFactory</code> 监听Server 产生的相关事件</li><li><code>BindValidatorFactory</code> 绑定用户身份是校验用户身份是否合法</li><li><code>ClientClassifierFactory</code> 同一个用户多设备登录互踢策略，默认Android和ios会互踢</li><li><code>PushHandlerFactory</code> 接收客户端发送到服务端的上行推送消息</li><li><code>ExecutorFactory</code> 整个系统的线程池工厂，可以按自己的策略创建线程池</li><li><code>CacheManagerFactory</code> 系统使用的缓存实现，默认是redis，支持自定义</li><li><code>MQClientFactory</code> 系统使用的MQ实现，默认是redis的pub/sub，支持自定义</li><li><code>ServiceRegistryFactory</code> 服务注册组件，默认实现是zookeeper，支持自定义</li><li><code>ServiceDiscoveryFactory</code> 服务发现组件，默认实现是zookeeper，支持自定义</li><li><code>PushListenerFactory</code> 消息来源自定义，默认使用Gateway模块，支持自定义，比如使用MQ</li></ul><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><ul><li>新建一个maven工程，并加入mpush-api模块的依赖</li><li>实现要定制的接口和其对应的Factory</li><li>在resources目录下创建META-INF.services目录</li><li>创建名字为<code>com.mpush.api.spi.xxx.XXXFactory</code>的文件，即对应的接口名</li><li>文件的内容为实现类的全名(packageName+className)</li><li>通过mvn打成jar包，并把其放到mpush/lib目录</li><li>重启mpush server 就会优先加载用户提供的实现来覆盖原有的默认实现</li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块依赖关系</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%A8%A1%E5%9D%97%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/源码学习/MPush/架构分析/模块依赖关系/模块依赖关系.png" alt="模块依赖关系">  </p><ul><li>mpush-client：服务端SDK,主要提供发送Push的接口给其他业务使用，比如MPNS</li><li>mpush-boot：是服务端启动入口模块，主要控制server启动、停止流程</li><li>mpush-api：定义了mpush相关核心接口及协议，还包括对外暴露的SPI接口</li><li>mpush-netty：主要提供netty相关的一些基础类，像NettyServer,NettyClient</li><li>mpush-tools：mpush用到的一些工具类，包括线程池，加密，配置文件解析等等</li><li>mpush-zk：zookeeper的client, 包括path的定义，节点定义，数据监听等</li><li>mpush-cache：redis缓存模块，支持单机模式和3.x集群模式，包括用户路由，上下线消息等</li><li>mpush-common：定义了mpush-client模块和mpush-core模块都会用到的类，主要是消息、路由等</li><li>mpush-core：sever核心模块，包括接入服务，网关服务，路由中心，推送中心等等</li><li>mpush-monitor：服务监控模块主要监控JVM，线程池，JMX，服务状态统计，性能统计等</li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度进阶</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B7%B1%E5%BA%A6%E8%BF%9B%E9%98%B6/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B7%B1%E5%BA%A6%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>深度进阶<br>1、握手及快速重连<br>2、绑定用户<br>3、MPNS 消息推送流程<br>4、HTTP代理<br>5、端到云-发消息<br>6、广播推送与流控<br>7、广播推送条件过滤<br>8、消息漫游(未实现)  </p><h1 id="握手及快速重连"><a href="#握手及快速重连" class="headerlink" title="握手及快速重连"></a>握手及快速重连</h1><p><img src="/源码学习/MPush/架构分析/深度进阶/握手及快速重连.png" alt="握手及快速重连">  </p><ul><li>tcp连接建立后，第一个消息就是握手或快速重连消息。</li><li>Handshake的目的是为了生成会话密钥，同时会把生成好的密钥存储到redis，并把key返回给客户端，为快速重连使用</li><li>FastConnect是基于Handshake生成的sessionId来配合使用的，目的是为了减少RSA加密的使用次数，特别是网络较差的情况，毕竟RSA加密想对还是比较耗时的，客户端只需把sessionId传给服务端，其就能从redis中取出上次会话信息，恢复到上次握手成功之后的会话状态，这个过程不需要任何加密和密钥交换，相对会比较快速。</li></ul><h1 id="绑定用户"><a href="#绑定用户" class="headerlink" title="绑定用户"></a>绑定用户</h1><p><img src="/源码学习/MPush/架构分析/深度进阶/绑定用户.png" alt="绑定用户">  </p><ul><li>握手成功后表示安全通道已经建立，但同时还要给连接设置用户甚至标签，只有这样业务才能更好的去识别用户（没有用户的业务是另外一回事）。</li><li>设置用户非常简单，只需把其存储到session即可，但因为要支持集群的，就必须把用户的位置信息（或者叫路由信息）发布出去，让集群里的其他机器能够通过useId来查找用户的位置（在哪台机器），因为客户端的TCP连接在哪台机器，那么和这个客户端的所有数据传输都必须经过这台机器的这个连接！(很多同学会问为什么不把connection存储到redis)。</li><li>路由中心有两部分组成：本地路由和远程路由，本地路由数据结构为userId-&gt;connection的map，数据存储在本机内存；远程路由数据结构为userId-&gt;connServer机器ip，数据存储在redis;所以要给一个用户发信息必须先查远程路由，找到用户在哪台机器，然后把消息发给这台机器，让其去本地路由查找connection并通过查找到的TCP连接把消息发给用户。</li><li>MessageCenter之前使用的redis提供的pub/sub实现的，也可以自己搭建MQ来实现，最新版踢人已经不再使用pub/sub，而是直接使用udp网关实现。</li><li>踢人：之所以会有踢人的情况是根据业务需要来的，有些业务系统是不允许同一个用户在多个设备同时在线的，或者只允许不同类型的终端同时在线，比如QQ,手机和PC可以同时在线，但同一个帐号在两台PC登录时其中一个肯定会被踢下线，mpush的踢人要表达的也是同一个意思。</li><li>顺便提一下关于同时在线的策略，或者说端的类型的定义mpush已经支持SPI定制化。</li></ul><h1 id="MPNS-消息推送流程"><a href="#MPNS-消息推送流程" class="headerlink" title="MPNS 消息推送流程"></a>MPNS 消息推送流程</h1><p><img src="/源码学习/MPush/架构分析/深度进阶/MPNS 消息推送流程.png" alt="MPNS 消息推送流程"><br>1、PushSender是消息推送的入口，它的实现在mpush-client模块属于服务端SDK，主要包含有GatewayClient, RemoteRouterManager; RemoteRouterManager用于定位用户在哪台机器，有没有在线等，而GatewayClient用于把要发送的的业务消息发给用户TCP连接所在的机器。</p><p>2、GatewayServer负责接收GatewayClient发送过来的消息，然后到LocalRouterManager查找用户的Connection，然后把消息交由其下发。</p><p>3、ConnectionServer 负责维持所有连接到当前机器的客户端连接，所以消息最终还是尤其下发（图比较简单，但能表达核心流程）。</p><h1 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>前面有提到过http代理这个东西，但很多人不知道这个东西该怎么用，或者说有什么用？以及在什么场景下使用？     </p><h3 id="移动APP通信场景分析"><a href="#移动APP通信场景分析" class="headerlink" title="移动APP通信场景分析"></a>移动APP通信场景分析</h3><p>从使用的链接情况来看，一般可以分为两大类：TCP长链接，HTTP短链接；长链接用于消息推送或IM等场景，HTTP用于业务数据的查询或修改。虽然不是所有的APP都需要IM功能，但大多应用都需要消息推送功能。为了推送消息，APP必须维持一根长链接，但大部分时间除了心跳这根链接上是没多少消息在传输的，特别是非IM类的APP，因为这类应用并没大量的消息要不停的推送，维持长链接只是为了消息的及时到达，这势必造成了很大的资源浪费！</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>针对上述情况MPUSH提供了Http代理方案，目的一是充分利用push通道，而是提高数据传输效率节省电量，节省流量，提供比http更高的安全性。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>MPushClient 提供了一个叫sendHttp的方法，该方法用于把客户端原本要通过HTTP方式发送的请求，全部通过PUSH通道转发，实现整个链路的长链接化；通过这种方式应用大大减少Http短链接频繁的创建，不仅仅节省电量，经过测试证明请求时间比原来至少缩短一倍，而且MPush提供的还有数据压缩功能，对于比较大的数据还能大大节省流量(压缩率4-10倍)，更重要的是所有通过代理的数据都是加密后传输的，大大提高了安全性！</p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>1、修改mpush.conf增加mp.http.proxy-enabled=true启用http代理<br>2、修改mpush.conf增加dns-mapping配置，示例如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mp.http.dns-mapping=&#123;//域名映射外网地址转内部IP</span><br><span class="line">  &quot;api.jituancaiyun.com&quot;:[&quot;10.0.10.1:8080&quot;, &quot;10.0.10.2:8080&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：因为mpush server要做http代理转发，而客户端传过来的一般是域名比如<a href="http://api.jituancaiyun.com/get/userInfo.json为了不到公网上再绕一圈建议把mpush" target="_blank" rel="noopener">http://api.jituancaiyun.com/get/userInfo.json为了不到公网上再绕一圈建议把mpush</a> server 和业务服务(api.jituancaiyun.com)部署到同一个局域网，并增域名api.jituancaiyun.com到提供该服务的集群机器内网ip之间的一个映射，这样mpush server就可以通过局域网把请求转发到具体到业务服务，效率更高！</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1、设置ClientConfig.setEnableHttpProxy(true)来启用客户端代理。<br>2、通过Client.sendHttp(HttpRequest request)方法来发送请求。<br>AndroidSDK通过com.mpush.android.MPush#sendHttpProxy(HttpRequest request)来发送比较合适。</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p><img src="深度进阶/http代理-流程分析.png" alt="http代理-流程分析">    </p><ul><li>Client代表App业务比如查询用户信息的接口</li><li>MPushApiProxy是一个工具类用于负责处理当前请求是使用普通的HTTP还是使用MPush长链接通道，这个类在SDK中说不存在的，是我们公司内部的业务，实现起来也很简单，建议Android工程中增加这么一个角色，而不是到处直接去依赖Mpush的代码，方便以后解耦。</li><li>MPushClient这个SDK已经提供，用于把Http协议打包成mpush协议。</li><li>HttpProxyHandler包括后面的几个组件都是服务端业务组件。用于接收客户端传过来的请求并反解为Http协议，然后通过DNSMapping找到域名对应的局域网IP，再通过内置的HttpClient，把请求转发给业务WEB服务，并把业务服务的返回值(HttpResponse)打包成MPush协议发送到客户端。</li><li>DNSMapping负责通过域名解析成局域网IP，并具有负载均衡以及简单的健康检查功能(针对所配置的WEB服务)</li><li>HttpClient目前使用的是用Netty实现的全异步的一个HttpClient，负责通过http的方式请求业务服务。</li><li>Nginx是业务服务，也可以是Tomcat，特别需要建议的是链接超时时间配置长一些。</li></ul><h2 id="为什么要这样实现？"><a href="#为什么要这样实现？" class="headerlink" title="为什么要这样实现？"></a>为什么要这样实现？</h2><p>为什么要这样实现？因为这样做对原有的业务系统侵入特别低，如果MPushApiProxy这个组件设计的好，对于最两边的业务组件/服务(Client,Nginx)，对请求方式应该是无感知的，这个角色是无法区分到底请求是通过普通的Http方式发送出去的还是通过长链接代理的方式发送的！！！<br>另附上通过Http Proxy 实现双向通信交互图</p><p><img src="深度进阶/http代理-双向通信交互.png" alt="http代理-双向通信交互">    </p><h1 id="端到云-发消息"><a href="#端到云-发消息" class="headerlink" title="端到云-发消息"></a>端到云-发消息</h1><h2 id="接口产生背景"><a href="#接口产生背景" class="headerlink" title="接口产生背景"></a>接口产生背景</h2><p>作为一个纯粹推送系统，最初是没有发送上行消息接口的只有下行的消息，毕竟MPush不是IM系统。<br>后来在很多同学的要求下，就增加了此接口用于cleint上报消息。</p><h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><p>此接口和服务端下行Push保持相同的协议，可以互发消息，默认服务端没有对消息做任何业务上的处理，收到后直接丢弃。<br>同时MPush提供了SPI的方式来接管客户端发过来的消息，具体请参考<a href="http://mpush.mydoc.io/?v=24639&amp;t=134851" target="_blank" rel="noopener">第三章 系统架构 - SPI定制化</a>。<br>如果没有特殊需求客户端上行消息建议使用Http Proxy模式。</p><h1 id="广播推送与流控"><a href="#广播推送与流控" class="headerlink" title="广播推送与流控"></a>广播推送与流控</h1><h2 id="什么是广播推送？"><a href="#什么是广播推送？" class="headerlink" title="什么是广播推送？"></a>什么是广播推送？</h2><p>按推送用户范围来划分，MPush目前支持三种方式的推送：</p><ul><li>单用户推送，推送消息给指定的某个用户。</li><li>批量推送，业务自己圈定一批用户，推送同一条消息给圈定的用户。</li><li>全网推送，推送消息给所有的在线用户。 这里所说的广播推送指的就是第三种用户范围的推送。</li></ul><h2 id="为什么广播推送要控制流量？"><a href="#为什么广播推送要控制流量？" class="headerlink" title="为什么广播推送要控制流量？"></a>为什么广播推送要控制流量？</h2><p>因为要推送消息给全网在线用户，用户量可能非常大，为了防止瞬时流量过大，所有加了入了防过载保护：流量控制。</p><h2 id="流量控制的使用"><a href="#流量控制的使用" class="headerlink" title="流量控制的使用"></a>流量控制的使用</h2><ul><li>单任务流量控制</li><li>全局流量控制</li></ul><h1 id="广播推送条件过滤"><a href="#广播推送条件过滤" class="headerlink" title="广播推送条件过滤"></a>广播推送条件过滤</h1><h2 id="为什么要对用户进行过滤？"><a href="#为什么要对用户进行过滤？" class="headerlink" title="为什么要对用户进行过滤？"></a>为什么要对用户进行过滤？</h2><p>因为广播是针对所有在线用户，为了更精准的推送，必须对目标用户进行筛选，才能满足个性化的业务需求。</p><h2 id="目前支持的筛选纬度"><a href="#目前支持的筛选纬度" class="headerlink" title="目前支持的筛选纬度"></a>目前支持的筛选纬度</h2><ul><li>tag：业务自己打的标签</li><li>userId：用户登录ID</li><li>clientVersion：客户端版本</li><li>osName：客户端系统平台</li><li>osVersion：客户端系统版本</li></ul><h2 id="目前支持的表达式"><a href="#目前支持的表达式" class="headerlink" title="目前支持的表达式"></a>目前支持的表达式</h2><p>目前只支持jvm内置的<code>Nashorn</code>脚本引擎，语法为javascript标准语法。</p><h2 id="使用用例"><a href="#使用用例" class="headerlink" title="使用用例"></a>使用用例</h2><p>具体请参照com.mpush.api.push.PushContext.java</p><ul><li>灰度20%的在线用户：<code>userId % 100 &lt; 20</code></li><li>包含test标签的用户：<code>tags!=null &amp;&amp; tags.indexOf(&quot;test&quot;)!=-1</code></li><li>客户端版本号大于2.0的安卓用户：<code>clientVersion.indexOf(&quot;android&quot;)!=-1 &amp;&amp; clientVersion.replace(/[^\d]/g,&quot;&quot;) &gt; 20</code></li></ul><h1 id="消息漫游-未实现"><a href="#消息漫游-未实现" class="headerlink" title="消息漫游(未实现)"></a>消息漫游(未实现)</h1><p>如果不需要支持“消息漫游”，对于在线消息，如果用户接收到，是不需要存储到数据库的。但如果要支持“换一台机器也能看到历史的聊天消息”，就需要对所有消息进行存储。<br><img src="/源码学习/MPush/架构分析/深度进阶/消息漫游-01.jpg" alt="消息漫游-01">  </p><p>消息投递如上图，用户A发送消息给用户B，虽然B在线，仍然要增加一个步骤2.5，<code>在投递之前进行存储，以备B的其他端登陆时，可以拉取到历史消息。</code><br><img src="/源码学习/MPush/架构分析/深度进阶/消息漫游-02.jpg" alt="消息漫游-02">  </p><p>消息拉取如上图，原本不在线的B(phone端)重新登录了，怎么拉取历史消息呢？<br><code>只需要在客户端本地存储一个上一次拉取到的msg_id(time)</code>，到服务端重新拉取即可。</p><p>这里还有个问题，由于服务端存储所有消息成本是非常高的，所以一般“消息漫游”是有时间（或者消息数）限制，<code>不能拉取所有所有几年前的历史消息</code>，只能拉取最近的云端消息。</p><p>参考 架构师之路：<br><a href="https://mp.weixin.qq.com/s/gHnq-VqRSBX-UiGd306NDw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/gHnq-VqRSBX-UiGd306NDw</a>  《微信多点登录，消息漫游，假如让你来实现？》</p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统架构说明</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>系统架构说明<br>1、逻辑架构<br>2、服务调用关系<br>3、Mpush server启动模块<br>4、消息传递流程(接入服务/Websocket服务)<br>5、云到端消息推送流程  </p><h1 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h1><p><img src="/源码学习/MPush/架构分析/系统架构说明/逻辑架构.png" alt="逻辑架构">  </p><p>1、最左侧三大组件分别是日志系统、监控系统、控制台治理服务</p><ul><li>Log System 主要负责业务日志大输出，主要有链接相关日志、推送链路日志、心跳日志、监控日志等</li><li>Monitor 主要用作系统状态监控，可用于系统调优，包括jvm内存，线程，线程池，系统堆栈，垃圾回收情况，内存泄漏情况等。</li><li>AdminServer主要用于在控制台对单台机器进行控制与探查，比如参看连接数量，在线用户数，取消本级ZK注册，关闭服务等</li></ul><p>2、右侧三个分别是ZK服务，配置中心和安全工具箱</p><ul><li>ZK Client 主要负责注册长链接ip:port,网关ip:port以及监听各个节点变化，同时增加了缓存</li><li>ConfigCenter 是MPUSH Server 配置化的关键，贯穿到各个模块，非常重要</li><li>Sercutity Box 主要实现了RSA加密，DES加密，会话密钥生成及Session复用(用于快速重连)</li></ul><p>3、Core模块分别是长链接服务，网关服务，Packet编解码及分发模块，Message序列化及处理模块</p><ul><li>ConnectServer用于维持和客户端之间的TCP通道，主要负责和客户端交互</li><li>GatewayServer用于处理Mpush Server之间的消息交互比如踢人，发送PUSH</li><li>Packet主要是协议部分的编解码和包的完整性校验，最大长度校验等</li><li>PacketReceiver主要负责消息的分发，分发是根据Command来的</li><li>Connection/ConnectionManager主要负责链接管理，定时检查链接空闲情况，是否读写超时，如果链接断开发出相应的事件给路由中心去处理</li><li>Message部分是整个的业务核心处理了处理消息的序列化，还有压缩、加密等，MessageHandler会根据不同消息独立处理自己所属的业务，主要有：心跳响应、握手及密钥交换、快速重连、绑定/解绑用户、http代理、消息推送等</li></ul><p>4、路由中心主要包括：本地路由，远程路由，用户在线管理三大块</p><ul><li>LocalRouterManager负责维护用户＋设备与链接(connection)之间的关系</li><li>RemoteRouterManager负责维护用户＋设备与链接所在机器IP之间的关系</li><li>UserManager主要处理用户上下线事件的广播，以及单台机器的在线用户及数量的维护和查询<br>5、MPUSH的缓存部分，目前只支持Redis,支持双写，主备，hash 等特性</li></ul><p>见其官网说明：<a href="http://mpush.mydoc.io/?t=134339" target="_blank" rel="noopener">http://mpush.mydoc.io/?t=134339</a></p><h1 id="服务依赖关系"><a href="#服务依赖关系" class="headerlink" title="服务依赖关系"></a>服务依赖关系</h1><p><img src="/源码学习/MPush/架构分析/系统架构说明/服务依赖关系.png" alt="服务依赖关系"></p><ul><li>业务系统是要发送业务消息的服务，所有要推送的消息直接转给MPNS</li><li>MPNS是我们的业务推送系统，负责消息推送，长链接的检查，离线消息存储，用户打标等</li><li>APNS、JPUSH、MPUSH等分别是我们的客户端已经接入的推送系统</li><li>MPNS主要是为了隔离业务系统和各种推送系统，用户使用哪个长链接服务，业务系统不需要感知，统一有MPNS去选择、去切换</li><li>Alloc负责调度维护MPushServer集群，提供查询可用机器列表的接口，详细参见[Alloc实现]</li></ul><h1 id="Mpush-server启动模块"><a href="#Mpush-server启动模块" class="headerlink" title="Mpush server启动模块"></a>Mpush server启动模块</h1><p><img src="/源码学习/MPush/架构分析/系统架构说明/Mpush server启动模块.png" alt="Mpush server启动模块"></p><h1 id="消息传递流程-接入服务-Websocket服务"><a href="#消息传递流程-接入服务-Websocket服务" class="headerlink" title="消息传递流程(接入服务/Websocket服务)"></a>消息传递流程(接入服务/Websocket服务)</h1><h2 id="接入服务"><a href="#接入服务" class="headerlink" title="接入服务"></a>接入服务</h2><p><img src="/源码学习/MPush/架构分析/系统架构说明/接入服务.png" alt="接入服务"></p><h2 id="Websocket服务"><a href="#Websocket服务" class="headerlink" title="Websocket服务"></a>Websocket服务</h2><p><img src="/源码学习/MPush/架构分析/系统架构说明/websocket服务.png" alt="Websocket服务"></p><h1 id="云到端消息推送流程"><a href="#云到端消息推送流程" class="headerlink" title="云到端消息推送流程"></a>云到端消息推送流程</h1><p><img src="/源码学习/MPush/架构分析/系统架构说明/云到端消息推送流程.png" alt="云到端消息推送流程"></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度进阶-加解密</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B7%B1%E5%BA%A6%E8%BF%9B%E9%98%B6-%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/%E6%B7%B1%E5%BA%A6%E8%BF%9B%E9%98%B6-%E5%8A%A0%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>深度进阶-加解密<br>1、数据交换过程<br>2、RSA 加密解密<br>3、AES 加密解密<br>4、客户端-服务端-MPNS加密交互<br>5、客户端-服务端-握手交互</p><h1 id="数据交换过程"><a href="#数据交换过程" class="headerlink" title="数据交换过程"></a>数据交换过程</h1><h2 id="Mpush方案"><a href="#Mpush方案" class="headerlink" title="Mpush方案"></a>Mpush方案</h2><p>1、算法上同时使用了非对称加密算法(RSA)和对称加密算法(AES)。<br>2、在客户端预埋好由服务端生成好的公钥。<br>3、客户端生成随机数R1，并通过RSA公钥加密后发送给服务端。<br>4、服务端用RSA私钥解密客户端发送的数据取得R1,同时生成随机数R2,并以R1为Key使用AES加密R2然后把加密后的数据发送到客户端。<br>5、客户端以R1为Key使用AES解密服务发送的数据取得R2<br>6、此时客户端和服务的同时都拥有随机数R1、R2，然后使用相同的混淆算法生成会话密钥(sessionKey), 之后传输的数据都以此值作为AES加密的密钥。<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/数据交换-mpush.png" alt="数据交换-mpush"><br>参考：<a href="http://mpush.mydoc.io/?t=134350" target="_blank" rel="noopener">http://mpush.mydoc.io/?t=134350</a>  密钥交换章节</p><h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><p>针对日志的加密方案，我们充分考虑了对称加密和非对称加密各自的优缺点：对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高；非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。虽然非对称加密很安全，但是和对称加密比起来，它非常的慢，所以还是要用对称加密来传送报文，但对称加密所使用的密钥可以通过非对称加密的方式发送出去。流程如下：  </p><ul><li>APP 端首先生成了一个随机数作为对称密钥。  </li><li>APP 端向服务端请求公钥。  </li><li>服务端将带版本号的公钥发送给 APP 端。  </li><li>APP 端使用该版本的公钥将自己的对称密钥加密。  </li><li>APP 端将加密后的对称密钥（带上公钥版本号）发送给服务端。  </li><li>服务端使用对应版本号的私钥解密得到 APP 端的对称密钥。  </li><li>APP 端与服务端可以使用对称密钥来对沟通的内容进行加密与解密了。  </li></ul><p>参考：<a href="https://mp.weixin.qq.com/s/iUwqQxx87qQeRecjGxwTtg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/iUwqQxx87qQeRecjGxwTtg</a>  《苏宁用户行为采集体系的演变》</p><h1 id="RSA-加密解密"><a href="#RSA-加密解密" class="headerlink" title="RSA 加密解密"></a>RSA 加密解密</h1><p>mpush工程 -&gt; mpush-tools模块<br>RSAUtilsTest.java<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/RSA加密解密-01.png" alt="RSA加密解密-01"></p><p>mpush工程 -&gt; mpush-test模块<br>RsaTest.java<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/RSA加密解密-02.png" alt="RSA加密解密-02"></p><h1 id="AES-加密解密"><a href="#AES-加密解密" class="headerlink" title="AES 加密解密"></a>AES 加密解密</h1><p>mpush工程 -&gt; mpush-tools模块<br>AESUtilsTest.java<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/AES加密解密-01.png" alt="AES加密解密-01"></p><h1 id="客户端-服务端-MPNS加密交互"><a href="#客户端-服务端-MPNS加密交互" class="headerlink" title="客户端-服务端-MPNS加密交互"></a>客户端-服务端-MPNS加密交互</h1><p>1、客户端向服务端下发消息，会加密；<br>（参考工程mpush-client-java的MPushClient类）<br>2、服务端向客户端返回消息，不会加密；<br>（参考mpush工程，mpush-client模块的ConnClientChannelHandler）<br>（参考mpush工程，mpush-core模块的ConnectionServer中各个<em>*</em>handler#handle方法）<br>3、MPNS向服务端下发消息，会加密；<br>4、服务端向MPNS返回消息，不会加密；<br>5、服务端向客户端转发MPNS的消息，会加密；  </p><p><code>总结：请求消息加密，响应消息不加密</code><br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-MPNS加密交互.png" alt="客户端-服务端-MPNS加密交互"></p><h1 id="客户端-服务端-握手交互"><a href="#客户端-服务端-握手交互" class="headerlink" title="客户端-服务端-握手交互"></a>客户端-服务端-握手交互</h1><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互01.png" alt="客户端-服务端-握手交互01">  </p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互02.png" alt="客户端-服务端-握手交互02"><br>服务端生成好RSA公钥私钥，并将公钥串给客户端的开发人员<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互03.png" alt="客户端-服务端-握手交互03"><br>1、客户端生成随机数R1，并通过RSA公钥加密后发送给服务端。<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互04.png" alt="客户端-服务端-握手交互04"><br>消息发送前，会经过编码、然后判断SessionContext中是否设置加解密类，如果设置了加解密类，则对消息体加密；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互05.png" alt="客户端-服务端-握手交互05"><br>2和3、服务端用RSA私钥解密客户端发送的数据取得R1,同时生成随机数R2,并以R1为Key使用AES加密R2然后把加密后的数据发送到客户端。<br>2 取得R1<br>服务端ConnectionServer与客户端建立连接时(channelActive)，会设置SessionContext上下文中的加解密类为RSA；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互06.png" alt="客户端-服务端-握手交互06"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互07.png" alt="客户端-服务端-握手交互07"><br>服务端ConnectionServer接收到客户端的握手消息，找到HandshakeHandler处理类，然后调用其父类中BaseMessageHandler#handle()方法<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互08.png" alt="客户端-服务端-握手交互08"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互09.png" alt="客户端-服务端-握手交互09"><br>上面t.decodeBody()方法，是调用其父类BaseMessage#decodeBody方法；<br>然后decodeBody方法会调用到decodeBinaryBody0方法，进行解码操作；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互10.png" alt="客户端-服务端-握手交互10"><br>解密、解压之后，开始解码得到客户端传过来的R1<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互11.png" alt="客户端-服务端-握手交互11"><br>3 生成随机数R2,并以R1为Key使用AES加密R2然后把加密后的数据发送到客户端。<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互12.png" alt="客户端-服务端-握手交互12"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互13.png" alt="客户端-服务端-握手交互13"><br>4、客户端以R1为Key使用AES解密服务端发送的数据，取得R2<br>5、此时客户端和服务的同时都拥有随机数R1、R2，然后使用相同的混淆算法生成会话密钥(sessionKey), 之后传输的数据都以此值作为AES加密的密钥。<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互14.png" alt="客户端-服务端-握手交互14"><br>6、绑定用户请求的消息体(BindUserMessage)用AES加密，密钥为客户端生成的sessionKey<br>如上图所示，在调用binUser(clientConfig)前，已经设置上下文中加解密类为AES，且密钥为sessionKey;<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互15.png" alt="客户端-服务端-握手交互15"><br>先对消息进行编码，然后压缩、加密消息体<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互16.png" alt="客户端-服务端-握手交互16"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互17.png" alt="客户端-服务端-握手交互17"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互18.png" alt="客户端-服务端-握手交互18"></p><p>7、服务端接收到消息，用服务端生成的sessionKey解密消息体<br>在服务端处理握手响应时(HandshakeHandler#handle)，已将sessionKey作为密钥的AES实例设置到conn中的sessionContext中；</p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互19.png" alt="客户端-服务端-握手交互19"></p><p>故，服务端处理后续的绑定用户请求时，session中的加解密器key是sessionKey，所以在最后decode解码时会拿到sessionKey作为密钥的AES实例，然后进行解密；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互20.png" alt="客户端-服务端-握手交互20"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互21.png" alt="客户端-服务端-握手交互21"></p><p>8、绑定用户请求的响应消息体(OkMessage)用AES加密，使用SessionContext中的sessionKey作为密钥的AES实例加密;<br>此步骤有错误，返回给客户端的消息体(OkMessage)，并没有加密；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互22.png" alt="客户端-服务端-握手交互22"></p><p>貌似OKMessage消息没有经过加密，直接是编码然后返回给客户端了；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互23.png" alt="客户端-服务端-握手交互23"></p><p>ConnectServer接收客户端PUSH时，返回给客户端的AckMessage消息也是没有经过加密；<br>没有加密的消息，还有ErrorMessage、FastConnectOkMessage、HttpResponseMessage；  </p><p>GatewayServer接收MPNS的PUSH时，然后转给客户端的PushMessage消息会加密；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互24.png" alt="客户端-服务端-握手交互24"></p><p>GatewayServer返回给MPNS的ErrorMessage、OKMessage消息没有经过加密；<br><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互25.png" alt="客户端-服务端-握手交互25"></p><p><img src="/源码学习/MPush/架构分析/深度进阶-加解密/客户端-服务端-握手交互26.png" alt="客户端-服务端-握手交互26"></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 架构分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-启动服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/1-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/1-%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="1-启动服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><a href="../0-Alloc说明">0-Alloc说明</a></li><li><strong><a href="../1-启动服务">1-启动服务</a></strong></li><li><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></li><li><a href="../3-处理index.html请求">3-处理index.html请求</a></li><li><a href="../4-处理PUSH请求">4-处理PUSH请求</a></li><li><a href="../打包部署说明">打包部署说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPNS发送消息流程</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/MPNS%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/MPNS%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="MPNS发送消息流程.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>channelPipeline处理</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/channelPipeline%E5%A4%84%E7%90%86/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/channelPipeline%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="channelPipeline处理.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-Alloc说明</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/0-Alloc%E8%AF%B4%E6%98%8E/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/0-Alloc%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="0-Alloc说明.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><strong><a href="../0-Alloc说明">0-Alloc说明</a></strong></li><li><a href="../1-启动服务">1-启动服务</a></li><li><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></li><li><a href="../3-处理index.html请求">3-处理index.html请求</a></li><li><a href="../4-处理PUSH请求">4-处理PUSH请求</a></li><li><a href="../打包部署说明">打包部署说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流量整形</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%B5%81%E9%87%8F%E6%95%B4%E5%BD%A2/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%B5%81%E9%87%8F%E6%95%B4%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="流量整形.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息发送-常规</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-%E5%B8%B8%E8%A7%84/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81-%E5%B8%B8%E8%A7%84/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="消息发送-常规.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务发现</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="服务发现.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编码解码</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="编码解码.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>启动-初始化</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="启动-初始化.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连接初始化</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E8%BF%9E%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/MPNS/%E8%BF%9E%E6%8E%A5%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="连接初始化.pdf" width="100%" height="550" type="application/pdf"></div> ]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> MPNS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-处理拉取服务列表请求</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/2-%E5%A4%84%E7%90%86%E6%8B%89%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E8%AF%B7%E6%B1%82/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/2-%E5%A4%84%E7%90%86%E6%8B%89%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="2-处理拉取服务列表请求.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><a href="../0-Alloc说明">0-Alloc说明</a></li><li><a href="../1-启动服务">1-启动服务</a></li><li><strong><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></strong></li><li><a href="../3-处理index.html请求">3-处理index.html请求</a></li><li><a href="../4-处理PUSH请求">4-处理PUSH请求</a></li><li><a href="../打包部署说明">打包部署说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-处理PUSH请求</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/4-%E5%A4%84%E7%90%86PUSH%E8%AF%B7%E6%B1%82/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/4-%E5%A4%84%E7%90%86PUSH%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="4-处理PUSH请求.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><a href="../0-Alloc说明">0-Alloc说明</a></li><li><a href="../1-启动服务">1-启动服务</a></li><li><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></li><li><a href="../3-处理index.html请求">3-处理index.html请求</a></li><li><strong><a href="../4-处理PUSH请求">4-处理PUSH请求</a></strong></li><li><a href="../打包部署说明">打包部署说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-处理index.html请求</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/3-%E5%A4%84%E7%90%86index.html%E8%AF%B7%E6%B1%82/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/3-%E5%A4%84%E7%90%86index.html%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-处理index.html请求.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><a href="../0-Alloc说明">0-Alloc说明</a></li><li><a href="../1-启动服务">1-启动服务</a></li><li><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></li><li><strong><a href="../3-处理index.html请求">3-处理index.html请求</a></strong></li><li><a href="../4-处理PUSH请求">4-处理PUSH请求</a></li><li><a href="../打包部署说明">打包部署说明</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC-配置中心</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/CC-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/CC-%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>Typesafe的Config库，纯Java写成、零外部依赖、代码精简、功能灵活、API友好。<br>支持Java properties、JSON、JSON超集格式HOCON以及环境变量。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Config config;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Configure</span><span class="params">(String confFileName)</span> </span>&#123;</span><br><span class="line">        config = ConfigFactory.load(confFileName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        config = ConfigFactory.load();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getString(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ConfigFactory.load()会加载配置文件，默认加载classpath下的application.conf,application.json和application.properties文件。<br>当然也可以调用ConfigFactory.load(confFileName)加载指定的配置文件。</p><p>配置内容即可以是层级关系，也可以用”.”号分隔写成一行:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mp.log-level=$&#123;log.level&#125;</span><br><span class="line">mp.net.gateway-server-net=tcp <span class="comment">// 网关服务使用的网络 udp/tcp</span></span><br><span class="line">mp.net.alloc-server-port=<span class="number">9999</span></span><br><span class="line">mp.net.alloc-server-protocol=http</span><br><span class="line">mp.zk.server-address=<span class="string">"127.0.0.1:2181"</span></span><br><span class="line">mp.redis &#123;<span class="comment">// redis 集群配置</span></span><br><span class="line">    password:<span class="string">""</span></span><br><span class="line">    nodes:[<span class="string">"127.0.0.1:6379"</span>] <span class="comment">//格式是ip:port</span></span><br><span class="line">    cluster-model:single <span class="comment">//single, cluster</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">host&#123;</span><br><span class="line">  ip = <span class="number">127.0</span>.0.1</span><br><span class="line">  port = <span class="number">2282</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">host.ip = <span class="number">127.0</span>.0.1</span><br><span class="line">host.port = <span class="number">2282</span></span><br></pre></td></tr></table></figure></p><p>即json格式和properties格式。（貌似<em>.json只能是json格式，</em>.properties只能是properties格式，而*.conf可以是两者混合,而且配置文件只能是以上三种后缀名）</p><p>代码中如何使用：<code>String zk_address= CC.mp.zk.server-address;</code></p><p>CC.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.tools.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.net.DnsMapping;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.config.data.RedisNode;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * mpush 配置中心</span></span><br><span class="line"><span class="comment"> * Created by yxx on 2016/5/20.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CC</span> </span>&#123;</span><br><span class="line">    Config cfg = load();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Config <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Config config = ConfigFactory.load();<span class="comment">//扫描加载所有可用的配置文件</span></span><br><span class="line">        <span class="comment">// String custom_conf = System.getProperty("mp.conf");//加载自定义配置, 值来自jvm启动参数指定-Dmp.conf</span></span><br><span class="line">        String custom_conf = <span class="string">"mp.conf"</span>;</span><br><span class="line">        <span class="keyword">if</span> (config.hasPath(custom_conf)) &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(config.getString(custom_conf));</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                Config custom = ConfigFactory.parseFile(file);</span><br><span class="line">                config = custom.withFallback(config);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">mp</span> </span>&#123;</span><br><span class="line">        Config cfg = CC.cfg.getObject(<span class="string">"mp"</span>).toConfig();</span><br><span class="line">        String log_dir = cfg.getString(<span class="string">"log-dir"</span>);</span><br><span class="line">        String log_level = cfg.getString(<span class="string">"log-level"</span>);</span><br><span class="line">        String log_conf_path = cfg.getString(<span class="string">"log-conf-path"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">core</span> </span>&#123;</span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"core"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> session_expired_time = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"session-expired-time"</span>).getSeconds();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> max_heartbeat = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"max-heartbeat"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> max_packet_size = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"max-packet-size"</span>).toBytes();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> min_heartbeat = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"min-heartbeat"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> compress_threshold = cfg.getBytes(<span class="string">"compress-threshold"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> max_hb_timeout_times = cfg.getInt(<span class="string">"max-hb-timeout-times"</span>);</span><br><span class="line"></span><br><span class="line">            String epoll_provider = cfg.getString(<span class="string">"epoll-provider"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">useNettyEpoll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">"netty"</span>.equals(CC.mp.core.epoll_provider)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                String name = CC.cfg.getString(<span class="string">"os.name"</span>).toLowerCase(Locale.UK).trim();</span><br><span class="line">                <span class="keyword">return</span> name.startsWith(<span class="string">"linux"</span>);<span class="comment">//只在linux下使用netty提供的epoll库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">net</span> </span>&#123;</span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"net"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            String local_ip = cfg.getString(<span class="string">"local-ip"</span>);</span><br><span class="line">            String public_ip = cfg.getString(<span class="string">"public-ip"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> connect_server_port = cfg.getInt(<span class="string">"connect-server-port"</span>);</span><br><span class="line">            String connect_server_bind_ip = cfg.getString(<span class="string">"connect-server-bind-ip"</span>);</span><br><span class="line">            String connect_server_register_ip = cfg.getString(<span class="string">"connect-server-register-ip"</span>);</span><br><span class="line">            Map&lt;String, Object&gt; connect_server_register_attr = cfg.getObject(<span class="string">"connect-server-register-attr"</span>).unwrapped();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> admin_server_port = cfg.getInt(<span class="string">"admin-server-port"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> gateway_server_port = cfg.getInt(<span class="string">"gateway-server-port"</span>);</span><br><span class="line">            String gateway_server_bind_ip = cfg.getString(<span class="string">"gateway-server-bind-ip"</span>);</span><br><span class="line">            String gateway_server_register_ip = cfg.getString(<span class="string">"gateway-server-register-ip"</span>);</span><br><span class="line">            String gateway_server_net = cfg.getString(<span class="string">"gateway-server-net"</span>);</span><br><span class="line">            String gateway_server_multicast = cfg.getString(<span class="string">"gateway-server-multicast"</span>);</span><br><span class="line">            String gateway_client_multicast = cfg.getString(<span class="string">"gateway-client-multicast"</span>);</span><br><span class="line">            <span class="keyword">int</span> gateway_client_port = cfg.getInt(<span class="string">"gateway-client-port"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> ws_server_port = cfg.getInt(<span class="string">"ws-server-port"</span>);</span><br><span class="line">            String ws_path = cfg.getString(<span class="string">"ws-path"</span>);</span><br><span class="line">            <span class="keyword">int</span> gateway_client_num = cfg.getInt(<span class="string">"gateway-client-num"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tcpGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"tcp"</span>.equals(gateway_server_net);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">udpGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"udp"</span>.equals(gateway_server_net);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">wsEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ws_server_port &gt; <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">udtGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"udt"</span>.equals(gateway_server_net);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sctpGateway</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"sctp"</span>.equals(gateway_server_net);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">public_ip_mapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Map&lt;String, Object&gt; mappings = net.cfg.getObject(<span class="string">"public-host-mapping"</span>).unwrapped();</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">static</span> String <span class="title">getString</span><span class="params">(String localIp)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> (String) mappings.get(localIp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">snd_buf</span> </span>&#123;</span><br><span class="line">                Config cfg = net.cfg.getObject(<span class="string">"snd_buf"</span>).toConfig();</span><br><span class="line">                <span class="keyword">int</span> connect_server = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"connect-server"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_server = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-server"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_client = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-client"</span>).toBytes();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">rcv_buf</span> </span>&#123;</span><br><span class="line">                Config cfg = net.cfg.getObject(<span class="string">"rcv_buf"</span>).toConfig();</span><br><span class="line">                <span class="keyword">int</span> connect_server = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"connect-server"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_server = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-server"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_client = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-client"</span>).toBytes();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">write_buffer_water_mark</span> </span>&#123;</span><br><span class="line">                Config cfg = net.cfg.getObject(<span class="string">"write-buffer-water-mark"</span>).toConfig();</span><br><span class="line">                <span class="keyword">int</span> connect_server_low = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"connect-server-low"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> connect_server_high = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"connect-server-high"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_server_low = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-server-low"</span>).toBytes();</span><br><span class="line">                <span class="keyword">int</span> gateway_server_high = (<span class="keyword">int</span>) cfg.getMemorySize(<span class="string">"gateway-server-high"</span>).toBytes();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">traffic_shaping</span> </span>&#123;</span><br><span class="line">                Config cfg = net.cfg.getObject(<span class="string">"traffic-shaping"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">gateway_client</span> </span>&#123;</span><br><span class="line">                    Config cfg = traffic_shaping.cfg.getObject(<span class="string">"gateway-client"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">boolean</span> enabled = cfg.getBoolean(<span class="string">"enabled"</span>);</span><br><span class="line">                    <span class="keyword">long</span> check_interval = cfg.getDuration(<span class="string">"check-interval"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                    <span class="keyword">long</span> write_global_limit = cfg.getBytes(<span class="string">"write-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_global_limit = cfg.getBytes(<span class="string">"read-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> write_channel_limit = cfg.getBytes(<span class="string">"write-channel-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_channel_limit = cfg.getBytes(<span class="string">"read-channel-limit"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">gateway_server</span> </span>&#123;</span><br><span class="line">                    Config cfg = traffic_shaping.cfg.getObject(<span class="string">"gateway-server"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">boolean</span> enabled = cfg.getBoolean(<span class="string">"enabled"</span>);</span><br><span class="line">                    <span class="keyword">long</span> check_interval = cfg.getDuration(<span class="string">"check-interval"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                    <span class="keyword">long</span> write_global_limit = cfg.getBytes(<span class="string">"write-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_global_limit = cfg.getBytes(<span class="string">"read-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> write_channel_limit = cfg.getBytes(<span class="string">"write-channel-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_channel_limit = cfg.getBytes(<span class="string">"read-channel-limit"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">connect_server</span> </span>&#123;</span><br><span class="line">                    Config cfg = traffic_shaping.cfg.getObject(<span class="string">"connect-server"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">boolean</span> enabled = cfg.getBoolean(<span class="string">"enabled"</span>);</span><br><span class="line">                    <span class="keyword">long</span> check_interval = cfg.getDuration(<span class="string">"check-interval"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                    <span class="keyword">long</span> write_global_limit = cfg.getBytes(<span class="string">"write-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_global_limit = cfg.getBytes(<span class="string">"read-global-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> write_channel_limit = cfg.getBytes(<span class="string">"write-channel-limit"</span>);</span><br><span class="line">                    <span class="keyword">long</span> read_channel_limit = cfg.getBytes(<span class="string">"read-channel-limit"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">security</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"security"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> aes_key_length = cfg.getInt(<span class="string">"aes-key-length"</span>);</span><br><span class="line"></span><br><span class="line">            String public_key = cfg.getString(<span class="string">"public-key"</span>);</span><br><span class="line"></span><br><span class="line">            String private_key = cfg.getString(<span class="string">"private-key"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"thread"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">pool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Config cfg = thread.cfg.getObject(<span class="string">"pool"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> conn_work = cfg.getInt(<span class="string">"conn-work"</span>);</span><br><span class="line">                <span class="keyword">int</span> http_work = cfg.getInt(<span class="string">"http-work"</span>);</span><br><span class="line">                <span class="keyword">int</span> push_task = cfg.getInt(<span class="string">"push-task"</span>);</span><br><span class="line">                <span class="keyword">int</span> push_client = cfg.getInt(<span class="string">"push-client"</span>);</span><br><span class="line">                <span class="keyword">int</span> ack_timer = cfg.getInt(<span class="string">"ack-timer"</span>);</span><br><span class="line">                <span class="keyword">int</span> gateway_server_work = cfg.getInt(<span class="string">"gateway-server-work"</span>);</span><br><span class="line">                <span class="keyword">int</span> gateway_client_work = cfg.getInt(<span class="string">"gateway-client-work"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">event_bus</span> </span>&#123;</span><br><span class="line">                    Config cfg = pool.cfg.getObject(<span class="string">"event-bus"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">int</span> min = cfg.getInt(<span class="string">"min"</span>);</span><br><span class="line">                    <span class="keyword">int</span> max = cfg.getInt(<span class="string">"max"</span>);</span><br><span class="line">                    <span class="keyword">int</span> queue_size = cfg.getInt(<span class="string">"queue-size"</span>);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">mq</span> </span>&#123;</span><br><span class="line">                    Config cfg = pool.cfg.getObject(<span class="string">"mq"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">int</span> min = cfg.getInt(<span class="string">"min"</span>);</span><br><span class="line">                    <span class="keyword">int</span> max = cfg.getInt(<span class="string">"max"</span>);</span><br><span class="line">                    <span class="keyword">int</span> queue_size = cfg.getInt(<span class="string">"queue-size"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">zk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"zk"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> sessionTimeoutMs = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"sessionTimeoutMs"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            String watch_path = cfg.getString(<span class="string">"watch-path"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> connectionTimeoutMs = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"connectionTimeoutMs"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">            String namespace = cfg.getString(<span class="string">"namespace"</span>);</span><br><span class="line"></span><br><span class="line">            String digest = cfg.getString(<span class="string">"digest"</span>);</span><br><span class="line"></span><br><span class="line">            String server_address = cfg.getString(<span class="string">"server-address"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">retry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Config cfg = zk.cfg.getObject(<span class="string">"retry"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> maxRetries = cfg.getInt(<span class="string">"maxRetries"</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> baseSleepTimeMs = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"baseSleepTimeMs"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> maxSleepMs = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"maxSleepMs"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">redis</span> </span>&#123;</span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"redis"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            String password = cfg.getString(<span class="string">"password"</span>);</span><br><span class="line">            String clusterModel = cfg.getString(<span class="string">"cluster-model"</span>);</span><br><span class="line">            String sentinelMaster = cfg.getString(<span class="string">"sentinel-master"</span>);</span><br><span class="line"></span><br><span class="line">            List&lt;RedisNode&gt; nodes = cfg.getList(<span class="string">"nodes"</span>)</span><br><span class="line">                    .stream()<span class="comment">//第一纬度数组</span></span><br><span class="line">                    .map(v -&gt; RedisNode.from(v.unwrapped().toString()))</span><br><span class="line">                    .collect(toCollection(ArrayList::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"cluster"</span>.equals(clusterModel);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSentinel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"sentinel"</span>.equals(clusterModel);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getPoolConfig</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> ConfigBeanImpl.createInternal(cfg.getObject(<span class="string">"config"</span>).toConfig(), clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">http</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"http"</span>).toConfig();</span><br><span class="line">            <span class="keyword">boolean</span> proxy_enabled = cfg.getBoolean(<span class="string">"proxy-enabled"</span>);</span><br><span class="line">            <span class="keyword">int</span> default_read_timeout = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"default-read-timeout"</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">int</span> max_conn_per_host = cfg.getInt(<span class="string">"max-conn-per-host"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> max_content_length = cfg.getBytes(<span class="string">"max-content-length"</span>);</span><br><span class="line"></span><br><span class="line">            Map&lt;String, List&lt;DnsMapping&gt;&gt; dns_mapping = loadMapping();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">static</span> Map&lt;String, List&lt;DnsMapping&gt;&gt; loadMapping() &#123;</span><br><span class="line">                Map&lt;String, List&lt;DnsMapping&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                cfg.getObject(<span class="string">"dns-mapping"</span>).forEach((s, v) -&gt;</span><br><span class="line">                        map.put(s, ConfigList.class.cast(v)</span><br><span class="line">                                .stream()</span><br><span class="line">                                .map(cv -&gt; DnsMapping.parse((String) cv.unwrapped()))</span><br><span class="line">                                .collect(toCollection(ArrayList::<span class="keyword">new</span>))</span><br><span class="line">                        )</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">push</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"push"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">            <span class="class"><span class="keyword">interface</span> <span class="title">flow_control</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                Config cfg = push.cfg.getObject(<span class="string">"flow-control"</span>).toConfig();</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">global</span> </span>&#123;</span><br><span class="line">                    Config cfg = flow_control.cfg.getObject(<span class="string">"global"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">int</span> limit = cfg.getNumber(<span class="string">"limit"</span>).intValue();</span><br><span class="line">                    <span class="keyword">int</span> max = cfg.getInt(<span class="string">"max"</span>);</span><br><span class="line">                    <span class="keyword">int</span> duration = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"duration"</span>).toMillis();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="class"><span class="keyword">interface</span> <span class="title">broadcast</span> </span>&#123;</span><br><span class="line">                    Config cfg = flow_control.cfg.getObject(<span class="string">"broadcast"</span>).toConfig();</span><br><span class="line">                    <span class="keyword">int</span> limit = cfg.getInt(<span class="string">"limit"</span>);</span><br><span class="line">                    <span class="keyword">int</span> max = cfg.getInt(<span class="string">"max"</span>);</span><br><span class="line">                    <span class="keyword">int</span> duration = (<span class="keyword">int</span>) cfg.getDuration(<span class="string">"duration"</span>).toMillis();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">interface</span> <span class="title">monitor</span> </span>&#123;</span><br><span class="line">            Config cfg = mp.cfg.getObject(<span class="string">"monitor"</span>).toConfig();</span><br><span class="line">            String dump_dir = cfg.getString(<span class="string">"dump-dir"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> dump_stack = cfg.getBoolean(<span class="string">"dump-stack"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> print_log = cfg.getBoolean(<span class="string">"print-log"</span>);</span><br><span class="line">            Duration dump_period = cfg.getDuration(<span class="string">"dump-period"</span>);</span><br><span class="line">            <span class="keyword">boolean</span> profile_enabled = cfg.getBoolean(<span class="string">"profile-enabled"</span>);</span><br><span class="line">            Duration profile_slowly_duration = cfg.getDuration(<span class="string">"profile-slowly-duration"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br> 功能组件文章目录:</p><ul><li><strong><a href="../CC-配置中心">CC-配置中心</a></strong></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventBus-事件总线</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/EventBus-%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/EventBus-%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>一个内存级别的异步事件总线服务，实现了简单的生产-消费者模式；<br>EventBus是Guava框架对观察者模式的一种实现，使用EventBus可以很简洁的实现事件注册监听和消费。  </p><p>使用场景：</p><ul><li>MPUSH中各事件的发布、订阅；</li><li>Elastic-Job任务执行和任务轨迹记录</li></ul><p>new EventBus();<br>new AsyncEventBus();</p><ul><li>post(new xxxEvent()) 发布事件</li><li>register(this) 注册、订阅事件<br>@Subscribe<br>@AllowConcurrentEvents</li><li>unregister(this) 取消订阅</li></ul><p>第一步：哪个类需要订阅，首先的注册，然后订阅<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">EventBus.register(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="meta">@AllowConcurrentEvents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(ConnectionCloseEvent event)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="meta">@AllowConcurrentEvents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(xxxxEvent event)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二步：发布事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.post(<span class="keyword">new</span> UserOnlineEvent(message.getConnection(), message.userId));</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/fanhenghui/article/details/51459273" target="_blank" rel="noopener">https://blog.csdn.net/fanhenghui/article/details/51459273</a></p><h1 id="MPUSH源码实现"><a href="#MPUSH源码实现" class="headerlink" title="MPUSH源码实现"></a>MPUSH源码实现</h1><p>MPushClient.java 创建EventBus<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MPushClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    monitorService = <span class="keyword">new</span> MonitorService();</span><br><span class="line">    EventBus.create(monitorService.getThreadPoolManager().getEventBusExecutor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EventBus.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.tools.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.AsyncEventBus;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.event.Event;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2015/12/29.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(EventBus.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> com.google.common.eventbus.EventBus eventBus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">        eventBus = <span class="keyword">new</span> AsyncEventBus(executor, (exception, context)</span><br><span class="line">                -&gt; LOGGER.error(<span class="string">"event bus subscriber ex"</span>, exception));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">        eventBus.post(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        eventBus.register(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        eventBus.unregister(bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>EventConsumer.java 父类中注册，子类中可以订阅事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.tools.event;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EventConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventBus.register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalRouterManager</span> <span class="keyword">extends</span> <span class="title">EventConsumer</span> <span class="keyword">implements</span> <span class="title">RouterManager</span>&lt;<span class="title">LocalRouter</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LocalRouterManager.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, LocalRouter&gt; EMPTY = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地路由表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;Integer, LocalRouter&gt;&gt; routers = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalRouter <span class="title">register</span><span class="params">(String userId, LocalRouter router)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"register local router success userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> routers.computeIfAbsent(userId, s -&gt; <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>)).put(router.getClientType(), router);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unRegister</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        LocalRouter router = routers.getOrDefault(userId, EMPTY).remove(clientType);</span><br><span class="line">        LOGGER.info(<span class="string">"unRegister local router success userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;LocalRouter&gt; <span class="title">lookupAll</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(routers.getOrDefault(userId, EMPTY).values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalRouter <span class="title">lookup</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        LocalRouter router = routers.getOrDefault(userId, EMPTY).get(clientType);</span><br><span class="line">        LOGGER.info(<span class="string">"lookup local router userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;Integer, LocalRouter&gt;&gt; routers() &#123;</span><br><span class="line">        <span class="keyword">return</span> routers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听链接关闭事件，清理失效的路由</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@AllowConcurrentEvents</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(ConnectionCloseEvent event)</span> </span>&#123;</span><br><span class="line">        Connection connection = event.connection;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        SessionContext context = connection.getSessionContext();</span><br><span class="line"></span><br><span class="line">        String userId = context.userId;</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> clientType = context.getClientType();</span><br><span class="line">        LocalRouter localRouter = routers.getOrDefault(userId, EMPTY).get(clientType);</span><br><span class="line">        <span class="keyword">if</span> (localRouter == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        String connId = connection.getId();</span><br><span class="line">        <span class="comment">//2.检测下，是否是同一个链接, 如果客户端重连，老的路由会被新的链接覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (connId.equals(localRouter.getRouteValue().getId())) &#123;</span><br><span class="line">            <span class="comment">//3. 删除路由</span></span><br><span class="line">            routers.getOrDefault(userId, EMPTY).remove(clientType);</span><br><span class="line">            <span class="comment">//4. 发送用户下线事件, 只有老的路由存在的情况下才发送，因为有可能又用户重连了，而老的链接又是在新连接之后才断开的</span></span><br><span class="line">            <span class="comment">//这个时候就会有问题，会导致用户变成下线状态，实际用户应该是在线的。</span></span><br><span class="line">            EventBus.post(<span class="keyword">new</span> UserOfflineEvent(event.connection, userId));</span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected local route, userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, localRouter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不相等，则log一下</span></span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected local route, not clean:userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, localRouter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><strong><a href="../EventBus-事件总线">EventBus-事件总线</a></strong></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logs</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Logs/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Logs/</url>
      
        <content type="html"><![CDATA[<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>Logs.init();</p><ul><li>MPush启动时；</li><li>客户端连接时；</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logs.Console.warn(<span class="string">"你正在使用的CacheManager只能用于源码测试，生产环境请使用redis 3.x."</span>);</span><br></pre></td></tr></table></figure><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">06</span>:<span class="number">48.366</span> -[console]- 你正在使用的CacheManager只能用于源码测试，生产环境请使用redis <span class="number">3</span>.x.</span><br></pre></td></tr></table></figure><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (C) Copyright 2015-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contributors:</span></span><br><span class="line"><span class="comment"> *   ohun@live.cn (夜色)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mpush.tools.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.config.CC;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.ConfigRenderOptions;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2016/5/16.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> logInit = init();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logInit) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        System.setProperty(<span class="string">"log.home"</span>, CC.mp.log_dir);</span><br><span class="line">        System.setProperty(<span class="string">"log.root.level"</span>, CC.mp.log_level);</span><br><span class="line">        System.setProperty(<span class="string">"logback.configurationFile"</span>, CC.mp.log_conf_path);</span><br><span class="line">        LoggerFactory</span><br><span class="line">                .getLogger(<span class="string">"console"</span>)</span><br><span class="line">                .info(CC.mp.cfg.root().render(ConfigRenderOptions.concise().setFormatted(<span class="keyword">true</span>)));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Logger Console = LoggerFactory.getLogger(<span class="string">"console"</span>),</span><br><span class="line"></span><br><span class="line">    CONN = LoggerFactory.getLogger(<span class="string">"mpush.conn.log"</span>),</span><br><span class="line"></span><br><span class="line">    MONITOR = LoggerFactory.getLogger(<span class="string">"mpush.monitor.log"</span>),</span><br><span class="line"></span><br><span class="line">    PUSH = LoggerFactory.getLogger(<span class="string">"mpush.push.log"</span>),</span><br><span class="line"></span><br><span class="line">    HB = LoggerFactory.getLogger(<span class="string">"mpush.heartbeat.log"</span>),</span><br><span class="line"></span><br><span class="line">    CACHE = LoggerFactory.getLogger(<span class="string">"mpush.cache.log"</span>),</span><br><span class="line"></span><br><span class="line">    RSD = LoggerFactory.getLogger(<span class="string">"mpush.srd.log"</span>),</span><br><span class="line"></span><br><span class="line">    HTTP = LoggerFactory.getLogger(<span class="string">"mpush.http.log"</span>),</span><br><span class="line"></span><br><span class="line">    PROFILE = LoggerFactory.getLogger(<span class="string">"mpush.profile.log"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><strong><a href="../Logs">Logs</a></strong></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包部署说明</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Alloc%E6%9C%8D%E5%8A%A1/%E6%89%93%E5%8C%85%E9%83%A8%E7%BD%B2%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="打包部署说明.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> Alloc服务文章目录:</p><ul><li><a href="../0-Alloc说明">0-Alloc说明</a></li><li><a href="../1-启动服务">1-启动服务</a></li><li><a href="../2-处理拉取服务列表请求">2-处理拉取服务列表请求</a></li><li><a href="../3-处理index.html请求">3-处理index.html请求</a></li><li><a href="../4-处理PUSH请求">4-处理PUSH请求</a></li><li><strong><a href="../打包部署说明">打包部署说明</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Alloc服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Profiler入门</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Profiler%E5%85%A5%E9%97%A8/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Profiler%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、-概述"><a href="#一、-概述" class="headerlink" title="一、 概述"></a>一、 概述</h1><p>Profiler是一个时间统计程序，他通过在程序中埋点，将埋点时间记录入线程变量中以实现革离，最后dump出结果，得出埋点时间树。</p><h1 id="二、-Profiler常用方法-Profiler类的静态方法"><a href="#二、-Profiler常用方法-Profiler类的静态方法" class="headerlink" title="二、 Profiler常用方法(Profiler类的静态方法)"></a>二、 Profiler常用方法(Profiler类的静态方法)</h1><h2 id="1、Start"><a href="#1、Start" class="headerlink" title="1、Start"></a>1、Start</h2><p>当前线程埋点计时的开始，标识当前埋点的开始时间，每个埋点产生一个Entry，被压入线程变量中的栈中，当start方法被调用时，就是一个时间点栈的开始，如果start方法被重复调用，则覆盖前面被放入线程变量的栈，每个线程只允许一个栈的存在。该方法的参数标识该Entry信息。</p><h2 id="2、-Enter"><a href="#2、-Enter" class="headerlink" title="2、 Enter"></a>2、 Enter</h2><p>向线程变量中的栈压入当前埋点信息Profiler.entry(“…”)，标识当前埋点的开始时间，如果此线程此前未调用start方法，则此方法调用不执行任何操作。</p><h2 id="3、Release"><a href="#3、Release" class="headerlink" title="3、Release"></a>3、Release</h2><p>结束栈里当前Entry时间，打上结束时间标识。</p><h2 id="4、GetDuration"><a href="#4、GetDuration" class="headerlink" title="4、GetDuration"></a>4、GetDuration</h2><p>获取耗费的总时间，是从start到当前的中时间，如果start的Entry没有被release，则getDuration的结果为-1，所以只有栈的最底层的Entry被release后getDuration得到的数值才有意义。</p><h2 id="5、Dump"><a href="#5、Dump" class="headerlink" title="5、Dump"></a>5、Dump</h2><p>当线程内的所有Entry被release后，通过dump的到整个线程内埋点的时间树，列出所有Entry，并统计各自所占用的时间。</p><h2 id="6、Reset"><a href="#6、Reset" class="headerlink" title="6、Reset"></a>6、Reset</h2><p>清除当前线程内的计数器栈。当一次调用完成后，在dump出时间树后应该将其清除，并须再次调用start方可重新计时。</p><h1 id="三、-Profiler埋点方式"><a href="#三、-Profiler埋点方式" class="headerlink" title="三、 Profiler埋点方式"></a>三、 Profiler埋点方式</h1><p>在消息中心项目中主要采用两种埋点方式：</p><ul><li>一种是业务程序中直接埋入Profiler代码；</li><li>一种是利用Spring方法拦截器，将Profiler代码埋入拦截器中。<br>两种方法各有优劣，所以在项目中两种方式综合应用，相互补充。</li></ul><h2 id="1、直接埋点"><a href="#1、直接埋点" class="headerlink" title="1、直接埋点"></a>1、直接埋点</h2><p><code>优点</code>：在业务代码中埋点可以设置任意粒度，能够显示程序中微小范围内的时间变化。<br><code>缺点</code>：Profiler耦合进了业务代码，埋点分布于业务程序的各处，不便于阅读和修改，同时由于其要带try{}finally{}块，将业务代码分割的支离破碎，造成业务代码的断层。<br>用例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendWithChannels</span><span class="params">(<span class="keyword">final</span> MessageTaskDO messageTask,    </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> MessageTypeDO messageType,<span class="keyword">final</span> UserInfoDO userInfo,   </span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> chs)</span> <span class="keyword">throws</span> MessageException</span>&#123;   </span><br><span class="line">        <span class="keyword">int</span> channelInt = chs;   </span><br><span class="line">        UserInfoFuture userInfoFuture = <span class="keyword">null</span>;         </span><br><span class="line">        Profiler.start(<span class="string">"TagTask isFinish"</span>);   </span><br><span class="line">        <span class="keyword">try</span>&#123;   </span><br><span class="line">            <span class="keyword">if</span> (messageTask.getTaskPreStatus() == MessageTaskDO.FALURE_NOTSEND_RETRY   </span><br><span class="line">                    &amp;&amp; messageStatusDAO.isFinish(messageTask.getTaskID(), userInfo.getTargetID()))&#123;   </span><br><span class="line">                <span class="keyword">return</span>;   </span><br><span class="line">            &#125;   </span><br><span class="line">            Profiler.enter(<span class="string">"Task Filter"</span>);   </span><br><span class="line">            <span class="keyword">try</span>&#123;   </span><br><span class="line">                channelInt = getChannelsAfterFilter(messageType, userInfo, channelInt);   </span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;   </span><br><span class="line">                Profiler.release();   </span><br><span class="line">            &#125;   </span><br><span class="line">            Profiler.enter(<span class="string">"Task Fill UserInfo"</span>);   </span><br><span class="line">            <span class="keyword">try</span>&#123;   </span><br><span class="line">                channelInt = getChannelsAfterUInfoFilled(userInfo, userInfoFuture, channelInt);   </span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;   </span><br><span class="line">                Profiler.release();   </span><br><span class="line">            &#125;   </span><br><span class="line">            List&lt;Channel&gt; channels = <span class="keyword">null</span>;   </span><br><span class="line">            Map&lt;Channel, Integer&gt; channelTemplateId = <span class="keyword">null</span>;   </span><br><span class="line">            Map&lt;String, String&gt; mapContext = <span class="keyword">null</span>;   </span><br><span class="line">            Profiler.enter(<span class="string">"Task Fill Context"</span>);   </span><br><span class="line">            <span class="keyword">try</span>&#123;   </span><br><span class="line">                channels = Channel.parseChannels(channelInt);                   </span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;   </span><br><span class="line">                Profiler.release();   </span><br><span class="line">            &#125;   </span><br><span class="line">            Profiler.enter(<span class="string">"Task Send with Channels"</span>);   </span><br><span class="line">            <span class="keyword">try</span>&#123;   </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">final</span> Channel channel : channels)&#123;   </span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> couldSend = <span class="keyword">true</span>;   </span><br><span class="line">                    String sendToAddress = <span class="string">""</span>;   </span><br><span class="line">                    <span class="keyword">if</span> (couldSend)&#123;   </span><br><span class="line">                        Profiler.enter(<span class="string">"send of Channel choose"</span>);   </span><br><span class="line">                        <span class="keyword">if</span> (channel == Channel.WANGWANG)&#123;   </span><br><span class="line">                            sendToAddress = userInfo.getUserNick();   </span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;   </span><br><span class="line">                            logger.error(<span class="string">"MessageTask:"</span> + messageTask.getTaskID() + <span class="string">" is not channel"</span>);   </span><br><span class="line">                            <span class="keyword">continue</span>;   </span><br><span class="line">                        &#125;   </span><br><span class="line">                        <span class="keyword">final</span> Integer templetId = channelTemplateId.get(channel);   </span><br><span class="line">                        <span class="keyword">final</span> String replyTo = <span class="string">"taobao@taobao.com"</span>;   </span><br><span class="line">                        Profiler.release();                          </span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;   </span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;   </span><br><span class="line">                Profiler.release();   </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;   </span><br><span class="line">            Profiler.release();   </span><br><span class="line">            <span class="keyword">final</span> String detail = Profiler.dump(<span class="string">"Detail: "</span>, <span class="string">"           "</span>);   </span><br><span class="line">            logger.warn(String.format(<span class="string">"调用服务：%s的方法%s耗时：%dms，超过预期\n%s\n"</span>,   </span><br><span class="line">                    <span class="keyword">new</span> Object[] &#123;invocation.getThis().getClass().getName(),    </span><br><span class="line">                    invocation.getMethod().getName(),duration, detail &#125;));   </span><br><span class="line">            Profiler.reset();   </span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>通过上面代码可以看出，直接埋点虽然可以控制到很小的粒度，但埋点代码混杂于业务代码，将业务代码分割的支离破碎，是一种很不优雅的用法。</p><h2 id="2、Spring拦截器埋点"><a href="#2、Spring拦截器埋点" class="headerlink" title="2、Spring拦截器埋点"></a>2、Spring拦截器埋点</h2><p><code>优点</code>: 和业务代码解耦，要统计哪个方法的耗时只需要修改拦截器配置文件和拦截器中的埋点代码即可，和业务代码完全无关。<br><code>缺点</code>: 埋点粒度只能到方法这个级别，方法内部的耗时统计就无法完成，同时只能拦截Spring Bean的方法，Bean内部间方法调用无法拦截，只能拦截外部调用Bean的方法。<br>用例如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 自动代理所有的advisor --&gt;  </span><br><span class="line">&lt;bean id=<span class="string">"autoProxyCreator"</span>  </span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span>&gt;  </span><br><span class="line">    &lt;property name=<span class="string">"proxyTargetClass"</span> value=<span class="string">"true"</span>/&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">"interceptorAdvisor"</span>  </span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.aop.support.RegexpMethodPointcutAdvisor"</span>&gt;  </span><br><span class="line">    &lt;!-- 业务实现方法名匹配 --&gt;  </span><br><span class="line">   &lt;property name=<span class="string">"patterns"</span>&gt;  </span><br><span class="line">     &lt;list&gt;  </span><br><span class="line">        &lt;value&gt;com.taobao.messenger.dal.*DAO.*&lt;/value&gt;  </span><br><span class="line">        &lt;value&gt;com.taobao.messenger.service.*&lt;/value&gt;    </span><br><span class="line">     &lt;/list&gt;</span><br><span class="line">   &lt;/property&gt;  </span><br><span class="line">   &lt;property name=<span class="string">"advice"</span>&gt;  </span><br><span class="line">        &lt;ref bean=<span class="string">"interceptorAdvice"</span> /&gt;  </span><br><span class="line">   &lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;  </span><br><span class="line">&lt;bean id=<span class="string">"interceptorAdvice"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.taobao.messenger.proxy.ProfilerInterceptor"</span>&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;   </span><br><span class="line">    <span class="keyword">final</span> String key = invocation.getThis().getClass().getName()+MessageConstants.DOT_SPLIT+invocation.getMethod().getName();   </span><br><span class="line">    <span class="keyword">boolean</span> resetFlag = <span class="keyword">false</span>;   </span><br><span class="line">    <span class="keyword">if</span>(Profiler.getEntry() == <span class="keyword">null</span> || (key.equals(TagTaskDispatcher.class.getName()   </span><br><span class="line">            +MessageConstants.DOT_SPLIT+<span class="string">"sendMessage"</span>)))&#123;   </span><br><span class="line">        Profiler.start(key);   </span><br><span class="line">        resetFlag = <span class="keyword">true</span>;   </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;   </span><br><span class="line">        Profiler.enter(key);   </span><br><span class="line">    &#125;   </span><br><span class="line">    Object result = <span class="keyword">null</span>;   </span><br><span class="line">    <span class="keyword">try</span>&#123;   </span><br><span class="line">        result = invocation.proceed();   </span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;   </span><br><span class="line">        Profiler.release();   </span><br><span class="line">        <span class="keyword">if</span>(resetFlag || (key.equals(TagTaskDispatcher.class.getName()   </span><br><span class="line">                +MessageConstants.DOT_SPLIT+<span class="string">"sendMessage"</span>)))&#123;   </span><br><span class="line">            <span class="keyword">try</span>&#123;<span class="keyword">if</span>(threshold.containsKey(key))&#123;   </span><br><span class="line">                    <span class="keyword">final</span> Long duration = Profiler.getDuration();   </span><br><span class="line">                    <span class="keyword">if</span>(duration&gt;threshold.get(key))&#123;   </span><br><span class="line">                        <span class="keyword">final</span> String detail = Profiler.dump(<span class="string">"Detail: "</span>, <span class="string">"           "</span>);   </span><br><span class="line">                        logger.warn(String.format(<span class="string">"调用服务：%s的方法%s耗时：%dms，超过预期\n%s\n"</span>,   </span><br><span class="line">                                <span class="keyword">new</span> Object[] &#123;   </span><br><span class="line">                                invocation.getThis().getClass().getName(),    </span><br><span class="line">                                invocation.getMethod().getName(),duration, detail &#125;));   </span><br><span class="line">                    &#125;   </span><br><span class="line">                &#125;   </span><br><span class="line">            &#125; <span class="keyword">finally</span>&#123;   </span><br><span class="line">                Profiler.reset();   </span><br><span class="line">            &#125;&#125;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> result;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上面代码可以看出，Profiler代码和业务代码从表象上看完全无关，从结构上和管理上都比较不错。</p><h1 id="四、-Profiler使用中的问题"><a href="#四、-Profiler使用中的问题" class="headerlink" title="四、 Profiler使用中的问题"></a>四、 Profiler使用中的问题</h1><h2 id="1、埋点方式的问题"><a href="#1、埋点方式的问题" class="headerlink" title="1、埋点方式的问题"></a>1、埋点方式的问题</h2><p>通过上面埋点方式的分析，两种方式都有自己的优缺点，所以我们采用两种方式综合使用的方针，以Spring拦截器埋点方式为主，在需要被埋点的重要关节，程序实现的同时尽量将要监控的点放到不通的类里面，被监控的方法粒度尽可能的小，便于配置Spring进行监控。有些相互间关系比较紧密的不容易分割的点和在debug阶段需要临时监控的点使用直接埋点的方式，进行细粒度的监控，在系统稳定后注释掉临时监控点，保留仍需后续监控的直接埋点，但这种埋点要尽可能的少。</p><h2 id="2、内存泄露的问题"><a href="#2、内存泄露的问题" class="headerlink" title="2、内存泄露的问题"></a>2、内存泄露的问题</h2><p>一定要将Profiler.start()方法和Profiler.reset()方法写入 try{}finally{}块中，确保Profiler.reset()方法一定被调用来释放资源，否则如果中间出现异常跳过资源释放操作将引发内存泄露。同理Profiler.release()方法也应该写入finally块里，跳过虽然不会引发内存泄露，但会导致埋点时间计算错误。这点用 Spring拦截器比较好控制，只要控制住出口和入口就行。</p><h2 id="3、时间树输出的问题"><a href="#3、时间树输出的问题" class="headerlink" title="3、时间树输出的问题"></a>3、时间树输出的问题</h2><p>在多线程环境下一般在在线程的出口输出时间树即可，在线程中间（非start方法对应的栈）不要用getDuration获取总耗时，此时只能得到-1,因为getDuration是求最底层Entry的耗时的，中间状态通常最底层的Entry没被release，没办法获得耗时。</p><h2 id="4、方法对"><a href="#4、方法对" class="headerlink" title="4、方法对"></a>4、方法对</h2><p>Profiler.start() 和 Profiler.reset()要成对出现，reset()及时释放内存，防止内存泄露；<br>Profiler.enter() 和 Profiler.release() 要成对出现，release()是时间段结束埋点，内存中打上此enter结束的时间点。</p><p>产生结果树如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[WARN ] <span class="number">2009</span>-<span class="number">06</span>-<span class="number">30</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">06</span>,<span class="number">517</span> [TaskExecuteThread- <span class="number">1</span>-priority-<span class="number">1</span>] [proxy.ProfilerInterceptor] - 调用服务：com.taobao.messenger.control.impl.DefaultTaskController的方法send耗时：<span class="number">375</span>ms，超过预期   </span><br><span class="line">Detail: <span class="number">0</span> [<span class="number">375</span>ms (<span class="number">219</span>ms), <span class="number">100</span>%] - com.taobao.messenger.control.impl.DefaultTaskController.send   </span><br><span class="line">           +---<span class="number">47</span> [<span class="number">0</span>ms] - com.taobao.messenger.dal.ibatis.IbatisMessageTypeDAO.getMessageTypeById   </span><br><span class="line">           `---<span class="number">219</span> [<span class="number">156</span>ms (<span class="number">16</span>ms), <span class="number">42</span>%, <span class="number">42</span>%] - com.taobao.messenger.control.impl.DelegateTaskController.sendWithChannels   </span><br><span class="line">               +---<span class="number">235</span> [<span class="number">0</span>ms] - TagTask isFinish   </span><br><span class="line">               +---<span class="number">235</span> [<span class="number">62</span>ms, <span class="number">40</span>%, <span class="number">17</span>%] - Task Filter   </span><br><span class="line">               |   `---<span class="number">235</span> [<span class="number">62</span>ms, <span class="number">100</span>%, <span class="number">17</span>%] - com.taobao.messenger.dal.ibatis.IbatisSubscriptionInfoDAO.getUserSubscriptionInfo   </span><br><span class="line">               +---<span class="number">297</span> [<span class="number">0</span>ms] - Task Fill UserInfo   </span><br><span class="line">               |   `---<span class="number">297</span> [<span class="number">0</span>ms] - Task fill from UIC   </span><br><span class="line">               +---<span class="number">297</span> [<span class="number">0</span>ms] - Task Fill Context   </span><br><span class="line">               `---<span class="number">297</span> [<span class="number">78</span>ms, <span class="number">50</span>%, <span class="number">21</span>%] - Task Send with Channels   </span><br><span class="line">                   +---<span class="number">297</span> [<span class="number">0</span>ms] - send of Channel choose   </span><br><span class="line">                   +---<span class="number">297</span> [<span class="number">31</span>ms (<span class="number">16</span>ms), <span class="number">40</span>%, <span class="number">8</span>%] - render getTempletId   </span><br><span class="line">                   |   `---<span class="number">313</span> [<span class="number">15</span>ms, <span class="number">48</span>%, <span class="number">4</span>%] - com.taobao.messenger.dal.ibatis.IbatisMessageTemplateDAO.getMessageTempletByID   </span><br><span class="line">                   +---<span class="number">328</span> [<span class="number">47</span>ms, <span class="number">60</span>%, <span class="number">13</span>%] - render content   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render subject   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render fill message   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - put message into gateway   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - send of Channel choose   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render getTempletId   </span><br><span class="line">                   |   `---<span class="number">375</span> [<span class="number">0</span>ms] - com.taobao.messenger.dal.ibatis.IbatisMessageTemplateDAO.getMessageTempletByID   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render content   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render subject   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render fill message   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - put message into gateway   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - send of Channel choose   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render getTempletId   </span><br><span class="line">                   |   `---<span class="number">375</span> [<span class="number">0</span>ms] - com.taobao.messenger.dal.ibatis.IbatisMessageTemplateDAO.getMessageTempletByID   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render content   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render subject   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render fill message   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - put message into gateway   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - send of Channel choose   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render getTempletId   </span><br><span class="line">                   |   `---<span class="number">375</span> [<span class="number">0</span>ms] - com.taobao.messenger.dal.ibatis.IbatisMessageTemplateDAO.getMessageTempletByID   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render content   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render subject   </span><br><span class="line">                   +---<span class="number">375</span> [<span class="number">0</span>ms] - render fill message   </span><br><span class="line">                   `---<span class="number">375</span> [<span class="number">0</span>ms] - put message into gateway</span><br></pre></td></tr></table></figure></p><p>+— 表示正常  </p><p>|   `— 表示上一个的子集</p><p>`— 表示最后一个  </p><p>参考<br><a href="https://blog.csdn.net/hualusiyu/article/details/8568808" target="_blank" rel="noopener">https://blog.csdn.net/hualusiyu/article/details/8568808</a><br><a href="https://www.cnblogs.com/shipengzhi/articles/2087517.html" target="_blank" rel="noopener">https://www.cnblogs.com/shipengzhi/articles/2087517.html</a></p><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><strong><a href="../Profiler入门">Profiler入门</a></strong></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlowControl-流控</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/FlowControl-%E6%B5%81%E6%8E%A7/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/FlowControl-%E6%B5%81%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="FlowControl-流控.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><strong><a href="../FlowControl-流控">FlowControl-流控</a></strong></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Profiler-统计方法或者线程执行时间</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Profiler-%E7%BB%9F%E8%AE%A1%E6%96%B9%E6%B3%95%E6%88%96%E8%80%85%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/Profiler-%E7%BB%9F%E8%AE%A1%E6%96%B9%E6%B3%95%E6%88%96%E8%80%85%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>实现类： Profiler.java<br>这两个类中打断点    </p><ul><li>AdminHandler.java  </li><li>ServerChannelHandler.java  </li></ul><p>测试Profiler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProfilerTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//10ms</span></span><br><span class="line">    <span class="keyword">long</span> profile_slowly_limit = CC.mp.monitor.profile_slowly_duration.toMillis();</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProfiler</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> cmd = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Profiler.enable(<span class="keyword">true</span>);</span><br><span class="line">            Profiler.start(<span class="string">"time cost on [channel read]: %s"</span>, <span class="string">"111111"</span>);</span><br><span class="line"></span><br><span class="line">            Profiler.enter(<span class="string">"time cost on [A]"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            Profiler.release();</span><br><span class="line"></span><br><span class="line">            Profiler.enter(<span class="string">"time cost on [B]"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            Profiler.release();</span><br><span class="line"></span><br><span class="line">            Profiler.enter(<span class="string">"time cost on [C]"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            Profiler.release();</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">400</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            Profiler.release();</span><br><span class="line">            <span class="keyword">if</span> (Profiler.getDuration() &gt; profile_slowly_limit) &#123;</span><br><span class="line">                System.out.println(Profiler.dump());</span><br><span class="line">            &#125;</span><br><span class="line">            Profiler.reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> [<span class="number">1</span>,<span class="number">400</span>ms (<span class="number">400</span>ms), <span class="number">100</span>%] - time cost on [channel read]:</span><br><span class="line">+---<span class="number">0</span> [<span class="number">300</span>ms, <span class="number">21</span>%, <span class="number">21</span>%] - time cost on [A]</span><br><span class="line">+---<span class="number">300</span> [<span class="number">500</span>ms, <span class="number">36</span>%, <span class="number">36</span>%] - time cost on [B]</span><br><span class="line">`---<span class="number">800</span> [<span class="number">200</span>ms, <span class="number">14</span>%, <span class="number">14</span>%] - time cost on [C]</span><br></pre></td></tr></table></figure></p><h1 id="Profiler入门"><a href="#Profiler入门" class="headerlink" title="Profiler入门"></a>Profiler入门</h1><p><a href="../Profiler入门">Profiler入门</a></p><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><strong><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></strong></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVMUtil</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/JVMUtil/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/JVMUtil/</url>
      
        <content type="html"><![CDATA[<p>利用JMX的MBEAN,输出线程栈、堆栈到本地；</p><h1 id="使用时机1（线程池发生reject，打印线程栈）"><a href="#使用时机1（线程池发生reject，打印线程栈）" class="headerlink" title="使用时机1（线程池发生reject，打印线程栈）"></a>使用时机1（线程池发生reject，打印线程栈）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.tools.thread.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.Utils;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.common.JVMUtil;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.config.CC;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.RejectedExecutionHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.pool.ThreadPoolConfig.REJECTED_POLICY_ABORT;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.pool.ThreadPoolConfig.REJECTED_POLICY_CALLER_RUNS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DumpThreadRejectedHandler</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(DumpThreadRejectedHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumping = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DUMP_DIR = CC.mp.monitor.dump_dir;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolConfig poolConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> rejectedPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DumpThreadRejectedHandler</span><span class="params">(ThreadPoolConfig poolConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.poolConfig = poolConfig;</span><br><span class="line">        <span class="keyword">this</span>.rejectedPolicy = poolConfig.getRejectedPolicy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        LOGGER.warn(<span class="string">"one task rejected, poolConfig=&#123;&#125;, poolInfo=&#123;&#125;"</span>, poolConfig, Utils.getPoolInfo(e));</span><br><span class="line">        <span class="keyword">if</span> (!dumping) &#123;</span><br><span class="line">            dumping = <span class="keyword">true</span>;</span><br><span class="line">            dumpJVMInfo();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rejectedPolicy == REJECTED_POLICY_ABORT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"one task rejected, pool="</span> + poolConfig.getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rejectedPolicy == REJECTED_POLICY_CALLER_RUNS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dumpJVMInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"start dump jvm info"</span>);</span><br><span class="line">        JVMUtil.dumpJstack(DUMP_DIR + <span class="string">"/"</span> + poolConfig.getName());</span><br><span class="line">        LOGGER.info(<span class="string">"end dump jvm info"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用时机2（MPushServer监控，打印线程栈、堆栈）"><a href="#使用时机2（MPushServer监控，打印线程栈、堆栈）" class="headerlink" title="使用时机2（MPushServer监控，打印线程栈、堆栈）"></a>使用时机2（MPushServer监控，打印线程栈、堆栈）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorService</span> <span class="keyword">extends</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">Monitor</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_DUMP_JSTACK_LOAD_AVG = <span class="number">2</span>,</span><br><span class="line">            SECOND_DUMP_JSTACK_LOAD_AVG = <span class="number">4</span>,</span><br><span class="line">            THIRD_DUMP_JSTACK_LOAD_AVG = <span class="number">6</span>,</span><br><span class="line">            FIRST_DUMP_JMAP_LOAD_AVG = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dumpLogDir = CC.mp.monitor.dump_dir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> dumpEnabled = CC.mp.monitor.dump_stack;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> printLog = CC.mp.monitor.print_log;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> dumpPeriod = CC.mp.monitor.dump_period.getSeconds();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpFirstJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpSecondJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpThirdJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpJmap = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResultCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolManager threadPoolManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonitorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threadPoolManager = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">        collector = <span class="keyword">new</span> ResultCollector(threadPoolManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isRunning()) &#123;</span><br><span class="line">            MonitorResult result = collector.collect();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (printLog) &#123;</span><br><span class="line">                Logs.MONITOR.info(result.toJson());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dumpEnabled) &#123;</span><br><span class="line">                dump();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(dumpPeriod);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isRunning()) stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (printLog || dumpEnabled) &#123;</span><br><span class="line">            thread = Utils.newThread(ThreadNames.T_MONITOR, <span class="keyword">this</span>);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStop</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span> &amp;&amp; thread.isAlive()) thread.interrupt();</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> load = collector.getJvmInfo().load();</span><br><span class="line">        <span class="keyword">if</span> (load &gt; FIRST_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpFirstJstack) &#123;</span><br><span class="line">                dumpFirstJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJstack(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; SECOND_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpSecondJstack) &#123;</span><br><span class="line">                dumpSecondJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; THIRD_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpThirdJstack) &#123;</span><br><span class="line">                dumpThirdJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; FIRST_DUMP_JMAP_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpJmap) &#123;</span><br><span class="line">                dumpJmap = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String name, Thread thread)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String name, Executor executor)</span> </span>&#123;</span><br><span class="line">        threadPoolManager.register(name, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolManager <span class="title">getThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadPoolManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (C) Copyright 2015-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contributors:</span></span><br><span class="line"><span class="comment"> *   ohun@live.cn (夜色)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mpush.tools.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.Utils;</span><br><span class="line"><span class="keyword">import</span> com.sun.management.HotSpotDiagnosticMXBean;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.*;</span><br><span class="line"><span class="keyword">import</span> java.security.AccessController;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivilegedExceptionAction;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOT_SPOT_BEAN_NAME = <span class="string">"com.sun.management:type=HotSpotDiagnostic"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(JVMUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HotSpotDiagnosticMXBean hotSpotMXBean;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jstack</span><span class="params">(OutputStream stream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PrintStream out = <span class="keyword">new</span> PrintStream(stream);</span><br><span class="line">        <span class="keyword">boolean</span> cpuTimeEnabled = threadMXBean.isThreadCpuTimeSupported() &amp;&amp; threadMXBean.isThreadCpuTimeEnabled();</span><br><span class="line">        Map&lt;Thread, StackTraceElement[]&gt; map = Thread.getAllStackTraces();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Thread, StackTraceElement[]&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            Thread t = entry.getKey();</span><br><span class="line">            StackTraceElement[] elements = entry.getValue();</span><br><span class="line"></span><br><span class="line">            ThreadInfo tt = threadMXBean.getThreadInfo(t.getId());</span><br><span class="line">            <span class="keyword">long</span> tid = t.getId();</span><br><span class="line">            Thread.State state = t.getState();</span><br><span class="line">            <span class="keyword">long</span> cpuTimeMillis = cpuTimeEnabled ? threadMXBean.getThreadCpuTime(tid) / <span class="number">1000000</span> : -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> userTimeMillis = cpuTimeEnabled ? threadMXBean.getThreadUserTime(tid) / <span class="number">1000000</span> : -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            out.printf(<span class="string">"%s id=%d state=%s deamon=%s priority=%s cpu[total=%sms,user=%sms]"</span>, t.getName(),</span><br><span class="line">                    tid, t.getState(), t.isDaemon(), t.getPriority(), cpuTimeMillis, userTimeMillis);</span><br><span class="line">            <span class="keyword">final</span> LockInfo lock = tt.getLockInfo();</span><br><span class="line">            <span class="keyword">if</span> (lock != <span class="keyword">null</span> &amp;&amp; state != Thread.State.BLOCKED) &#123;</span><br><span class="line">                out.printf(<span class="string">"%n    - waiting on &lt;0x%08x&gt; (a %s)"</span>, lock.getIdentityHashCode(), lock.getClassName());</span><br><span class="line">                out.printf(<span class="string">"%n    - locked &lt;0x%08x&gt; (a %s)"</span>, lock.getIdentityHashCode(), lock.getClassName());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lock != <span class="keyword">null</span> &amp;&amp; state == Thread.State.BLOCKED) &#123;</span><br><span class="line">                out.printf(<span class="string">"%n    - waiting to lock &lt;0x%08x&gt; (a %s)"</span>, lock.getIdentityHashCode(),</span><br><span class="line">                        lock.getClassName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tt.isSuspended()) &#123;</span><br><span class="line">                out.print(<span class="string">" (suspended)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tt.isInNative()) &#123;</span><br><span class="line">                out.print(<span class="string">" (running in native)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out.println();</span><br><span class="line">            <span class="keyword">if</span> (tt.getLockOwnerName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.printf(<span class="string">"     owned by %s id=%d%n"</span>, tt.getLockOwnerName(), tt.getLockOwnerId());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> MonitorInfo[] monitors = tt.getLockedMonitors();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">                <span class="keyword">final</span> StackTraceElement element = elements[i];</span><br><span class="line">                out.printf(<span class="string">"    at %s%n"</span>, element);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; monitors.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">final</span> MonitorInfo monitor = monitors[j];</span><br><span class="line">                    <span class="keyword">if</span> (monitor.getLockedStackDepth() == i) &#123;</span><br><span class="line">                        out.printf(<span class="string">"      - locked %s%n"</span>, monitor);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out.println();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> LockInfo[] locks = tt.getLockedSynchronizers();</span><br><span class="line">            <span class="keyword">if</span> (locks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                out.printf(<span class="string">"    Locked synchronizers: count = %d%n"</span>, locks.length);</span><br><span class="line">                <span class="keyword">for</span> (LockInfo l : locks) &#123;</span><br><span class="line">                    out.printf(<span class="string">"      - %s%n"</span>, l);</span><br><span class="line">                &#125;</span><br><span class="line">                out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpJstack</span><span class="params">(<span class="keyword">final</span> String jvmPath)</span> </span>&#123;</span><br><span class="line">        Utils.newThread(<span class="string">"dump-jstack-t"</span>, (() -&gt; &#123;</span><br><span class="line">            File path = <span class="keyword">new</span> File(jvmPath);</span><br><span class="line">            <span class="keyword">if</span> (path.exists() || path.mkdirs()) &#123;</span><br><span class="line">                File file = <span class="keyword">new</span> File(path, System.currentTimeMillis() + <span class="string">"-jstack.log"</span>);</span><br><span class="line">                <span class="keyword">try</span> (FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file)) &#123;</span><br><span class="line">                    JVMUtil.jstack(out);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"Dump JVM cache Error!"</span>, t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HotSpotDiagnosticMXBean <span class="title">getHotSpotMXBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;HotSpotDiagnosticMXBean&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> HotSpotDiagnosticMXBean <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">                    Set&lt;ObjectName&gt; s = server.queryNames(<span class="keyword">new</span> ObjectName(HOT_SPOT_BEAN_NAME), <span class="keyword">null</span>);</span><br><span class="line">                    Iterator&lt;ObjectName&gt; itr = s.iterator();</span><br><span class="line">                    <span class="keyword">if</span> (itr.hasNext()) &#123;</span><br><span class="line">                        ObjectName name = itr.next();</span><br><span class="line">                        HotSpotDiagnosticMXBean bean = ManagementFactory.newPlatformMXBeanProxy(server,</span><br><span class="line">                                name.toString(), HotSpotDiagnosticMXBean.class);</span><br><span class="line">                        <span class="keyword">return</span> bean;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"getHotSpotMXBean Error!"</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initHotSpotMBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hotSpotMXBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (JVMUtil.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hotSpotMXBean == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    hotSpotMXBean = getHotSpotMXBean();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">jMap</span><span class="params">(String fileName, <span class="keyword">boolean</span> live)</span> </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(fileName, System.currentTimeMillis() + <span class="string">"-jmap.log"</span>);</span><br><span class="line">        String currentFileName = f.getPath();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            initHotSpotMBean();</span><br><span class="line">            <span class="keyword">if</span> (f.exists()) &#123;</span><br><span class="line">                f.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            hotSpotMXBean.dumpHeap(currentFileName, live);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"dumpHeap Error!"</span> + currentFileName, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dumpJmap</span><span class="params">(<span class="keyword">final</span> String jvmPath)</span> </span>&#123;</span><br><span class="line">        Utils.newThread(<span class="string">"dump-jmap-t"</span>, () -&gt; jMap(jvmPath, <span class="keyword">false</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><strong><a href="../JVMUtil">JVMUtil</a></strong></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务启动监听</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E7%9B%91%E5%90%AC/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<p>主要用于服务的启动和停止，子类只需要继承BaseService类，然后调用其start、stop方法；</p><p><img src="/源码学习/MPush/源码分析/功能组件/服务启动监听/服务启动监听.png" alt="服务启动监听">  </p><p>启动服务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mPushServer.getHttpClient().syncStart();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">mPushServer.getHttpClient().start();</span><br></pre></td></tr></table></figure></p><p>停止服务：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mPushServer.getHttpClient().syncStop();</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">mPushServer.getHttpClient().stop();</span><br></pre></td></tr></table></figure></p><p>子类中的启动、停止方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//....实现相关的启动业务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知监听器，表示该操作已经完成</span></span><br><span class="line">    listener.onSuccess();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStop</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">//....实现相关的停止业务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通知监听器，表示该操作已经完成</span></span><br><span class="line">   listener.onSuccess();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BaseService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.api.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yxx on 2016/5/19.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> AtomicBoolean started = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> started.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">tryStart</span><span class="params">(Listener l, FunctionEx function)</span> </span>&#123;</span><br><span class="line">        FutureListener listener = wrap(l);</span><br><span class="line">        <span class="keyword">if</span> (started.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                init();</span><br><span class="line">                function.apply(listener);</span><br><span class="line">                listener.monitor(<span class="keyword">this</span>);<span class="comment">//主要用于异步，否则应该放置在function.apply(listener)之前</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                listener.onFailure(e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwIfStarted()) &#123;</span><br><span class="line">                listener.onFailure(<span class="keyword">new</span> ServiceException(<span class="string">"service already started."</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onSuccess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">tryStop</span><span class="params">(Listener l, FunctionEx function)</span> </span>&#123;</span><br><span class="line">        FutureListener listener = wrap(l);</span><br><span class="line">        <span class="keyword">if</span> (started.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                function.apply(listener);</span><br><span class="line">                listener.monitor(<span class="keyword">this</span>);<span class="comment">//主要用于异步，否则应该放置在function.apply(listener)之前</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                listener.onFailure(e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwIfStopped()) &#123;</span><br><span class="line">                listener.onFailure(<span class="keyword">new</span> ServiceException(<span class="string">"service already stopped."</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                listener.onSuccess();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> CompletableFuture&lt;Boolean&gt; <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FutureListener listener = <span class="keyword">new</span> FutureListener(started);</span><br><span class="line">        start(listener);</span><br><span class="line">        <span class="keyword">return</span> listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> CompletableFuture&lt;Boolean&gt; <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FutureListener listener = <span class="keyword">new</span> FutureListener(started);</span><br><span class="line">        stop(listener);</span><br><span class="line">        <span class="keyword">return</span> listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">syncStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> start().join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">syncStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stop().join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Listener listener)</span> </span>&#123;</span><br><span class="line">        tryStart(listener, <span class="keyword">this</span>::doStart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Listener listener)</span> </span>&#123;</span><br><span class="line">        tryStop(listener, <span class="keyword">this</span>::doStop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStop</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制当服务已经启动后，重复调用start方法，是否抛出服务已经启动异常</span></span><br><span class="line"><span class="comment">     * 默认是true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">throwIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制当服务已经停止后，重复调用stop方法，是否抛出服务已经停止异常</span></span><br><span class="line"><span class="comment">     * 默认是true</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">throwIfStopped</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务启动停止，超时时间, 默认是10s</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">timeoutMillis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span> * <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">interface</span> <span class="title">FunctionEx</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">apply</span><span class="params">(Listener l)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止Listener被重复执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l listener</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FutureListener</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FutureListener <span class="title">wrap</span><span class="params">(Listener l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> FutureListener(started);</span><br><span class="line">        <span class="keyword">if</span> (l <span class="keyword">instanceof</span> FutureListener) <span class="keyword">return</span> (FutureListener) l;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FutureListener(l, started);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.api.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureListener</span> <span class="keyword">extends</span> <span class="title">CompletableFuture</span>&lt;<span class="title">Boolean</span>&gt; <span class="keyword">implements</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Listener listener;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicBoolean started;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FutureListener</span><span class="params">(AtomicBoolean started)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started = started;</span><br><span class="line">        <span class="keyword">this</span>.listener = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FutureListener</span><span class="params">(Listener listener, AtomicBoolean started)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">        <span class="keyword">this</span>.started = started;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isDone()) <span class="keyword">return</span>;<span class="comment">// 防止Listener被重复执行</span></span><br><span class="line">        complete(started.get());</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) listener.onSuccess(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isDone()) <span class="keyword">return</span>;<span class="comment">// 防止Listener被重复执行</span></span><br><span class="line">        completeExceptionally(cause);</span><br><span class="line">        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) listener.onFailure(cause);</span><br><span class="line">        <span class="keyword">throw</span> cause <span class="keyword">instanceof</span> ServiceException</span><br><span class="line">                ? (ServiceException) cause</span><br><span class="line">                : <span class="keyword">new</span> ServiceException(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止服务长时间卡在某个地方，增加超时监控</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> service 服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(BaseService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isDone()) <span class="keyword">return</span>;<span class="comment">// 防止Listener被重复执行</span></span><br><span class="line">        runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.get(service.timeoutMillis(), TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">this</span>.onFailure(<span class="keyword">new</span> ServiceException(String.format(<span class="string">"service %s monitor timeout"</span>, service.getClass().getSimpleName())));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><strong><a href="../服务启动监听">服务启动监听</a></strong></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TimeLine-时间线</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/TimeLine-%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/TimeLine-%E6%97%B6%E9%97%B4%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<p>TimeLine可以跟踪调用链路点，记录经过的各个环节点，从而知道这条消息经过了哪几个组件；</p><p>使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleUserPushTask</span> <span class="keyword">implements</span> <span class="title">PushTask</span>, <span class="title">ChannelFutureListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeLine timeLine = <span class="keyword">new</span> TimeLine();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleUserPushTask</span><span class="params">(MPushServer mPushServer, IPushMessage message, FlowControl flowControl)</span> </span>&#123;</span><br><span class="line">        .....</span><br><span class="line">        <span class="comment">//标记开始</span></span><br><span class="line">        <span class="keyword">this</span>.timeLine.begin(<span class="string">"push-center-begin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">    mPushServer.getPushCenter().getPushListener().onTimeout(message, timeLine.timeoutEnd().getTimePoints());</span><br><span class="line">    mPushServer.getPushCenter().getPushListener().onSuccess(message, timeLine.successEnd().getTimePoints());</span><br><span class="line">    mPushServer.getPushCenter().getPushListener().onFailure(message, timeLine.failureEnd().getTimePoints());</span><br><span class="line">    mPushServer.getPushCenter().getPushListener().onRedirect(message, timeLine.end(<span class="string">"redirect-end"</span>).getTimePoints());</span><br><span class="line">    mPushServer.getPushCenter().getPushListener().onOffline(message, timeLine.end(<span class="string">"offline-end"</span>).getTimePoints());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加ACK任务到队列, 等待客户端响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageId 下发到客户端待ack的消息的sessionId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addAckTask</span><span class="params">(<span class="keyword">int</span> messageId)</span> </span>&#123;</span><br><span class="line">        timeLine.addTimePoint(<span class="string">"waiting-ack"</span>);</span><br><span class="line">        <span class="comment">//因为要进队列，可以提前释放一些比较占用内存的字段，便于垃圾回收</span></span><br><span class="line">        message.finalized();</span><br><span class="line">        AckTask task = AckTask</span><br><span class="line">                .from(messageId)</span><br><span class="line">                .setCallback(<span class="keyword">new</span> PushAckCallback(message, timeLine, mPushServer.getPushCenter()));</span><br><span class="line">        mPushServer.getPushCenter().getAckTaskQueue().add(task, message.getTimeoutMills() - (<span class="keyword">int</span>) (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeLine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimePoint root = <span class="keyword">new</span> TimePoint(<span class="string">"root"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pointCount;</span><br><span class="line">    <span class="keyword">private</span> TimePoint current = root;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"TimeLine"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeLine</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        addTimePoint(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addTimePoint(<span class="string">"begin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTimePoint</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        current = current.next = <span class="keyword">new</span> TimePoint(name);</span><br><span class="line">        pointCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTimePoints</span><span class="params">(Object[] points)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (points != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.length; i++) &#123;</span><br><span class="line">                current = current.next = <span class="keyword">new</span> TimePoint((String) points[i], ((Number) points[++i]).longValue());</span><br><span class="line">                pointCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeLine <span class="title">end</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        addTimePoint(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeLine <span class="title">end</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addTimePoint(<span class="string">"end"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeLine <span class="title">successEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addTimePoint(<span class="string">"success-end"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeLine <span class="title">failureEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addTimePoint(<span class="string">"failure-end"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TimeLine <span class="title">timeoutEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addTimePoint(<span class="string">"timeout-end"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(name);</span><br><span class="line">        <span class="keyword">if</span> (root.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(<span class="string">'['</span>).append(current.time - root.next.time).append(<span class="string">']'</span>).append(<span class="string">"(ms)"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">'&#123;'</span>);</span><br><span class="line">        TimePoint next = root;</span><br><span class="line">        <span class="keyword">while</span> ((next = next.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(next.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getTimePoints() &#123;</span><br><span class="line">        Object[] arrays = <span class="keyword">new</span> Object[<span class="number">2</span> * pointCount];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        TimePoint next = root;</span><br><span class="line">        <span class="keyword">while</span> ((next = next.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            arrays[i++] = next.name;</span><br><span class="line">            arrays[i++] = next.time;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimePoint</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> time;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">transient</span> TimePoint next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TimePoint</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TimePoint</span><span class="params">(String name, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.time = time;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(TimePoint next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) <span class="keyword">return</span> name;</span><br><span class="line">            <span class="keyword">return</span> name + <span class="string">" --（"</span> + (next.time - time) + <span class="string">"ms) --&gt; "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a>**</li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a>**</li><li><strong><a href="../TimeLine-时间线">TimeLine-时间线</a></strong></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI机制</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/SPI%E6%9C%BA%E5%88%B6/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/SPI%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="SPI机制.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><strong><a href="../SPI机制">SPI机制</a></strong></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态判断-位运算</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%8A%B6%E6%80%81%E5%88%A4%E6%96%AD-%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%8A%B6%E6%80%81%E5%88%A4%E6%96%AD-%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="状态判断-位运算.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><strong><a href="../状态判断-位运算">状态判断-位运算</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%9B%91%E6%8E%A7/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>监控服务目前看下来，只在MPushServer服务中启用；</p><ul><li>监控服务</li><li>总收集器</li><li>线程池信息收集</li><li>……</li></ul><h1 id="监控服务"><a href="#监控服务" class="headerlink" title="监控服务"></a>监控服务</h1><p>1、初始化总收集器；<br>2、打印所有监控信息到控制台；<br>3、根据系统负载将线程栈、堆栈输出到本地文件；</p><p>MonitorService.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.common.Monitor;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.service.BaseService;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.service.Listener;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.data.MonitorResult;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.data.ResultCollector;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.Utils;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.common.JVMUtil;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.config.CC;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.log.Logs;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.ThreadNames;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorService</span> <span class="keyword">extends</span> <span class="title">BaseService</span> <span class="keyword">implements</span> <span class="title">Monitor</span>, <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_DUMP_JSTACK_LOAD_AVG = <span class="number">2</span>,</span><br><span class="line">            SECOND_DUMP_JSTACK_LOAD_AVG = <span class="number">4</span>,</span><br><span class="line">            THIRD_DUMP_JSTACK_LOAD_AVG = <span class="number">6</span>,</span><br><span class="line">            FIRST_DUMP_JMAP_LOAD_AVG = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String dumpLogDir = CC.mp.monitor.dump_dir;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> dumpEnabled = CC.mp.monitor.dump_stack;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> printLog = CC.mp.monitor.print_log;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> dumpPeriod = CC.mp.monitor.dump_period.getSeconds();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpFirstJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpSecondJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpThirdJstack = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> dumpJmap = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResultCollector collector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolManager threadPoolManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MonitorService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        threadPoolManager = <span class="keyword">new</span> ThreadPoolManager();</span><br><span class="line">        collector = <span class="keyword">new</span> ResultCollector(threadPoolManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (isRunning()) &#123;</span><br><span class="line">            MonitorResult result = collector.collect();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (printLog) &#123;</span><br><span class="line">                Logs.MONITOR.info(result.toJson());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dumpEnabled) &#123;</span><br><span class="line">                dump();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(dumpPeriod);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isRunning()) stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (printLog || dumpEnabled) &#123;</span><br><span class="line">            thread = Utils.newThread(ThreadNames.T_MONITOR, <span class="keyword">this</span>);</span><br><span class="line">            thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStop</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span> &amp;&amp; thread.isAlive()) thread.interrupt();</span><br><span class="line">        listener.onSuccess();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> load = collector.getJvmInfo().load();</span><br><span class="line">        <span class="keyword">if</span> (load &gt; FIRST_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpFirstJstack) &#123;</span><br><span class="line">                dumpFirstJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJstack(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; SECOND_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpSecondJstack) &#123;</span><br><span class="line">                dumpSecondJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; THIRD_DUMP_JSTACK_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpThirdJstack) &#123;</span><br><span class="line">                dumpThirdJstack = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (load &gt; FIRST_DUMP_JMAP_LOAD_AVG) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dumpJmap) &#123;</span><br><span class="line">                dumpJmap = <span class="keyword">true</span>;</span><br><span class="line">                JVMUtil.dumpJmap(dumpLogDir);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String name, Thread thread)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">monitor</span><span class="params">(String name, Executor executor)</span> </span>&#123;</span><br><span class="line">        threadPoolManager.register(name, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolManager <span class="title">getThreadPoolManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadPoolManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总收集器"><a href="#总收集器" class="headerlink" title="总收集器"></a>总收集器</h1><p>收集类型：</p><ul><li>JVMInfo</li><li>JVMGC 垃圾回收</li><li>JVMMemory 堆</li><li>JVMThread 线程</li><li>JVMThreadPool 线程池</li></ul><p>ResultCollector.java 监控信息收集器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.quota.impl.*;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.service.ThreadPoolManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yxx on 2016/5/19.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultCollector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMInfo jvmInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMGC jvmgc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMMemory jvmMemory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMThread jvmThread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMThreadPool jvmThreadPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultCollector</span><span class="params">(ThreadPoolManager threadPoolManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jvmInfo = <span class="keyword">new</span> JVMInfo();</span><br><span class="line">        <span class="keyword">this</span>.jvmgc = <span class="keyword">new</span> JVMGC();</span><br><span class="line">        <span class="keyword">this</span>.jvmMemory = <span class="keyword">new</span> JVMMemory();</span><br><span class="line">        <span class="keyword">this</span>.jvmThread = <span class="keyword">new</span> JVMThread();</span><br><span class="line">        <span class="keyword">this</span>.jvmThreadPool = <span class="keyword">new</span> JVMThreadPool(threadPoolManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonitorResult <span class="title">collect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MonitorResult result = <span class="keyword">new</span> MonitorResult();</span><br><span class="line">        result.addResult(<span class="string">"jvm-info"</span>, jvmInfo.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-gc"</span>, jvmgc.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-memory"</span>, jvmMemory.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-thread"</span>, jvmThread.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-thread-pool"</span>, jvmThreadPool.monitor());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMInfo <span class="title">getJvmInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMGC <span class="title">getJvmgc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmgc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMMemory <span class="title">getJvmMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmMemory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMThread <span class="title">getJvmThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMThreadPool <span class="title">getJvmThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线程池信息收集"><a href="#线程池信息收集" class="headerlink" title="线程池信息收集"></a>线程池信息收集</h2><p>获取各个线程池的信息，如corePoolSize、maxPoolSize、activeCount(workingThread)、poolSize(workThread)、queueSize(blockedTask)</p><p>组装为map.put(“event-bus”,poolInfo);</p><p>JVMThreadPool.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.quota.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.quota.ThreadPoolQuota;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.service.ThreadPoolManager;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.Utils.getPoolInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMThreadPool</span> <span class="keyword">implements</span> <span class="title">ThreadPoolQuota</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolManager threadPoolManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JVMThreadPool</span><span class="params">(ThreadPoolManager threadPoolManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadPoolManager = threadPoolManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Executor&gt; pools = threadPoolManager.getActivePools();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Executor&gt; entry : pools.entrySet()) &#123;</span><br><span class="line">            String serviceName = entry.getKey();</span><br><span class="line">            Executor executor = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">                result.put(serviceName, getPoolInfo((ThreadPoolExecutor) executor));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> EventLoopGroup) &#123;</span><br><span class="line">                result.put(serviceName, getPoolInfo((EventLoopGroup) executor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><strong><a href="../监控">监控</a></strong></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信模型与超时控制</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="通信模型与超时控制.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><strong><a href="../通信模型与超时控制">通信模型与超时控制</a></strong></li><li><a href="../线程池">线程池</a></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/%E5%8A%9F%E8%83%BD%E7%BB%84%E4%BB%B6/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<ul><li>线程池使用</li><li>线程池监控</li></ul><h1 id="线程池监控"><a href="#线程池监控" class="headerlink" title="线程池监控"></a>线程池监控</h1><h2 id="监控总收集器"><a href="#监控总收集器" class="headerlink" title="监控总收集器"></a>监控总收集器</h2><p>ResultCollector.java 监控信息收集器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.quota.impl.*;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.service.ThreadPoolManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yxx on 2016/5/19.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultCollector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMInfo jvmInfo;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMGC jvmgc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMMemory jvmMemory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMThread jvmThread;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JVMThreadPool jvmThreadPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultCollector</span><span class="params">(ThreadPoolManager threadPoolManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jvmInfo = <span class="keyword">new</span> JVMInfo();</span><br><span class="line">        <span class="keyword">this</span>.jvmgc = <span class="keyword">new</span> JVMGC();</span><br><span class="line">        <span class="keyword">this</span>.jvmMemory = <span class="keyword">new</span> JVMMemory();</span><br><span class="line">        <span class="keyword">this</span>.jvmThread = <span class="keyword">new</span> JVMThread();</span><br><span class="line">        <span class="keyword">this</span>.jvmThreadPool = <span class="keyword">new</span> JVMThreadPool(threadPoolManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MonitorResult <span class="title">collect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MonitorResult result = <span class="keyword">new</span> MonitorResult();</span><br><span class="line">        result.addResult(<span class="string">"jvm-info"</span>, jvmInfo.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-gc"</span>, jvmgc.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-memory"</span>, jvmMemory.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-thread"</span>, jvmThread.monitor());</span><br><span class="line">        result.addResult(<span class="string">"jvm-thread-pool"</span>, jvmThreadPool.monitor());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMInfo <span class="title">getJvmInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMGC <span class="title">getJvmgc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmgc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMMemory <span class="title">getJvmMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmMemory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMThread <span class="title">getJvmThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JVMThreadPool <span class="title">getJvmThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jvmThreadPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="线程池信息收集"><a href="#线程池信息收集" class="headerlink" title="线程池信息收集"></a>线程池信息收集</h2><p>获取各个线程池的信息，如corePoolSize、maxPoolSize、activeCount(workingThread)、poolSize(workThread)、queueSize(blockedTask)</p><p>组装为map.put(“event-bus”,poolInfo);</p><p>JVMThreadPool.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.quota.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.quota.ThreadPoolQuota;</span><br><span class="line"><span class="keyword">import</span> com.mpush.monitor.service.ThreadPoolManager;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.Utils.getPoolInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JVMThreadPool</span> <span class="keyword">implements</span> <span class="title">ThreadPoolQuota</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadPoolManager threadPoolManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JVMThreadPool</span><span class="params">(ThreadPoolManager threadPoolManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.threadPoolManager = threadPoolManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(Object... args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;String, Executor&gt; pools = threadPoolManager.getActivePools();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Executor&gt; entry : pools.entrySet()) &#123;</span><br><span class="line">            String serviceName = entry.getKey();</span><br><span class="line">            Executor executor = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">                result.put(serviceName, getPoolInfo((ThreadPoolExecutor) executor));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> EventLoopGroup) &#123;</span><br><span class="line">                result.put(serviceName, getPoolInfo((EventLoopGroup) executor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="线程池使用"><a href="#线程池使用" class="headerlink" title="线程池使用"></a>线程池使用</h1><p>ThreadPoolManager.java 线程池管理者，有5种线程池，包括MQ/event-bus/push-client-timer/push-task-timer/ack-timer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.monitor.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.common.ExecutorFactory;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.NamedThreadFactory;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SingleThreadEventLoop;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutor;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.ThreadProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorFactory executorFactory = ExecutorFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Executor&gt; pools = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getRedisExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pools.computeIfAbsent(<span class="string">"mq"</span>, s -&gt; executorFactory.get(ExecutorFactory.MQ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getEventBusExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pools.computeIfAbsent(<span class="string">"event-bus"</span>, s -&gt; executorFactory.get(ExecutorFactory.EVENT_BUS));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledExecutorService <span class="title">getPushClientTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ScheduledExecutorService) pools.computeIfAbsent(<span class="string">"push-client-timer"</span></span><br><span class="line">                , s -&gt; executorFactory.get(ExecutorFactory.PUSH_CLIENT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledExecutorService <span class="title">getPushTaskTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ScheduledExecutorService) pools.computeIfAbsent(<span class="string">"push-task-timer"</span></span><br><span class="line">                , s -&gt; executorFactory.get(ExecutorFactory.PUSH_TASK));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledExecutorService <span class="title">getAckTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ScheduledExecutorService) pools.computeIfAbsent(<span class="string">"ack-timer"</span></span><br><span class="line">                , s -&gt; executorFactory.get(ExecutorFactory.ACK_TIMER));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String name, Executor executor)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(name);</span><br><span class="line">        Objects.requireNonNull(executor);</span><br><span class="line">        pools.put(name, executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Executor&gt; <span class="title">getActivePools</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pools;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ClientExecutorFactory.java 客户端线程池工厂</p><p>mpush-client/resources/META-INF/services/com.mpush.api.spi.common.ExecutorFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.Spi;</span><br><span class="line"><span class="keyword">import</span> com.mpush.common.CommonExecutorFactory;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.log.Logs;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.NamedPoolThreadFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.config.CC.mp.thread.pool.ack_timer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.config.CC.mp.thread.pool.push_client;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.ThreadNames.T_ARK_REQ_TIMER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.ThreadNames.T_PUSH_CLIENT_TIMER;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此线程池可伸缩，线程空闲一定时间后回收，新请求重新创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Spi</span>(order = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientExecutorFactory</span> <span class="keyword">extends</span> <span class="title">CommonExecutorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> PUSH_CLIENT: &#123;</span><br><span class="line">                ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(push_client</span><br><span class="line">                        , <span class="keyword">new</span> NamedPoolThreadFactory(T_PUSH_CLIENT_TIMER), (r, e) -&gt; r.run() <span class="comment">// run caller thread</span></span><br><span class="line">                );</span><br><span class="line">                executor.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> ACK_TIMER: &#123;</span><br><span class="line">                ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(ack_timer,</span><br><span class="line">                        <span class="keyword">new</span> NamedPoolThreadFactory(T_ARK_REQ_TIMER),</span><br><span class="line">                        (r, e) -&gt; Logs.PUSH.error(<span class="string">"one ack context was rejected, context="</span> + r)</span><br><span class="line">                );</span><br><span class="line">                executor.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ServerExecutorFactory 服务端线程池工厂</p><p>mpush-core/resources/META-INF/services/com.mpush.api.spi.common.ExecutorFactory<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此线程池可伸缩，线程空闲一定时间后回收，新请求重新创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Spi</span>(order = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerExecutorFactory</span> <span class="keyword">extends</span> <span class="title">CommonExecutorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadPoolConfig config;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> MQ:</span><br><span class="line">                config = ThreadPoolConfig</span><br><span class="line">                        .build(T_MQ)</span><br><span class="line">                        .setCorePoolSize(CC.mp.thread.pool.mq.min)</span><br><span class="line">                        .setMaxPoolSize(CC.mp.thread.pool.mq.max)</span><br><span class="line">                        .setKeepAliveSeconds(TimeUnit.SECONDS.toSeconds(<span class="number">10</span>))</span><br><span class="line">                        .setQueueCapacity(CC.mp.thread.pool.mq.queue_size)</span><br><span class="line">                        .setRejectedPolicy(ThreadPoolConfig.REJECTED_POLICY_CALLER_RUNS);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PUSH_TASK:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(push_task, <span class="keyword">new</span> NamedPoolThreadFactory(T_PUSH_CENTER_TIMER),</span><br><span class="line">                        (r, e) -&gt; &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> PushException(<span class="string">"one push task was rejected. task="</span> + r);</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">            <span class="keyword">case</span> ACK_TIMER: &#123;</span><br><span class="line">                ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(ack_timer,</span><br><span class="line">                        <span class="keyword">new</span> NamedPoolThreadFactory(T_ARK_REQ_TIMER),</span><br><span class="line">                        (r, e) -&gt; Logs.PUSH.error(<span class="string">"one ack context was rejected, context="</span> + r)</span><br><span class="line">                );</span><br><span class="line">                executor.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.get(name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> get(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ExecutorFactory.java 线程池工厂接口(SPI)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.api.spi.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.SpiLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by yxx on 2016/5/20.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorFactory</span> </span>&#123;</span><br><span class="line">    String PUSH_CLIENT = <span class="string">"push-client"</span>;</span><br><span class="line">    String PUSH_TASK = <span class="string">"push-task"</span>;</span><br><span class="line">    String ACK_TIMER = <span class="string">"ack-timer"</span>;</span><br><span class="line">    String EVENT_BUS = <span class="string">"event-bus"</span>;</span><br><span class="line">    String MQ = <span class="string">"mq"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Executor <span class="title">get</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ExecutorFactory <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SpiLoader.load(ExecutorFactory.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>CommonExecutorFactory.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.common.ExecutorFactory;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.config.CC;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.log.Logs;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.NamedPoolThreadFactory;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.pool.DefaultExecutor;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.pool.DumpThreadRejectedHandler;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.thread.pool.ThreadPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.config.CC.mp.thread.pool.ack_timer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.config.CC.mp.thread.pool.push_client;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.ThreadNames.T_ARK_REQ_TIMER;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.ThreadNames.T_EVENT_BUS;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.tools.thread.ThreadNames.T_PUSH_CLIENT_TIMER;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2017/7/15.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn (夜色)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonExecutorFactory</span> <span class="keyword">implements</span> <span class="title">ExecutorFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Executor <span class="title">get</span><span class="params">(ThreadPoolConfig config)</span> </span>&#123;</span><br><span class="line">        String name = config.getName();</span><br><span class="line">        <span class="keyword">int</span> corePoolSize = config.getCorePoolSize();</span><br><span class="line">        <span class="keyword">int</span> maxPoolSize = config.getMaxPoolSize();</span><br><span class="line">        <span class="keyword">int</span> keepAliveSeconds = config.getKeepAliveSeconds();</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; queue = config.getQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultExecutor(corePoolSize</span><br><span class="line">                , maxPoolSize</span><br><span class="line">                , keepAliveSeconds</span><br><span class="line">                , TimeUnit.SECONDS</span><br><span class="line">                , queue</span><br><span class="line">                , <span class="keyword">new</span> NamedPoolThreadFactory(name)</span><br><span class="line">                , <span class="keyword">new</span> DumpThreadRejectedHandler(config));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">get</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ThreadPoolConfig config;</span><br><span class="line">        <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">            <span class="keyword">case</span> EVENT_BUS:</span><br><span class="line">                config = ThreadPoolConfig</span><br><span class="line">                        .build(T_EVENT_BUS)</span><br><span class="line">                        .setCorePoolSize(CC.mp.thread.pool.event_bus.min)</span><br><span class="line">                        .setMaxPoolSize(CC.mp.thread.pool.event_bus.max)</span><br><span class="line">                        .setKeepAliveSeconds(TimeUnit.SECONDS.toSeconds(<span class="number">10</span>))</span><br><span class="line">                        .setQueueCapacity(CC.mp.thread.pool.event_bus.queue_size)</span><br><span class="line">                        .setRejectedPolicy(ThreadPoolConfig.REJECTED_POLICY_CALLER_RUNS);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PUSH_CLIENT: &#123;</span><br><span class="line">                ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(push_client</span><br><span class="line">                        , <span class="keyword">new</span> NamedPoolThreadFactory(T_PUSH_CLIENT_TIMER), (r, e) -&gt; r.run() <span class="comment">// run caller thread</span></span><br><span class="line">                );</span><br><span class="line">                executor.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> ACK_TIMER: &#123;</span><br><span class="line">                ScheduledThreadPoolExecutor executor = <span class="keyword">new</span> ScheduledThreadPoolExecutor(ack_timer,</span><br><span class="line">                        <span class="keyword">new</span> NamedPoolThreadFactory(T_ARK_REQ_TIMER),</span><br><span class="line">                        (r, e) -&gt; Logs.PUSH.error(<span class="string">"one ack context was rejected, context="</span> + r)</span><br><span class="line">                );</span><br><span class="line">                executor.setRemoveOnCancelPolicy(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">return</span> executor;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"no executor for "</span> + name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> get(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ThreadPoolConfig.java 线程池配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * (C) Copyright 2015-2016 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Contributors:</span></span><br><span class="line"><span class="comment"> *   ohun@live.cn (夜色)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.mpush.tools.thread.pool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.SynchronousQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REJECTED_POLICY_ABORT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REJECTED_POLICY_DISCARD = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REJECTED_POLICY_CALLER_RUNS = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize; <span class="comment">//最小线程大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxPoolSize; <span class="comment">//最大线程大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueCapacity;  <span class="comment">// 允许缓冲在队列中的任务数 (0:不缓冲、负数：无限大、正数：缓冲的任务数)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> keepAliveSeconds;<span class="comment">// 存活时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rejectedPolicy = REJECTED_POLICY_ABORT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolConfig</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCorePoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> corePoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setCorePoolSize</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxPoolSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> maxPoolSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setMaxPoolSize</span><span class="params">(<span class="keyword">int</span> maxPoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxPoolSize = maxPoolSize;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueueCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queueCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setQueueCapacity</span><span class="params">(<span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queueCapacity = queueCapacity;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKeepAliveSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> keepAliveSeconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setKeepAliveSeconds</span><span class="params">(<span class="keyword">long</span> keepAliveSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveSeconds = (<span class="keyword">int</span>) keepAliveSeconds;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRejectedPolicy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rejectedPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolConfig <span class="title">setRejectedPolicy</span><span class="params">(<span class="keyword">int</span> rejectedPolicy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rejectedPolicy = rejectedPolicy;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolConfig <span class="title">buildFixed</span><span class="params">(String name, <span class="keyword">int</span> threads, <span class="keyword">int</span> queueCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolConfig(name)</span><br><span class="line">                .setCorePoolSize(threads)</span><br><span class="line">                .setMaxPoolSize(threads)</span><br><span class="line">                .setQueueCapacity(queueCapacity)</span><br><span class="line">                .setKeepAliveSeconds(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolConfig <span class="title">buildCached</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolConfig(name)</span><br><span class="line">                .setKeepAliveSeconds(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolConfig <span class="title">build</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolConfig(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BlockingQueue&lt;Runnable&gt; <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; blockingQueue;</span><br><span class="line">        <span class="keyword">if</span> (queueCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            blockingQueue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queueCapacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            blockingQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(queueCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ThreadPoolConfig&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", corePoolSize="</span> + corePoolSize +</span><br><span class="line">                <span class="string">", maxPoolSize="</span> + maxPoolSize +</span><br><span class="line">                <span class="string">", queueCapacity="</span> + queueCapacity +</span><br><span class="line">                <span class="string">", keepAliveSeconds="</span> + keepAliveSeconds +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br><br> 功能组件文章目录:</p><ul><li><a href="../CC-配置中心">CC-配置中心</a></li><li><a href="../EventBus-事件总线">EventBus-事件总线</a></li><li><a href="../FlowControl-流控">FlowControl-流控</a></li><li><a href="../JVMUtil">JVMUtil</a></li><li><a href="../Logs">Logs</a></li><li><a href="../Profiler-统计方法或者线程执行时间">Profiler-统计方法或者线程执行时间</a></li><li><a href="../Profiler入门">Profiler入门</a></li><li><a href="../SPI机制">SPI机制</a></li><li><a href="../TimeLine-时间线">TimeLine-时间线</a></li><li><a href="../服务启动监听">服务启动监听</a></li><li><a href="../监控">监控</a></li><li><a href="../通信模型与超时控制">通信模型与超时控制</a></li><li><strong><a href="../线程池">线程池</a></strong></li><li><a href="../状态判断-位运算">状态判断-位运算</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> 功能组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket客户端</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-js/websocket%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-js/websocket%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>web端，走websocket方式通信；<br>源码：<a href="https://github.com/mpusher/mpush-client-js" target="_blank" rel="noopener">https://github.com/mpusher/mpush-client-js</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MPush WebSocket Client<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    (function (window) &#123;</span></span><br><span class="line"><span class="undefined">        let socket, session = &#123;&#125;, ID_SEQ = 1;</span></span><br><span class="line"><span class="undefined">        let config = &#123;listener: null, log: console&#125;;</span></span><br><span class="line"><span class="undefined">        let listener = &#123;</span></span><br><span class="line"><span class="undefined">            onOpened: function (event) &#123;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onOpened(event);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                handshake();</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            onClosed: function (event) &#123;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onClosed(event);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                session = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">                ID_SEQ = 1;</span></span><br><span class="line"><span class="undefined">                socket = null;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            onHandshake: function () &#123;</span></span><br><span class="line"><span class="undefined">                session.handshakeOk = true;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onHandshake();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                if (config.userId) &#123;</span></span><br><span class="line"><span class="undefined">                    bindUser(config.userId, config.tags);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            onBindUser: function (success) &#123;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onBindUser(success);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            onReceivePush: function (message, messageId) &#123;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onReceivePush(message, messageId);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            onKickUser: function (userId, deviceId) &#123;</span></span><br><span class="line"><span class="undefined">                if (config.listener != null) &#123;</span></span><br><span class="line"><span class="undefined">                    config.listener.onKickUser(userId, deviceId);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                doClose(-1, "kick user");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        const Command = &#123;</span></span><br><span class="line"><span class="undefined">            HANDSHAKE: 2,</span></span><br><span class="line"><span class="undefined">            BIND: 5,</span></span><br><span class="line"><span class="undefined">            UNBIND: 6,</span></span><br><span class="line"><span class="undefined">            ERROR: 10,</span></span><br><span class="line"><span class="undefined">            OK: 11,</span></span><br><span class="line"><span class="undefined">            KICK: 13,</span></span><br><span class="line"><span class="undefined">            PUSH: 15,</span></span><br><span class="line"><span class="undefined">            ACK: 23,</span></span><br><span class="line"><span class="undefined">            UNKNOWN: -1</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        function Packet(cmd, body, sessionId) &#123;</span></span><br><span class="line"><span class="undefined">            return &#123;</span></span><br><span class="line"><span class="undefined">                cmd: cmd,</span></span><br><span class="line"><span class="undefined">                flags: 16,</span></span><br><span class="line"><span class="undefined">                sessionId: sessionId || ID_SEQ++,</span></span><br><span class="line"><span class="undefined">                body: body</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function handshake() &#123;</span></span><br><span class="line"><span class="undefined">            send(Packet(Command.HANDSHAKE, &#123;</span></span><br><span class="line"><span class="undefined">                    deviceId: config.deviceId,</span></span><br><span class="line"><span class="undefined">                    osName: config.osName,</span></span><br><span class="line"><span class="undefined">                    osVersion: config.osVersion,</span></span><br><span class="line"><span class="undefined">                    clientVersion: config.clientVersion</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="undefined">            );</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function bindUser(userId, tags) &#123;</span></span><br><span class="line"><span class="undefined">            if (userId &amp;&amp; userId != session.userId) &#123;</span></span><br><span class="line"><span class="undefined">                session.userId = userId;</span></span><br><span class="line"><span class="undefined">                session.tags = tags;</span></span><br><span class="line"><span class="undefined">                send(Packet(Command.BIND, &#123;userId: userId, tags: tags&#125;));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function ack(sessionId) &#123;</span></span><br><span class="line"><span class="undefined">            send(Packet(Command.ACK, null, sessionId));</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function send(message) &#123;</span></span><br><span class="line"><span class="undefined">            if (!socket) &#123;</span></span><br><span class="line"><span class="undefined">                return;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            if (socket.readyState == WebSocket.OPEN) &#123;</span></span><br><span class="line"><span class="undefined">                socket.send(JSON.stringify(message));</span></span><br><span class="line"><span class="undefined">            &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                config.log.error("The socket is not open.");</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function dispatch(packet) &#123;</span></span><br><span class="line"><span class="undefined">            switch (packet.cmd) &#123;</span></span><br><span class="line"><span class="undefined">                case Command.HANDSHAKE: &#123;</span></span><br><span class="line"><span class="undefined">                    config.log.debug("&gt;&gt;&gt; handshake ok.");</span></span><br><span class="line"><span class="undefined">                    listener.onHandshake();</span></span><br><span class="line"><span class="undefined">                    break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                case Command.OK: &#123;</span></span><br><span class="line"><span class="undefined">                    if (packet.body.cmd == Command.BIND) &#123;</span></span><br><span class="line"><span class="undefined">                        config.log.debug("&gt;&gt;&gt; bind user ok.");</span></span><br><span class="line"><span class="undefined">                        listener.onBindUser(true);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                case Command.ERROR: &#123;</span></span><br><span class="line"><span class="undefined">                    if (packet.body.cmd == Command.BIND) &#123;</span></span><br><span class="line"><span class="undefined">                        config.log.debug("&gt;&gt;&gt; bind user failure.");</span></span><br><span class="line"><span class="undefined">                        listener.onBindUser(false);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                case Command.KICK: &#123;</span></span><br><span class="line"><span class="undefined">                    if (session.userId == packet.body.userId &amp;&amp; config.deviceId == packet.body.deviceId) &#123;</span></span><br><span class="line"><span class="undefined">                        config.log.debug("&gt;&gt;&gt; receive kick user.");</span></span><br><span class="line"><span class="undefined">                        listener.onKickUser(packet.body.userId, packet.body.deviceId);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                case Command.PUSH: &#123;</span></span><br><span class="line"><span class="undefined">                    config.log.debug("&gt;&gt;&gt; receive push, content=" + packet.body.content);</span></span><br><span class="line"><span class="undefined">                    let sessionId;</span></span><br><span class="line"><span class="undefined">                    if ((packet.flags &amp; 8) != 0) &#123;</span></span><br><span class="line"><span class="undefined">                        ack(packet.sessionId);</span></span><br><span class="line"><span class="undefined">                    &#125; else &#123;</span></span><br><span class="line"><span class="undefined">                        sessionId = packet.sessionId</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    listener.onReceivePush(packet.body.content, sessionId);</span></span><br><span class="line"><span class="undefined">                    break;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function onReceive(event) &#123;</span></span><br><span class="line"><span class="undefined">            config.log.debug("&gt;&gt;&gt; receive packet=" + event.data);</span></span><br><span class="line"><span class="undefined">            dispatch(JSON.parse(event.data))</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function onOpen(event) &#123;</span></span><br><span class="line"><span class="undefined">            config.log.info("Web Socket opened!");</span></span><br><span class="line"><span class="undefined">            listener.onOpened(event);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function onClose(event) &#123;</span></span><br><span class="line"><span class="undefined">            config.log.info("Web Socket closed!");</span></span><br><span class="line"><span class="undefined">            listener.onClosed(event);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function onError(event) &#123;</span></span><br><span class="line"><span class="undefined">            config.log.info("Web Socket receive, error");</span></span><br><span class="line"><span class="undefined">            doClose();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function doClose(code, reason) &#123;</span></span><br><span class="line"><span class="undefined">            if (socket) socket.close();</span></span><br><span class="line"><span class="undefined">            config.log.info("try close web socket client, reason=" + reason);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function doConnect(cfg) &#123;</span></span><br><span class="line"><span class="undefined">            config = copy(cfg);</span></span><br><span class="line"><span class="undefined">            socket = new WebSocket(config.url);</span></span><br><span class="line"><span class="undefined">            socket.onmessage = onReceive;</span></span><br><span class="line"><span class="undefined">            socket.onopen = onOpen;</span></span><br><span class="line"><span class="undefined">            socket.onclose = onClose;</span></span><br><span class="line"><span class="undefined">            socket.onerror = onError;</span></span><br><span class="line"><span class="undefined">            config.log.debug("try connect to web socket server, url=" + config.url);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        function copy(cfg) &#123;</span></span><br><span class="line"><span class="undefined">            for (let p in cfg) &#123;</span></span><br><span class="line"><span class="undefined">                if (cfg.hasOwnProperty(p)) &#123;</span></span><br><span class="line"><span class="undefined">                    config[p] = cfg[p];</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            return config;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        window.mpush = &#123;</span></span><br><span class="line"><span class="undefined">            connect: doConnect,</span></span><br><span class="line"><span class="undefined">            close: doClose,</span></span><br><span class="line"><span class="undefined">            bindUser: bindUser</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)(window);</span></span><br><span class="line"><span class="undefined">    function $(id) &#123;</span></span><br><span class="line"><span class="undefined">        return document.getElementById(id);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    let log = &#123;</span></span><br><span class="line"><span class="undefined">        log: function () &#123;</span></span><br><span class="line"><span class="undefined">            $("responseText").value += (Array.prototype.join.call(arguments, "") + "\r\n");</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    log.debug = log.info = log.warn = log.error = log.log;</span></span><br><span class="line"><span class="undefined">    function connect() &#123;</span></span><br><span class="line"><span class="undefined">        mpush.connect(&#123;</span></span><br><span class="line"><span class="undefined">            url: $("url").value,</span></span><br><span class="line"><span class="undefined">            userId: $("userId").value,</span></span><br><span class="line"><span class="undefined">            deviceId: "test-1001",</span></span><br><span class="line"><span class="undefined">            osName: "web " + navigator.userAgent,</span></span><br><span class="line"><span class="undefined">            osVersion: "55.2",</span></span><br><span class="line"><span class="undefined">            clientVersion: "1.0",</span></span><br><span class="line"><span class="undefined">            log: log</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    function bind() &#123;</span></span><br><span class="line"><span class="undefined">        mpush.bindUser($("userId").value)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span> Server Url:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"ws://127.0.0.1:8080/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Connect"</span> <span class="attr">onclick</span>=<span class="string">"connect()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span> Bind User:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userId"</span> <span class="attr">value</span>=<span class="string">"user-0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"bind"</span> <span class="attr">onclick</span>=<span class="string">"bind()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"responseText"</span>&gt;</span>Output<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"responseText"</span> <span class="attr">style</span>=<span class="string">"width:100%;height:500px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接收MPNS PUSH消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20PUSH%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20PUSH%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="/源码学习/MPush/源码分析/Mpush Server/TCP网关服务/接收MPNS PUSH消息/接收MPNS PUSH消息.png" alt="接收MPNS PUSH消息">  </p><p>GatewayServer服务，接收MPNS的消息种类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GatewayServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.GATEWAY_PUSH, () -&gt; <span class="keyword">new</span> GatewayPushHandler(mPushServer.getPushCenter()));</span><br></pre></td></tr></table></figure></p><p>处理MPNS来的消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPushHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">GatewayPushMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PushCenter pushCenter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayPushHandler</span><span class="params">(PushCenter pushCenter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pushCenter = pushCenter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayPushMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GatewayPushMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(GatewayPushMessage message)</span> </span>&#123;</span><br><span class="line">        pushCenter.push(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>网关服务启动类 GatewayServer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayServer</span> <span class="keyword">extends</span> <span class="title">NettyTCPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerChannelHandler channelHandler;</span><br><span class="line">    <span class="keyword">private</span> ConnectionManager connectionManager;</span><br><span class="line">    <span class="keyword">private</span> MessageDispatcher messageDispatcher;</span><br><span class="line">    <span class="keyword">private</span> GlobalChannelTrafficShapingHandler trafficShapingHandler;</span><br><span class="line">    <span class="keyword">private</span> ScheduledExecutorService trafficShapingExecutor;</span><br><span class="line">    <span class="keyword">private</span> MPushServer mPushServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayServer</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(gateway_server_port, gateway_server_bind_ip);</span><br><span class="line">        <span class="keyword">this</span>.mPushServer = mPushServer;</span><br><span class="line">        <span class="keyword">this</span>.messageDispatcher = <span class="keyword">new</span> MessageDispatcher();</span><br><span class="line">        <span class="keyword">this</span>.connectionManager = <span class="keyword">new</span> ServerConnectionManager(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.channelHandler = <span class="keyword">new</span> ServerChannelHandler(<span class="keyword">false</span>, connectionManager, messageDispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">        messageDispatcher.register(Command.GATEWAY_PUSH, () -&gt; <span class="keyword">new</span> GatewayPushHandler(mPushServer.getPushCenter()));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.traffic_shaping.gateway_server.enabled) &#123;<span class="comment">//启用流量整形，限流</span></span><br><span class="line">            trafficShapingExecutor = Executors.newSingleThreadScheduledExecutor(<span class="keyword">new</span> NamedPoolThreadFactory(T_TRAFFIC_SHAPING));</span><br><span class="line">            trafficShapingHandler = <span class="keyword">new</span> GlobalChannelTrafficShapingHandler(</span><br><span class="line">                    trafficShapingExecutor,</span><br><span class="line">                    write_global_limit, read_global_limit,</span><br><span class="line">                    write_channel_limit, read_channel_limit,</span><br><span class="line">                    check_interval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Listener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.stop(listener);</span><br><span class="line">        <span class="keyword">if</span> (trafficShapingHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            trafficShapingHandler.release();</span><br><span class="line">            trafficShapingExecutor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connectionManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connectionManager.destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getBossThreadName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadNames.T_GATEWAY_BOSS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getWorkThreadName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ThreadNames.T_GATEWAY_WORKER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getIoRate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getWorkThreadNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CC.mp.thread.pool.gateway_server_work;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPipeline</span><span class="params">(ChannelPipeline pipeline)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initPipeline(pipeline);</span><br><span class="line">        <span class="keyword">if</span> (trafficShapingHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pipeline.addFirst(trafficShapingHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initOptions</span><span class="params">(ServerBootstrap b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initOptions(b);</span><br><span class="line">        <span class="keyword">if</span> (snd_buf.gateway_server &gt; <span class="number">0</span>) b.childOption(ChannelOption.SO_SNDBUF, snd_buf.gateway_server);</span><br><span class="line">        <span class="keyword">if</span> (rcv_buf.gateway_server &gt; <span class="number">0</span>) b.childOption(ChannelOption.SO_RCVBUF, rcv_buf.gateway_server);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这个坑其实也不算坑，只是因为懒，该做的事情没做。一般来讲我们的业务如果比较小的时候我们用同步处理，等业务到一定规模的时候，一个优化手段就是异步化。</span></span><br><span class="line"><span class="comment">         * 异步化是提高吞吐量的一个很好的手段。但是，与异步相比，同步有天然的负反馈机制，也就是如果后端慢了，前面也会跟着慢起来，可以自动的调节。</span></span><br><span class="line"><span class="comment">         * 但是异步就不同了，异步就像决堤的大坝一样，洪水是畅通无阻。如果这个时候没有进行有效的限流措施就很容易把后端冲垮。</span></span><br><span class="line"><span class="comment">         * 如果一下子把后端冲垮倒也不是最坏的情况，就怕把后端冲的要死不活。</span></span><br><span class="line"><span class="comment">         * 这个时候，后端就会变得特别缓慢，如果这个时候前面的应用使用了一些无界的资源等，就有可能把自己弄死。</span></span><br><span class="line"><span class="comment">         * 那么现在要介绍的这个坑就是关于Netty里的ChannelOutboundBuffer这个东西的。</span></span><br><span class="line"><span class="comment">         * 这个buffer是用在netty向channel write数据的时候，有个buffer缓冲，这样可以提高网络的吞吐量(每个channel有一个这样的buffer)。</span></span><br><span class="line"><span class="comment">         * 初始大小是32(32个元素，不是指字节)，但是如果超过32就会翻倍，一直增长。</span></span><br><span class="line"><span class="comment">         * 大部分时候是没有什么问题的，但是在碰到对端非常慢(对端慢指的是对端处理TCP包的速度变慢，比如对端负载特别高的时候就有可能是这个情况)的时候就有问题了，</span></span><br><span class="line"><span class="comment">         * 这个时候如果还是不断地写数据，这个buffer就会不断地增长，最后就有可能出问题了(我们的情况是开始吃swap，最后进程被linux killer干掉了)。</span></span><br><span class="line"><span class="comment">         * 为什么说这个地方是坑呢，因为大部分时候我们往一个channel写数据会判断channel是否active，但是往往忽略了这种慢的情况。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 那这个问题怎么解决呢？其实ChannelOutboundBuffer虽然无界，但是可以给它配置一个高水位线和低水位线，</span></span><br><span class="line"><span class="comment">         * 当buffer的大小超过高水位线的时候对应channel的isWritable就会变成false，</span></span><br><span class="line"><span class="comment">         * 当buffer的大小低于低水位线的时候，isWritable就会变成true。所以应用应该判断isWritable，如果是false就不要再写数据了。</span></span><br><span class="line"><span class="comment">         * 高水位线和低水位线是字节数，默认高水位是64K，低水位是32K，我们可以根据我们的应用需要支持多少连接数和系统资源进行合理规划。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (gateway_server_low &gt; <span class="number">0</span> &amp;&amp; gateway_server_high &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            b.childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, <span class="keyword">new</span> WriteBufferWaterMark(</span><br><span class="line">                    gateway_server_low, gateway_server_high</span><br><span class="line">            ));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ChannelFactory&lt;? extends ServerChannel&gt; getChannelFactory() &#123;</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.tcpGateway()) <span class="keyword">return</span> <span class="keyword">super</span>.getChannelFactory();</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.udtGateway()) <span class="keyword">return</span> NioUdtProvider.BYTE_ACCEPTOR;</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.sctpGateway()) <span class="keyword">return</span> NioSctpServerChannel::<span class="keyword">new</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getChannelFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SelectorProvider <span class="title">getSelectorProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.tcpGateway()) <span class="keyword">return</span> <span class="keyword">super</span>.getSelectorProvider();</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.udtGateway()) <span class="keyword">return</span> NioUdtProvider.BYTE_PROVIDER;</span><br><span class="line">        <span class="keyword">if</span> (CC.mp.net.sctpGateway()) <span class="keyword">return</span> <span class="keyword">super</span>.getSelectorProvider();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getSelectorProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">getChannelHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channelHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionManager <span class="title">getConnectionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageDispatcher <span class="title">getMessageDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>网关服务channel处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ServerChannelHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> profile_slowly_limit = CC.mp.monitor.profile_slowly_duration.toMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> security; <span class="comment">//是否启用加密</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConnectionManager connectionManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PacketReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerChannelHandler</span><span class="params">(<span class="keyword">boolean</span> security, ConnectionManager connectionManager, PacketReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.security = security;</span><br><span class="line">        <span class="keyword">this</span>.connectionManager = connectionManager;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Packet packet = (Packet) msg;</span><br><span class="line">        <span class="keyword">byte</span> cmd = packet.cmd;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Profiler.start(<span class="string">"time cost on [channel read]: "</span>, packet.toString());</span><br><span class="line">            Connection connection = connectionManager.get(ctx.channel());</span><br><span class="line">            LOGGER.debug(<span class="string">"channelRead conn=&#123;&#125;, packet=&#123;&#125;"</span>, ctx.channel(), connection.getSessionContext(), msg);</span><br><span class="line">            connection.updateLastReadTime();</span><br><span class="line">            receiver.onReceive(packet, connection);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Profiler.release();</span><br><span class="line">            <span class="keyword">if</span> (Profiler.getDuration() &gt; profile_slowly_limit) &#123;</span><br><span class="line">                Logs.PROFILE.info(<span class="string">"Read Packet[cmd=&#123;&#125;] Slowly: \n&#123;&#125;"</span>, Command.toCMD(cmd), Profiler.dump());</span><br><span class="line">            &#125;</span><br><span class="line">            Profiler.reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = connectionManager.get(ctx.channel());</span><br><span class="line">        Logs.CONN.error(<span class="string">"client caught ex, conn=&#123;&#125;"</span>, connection);</span><br><span class="line">        LOGGER.error(<span class="string">"caught an ex, channel=&#123;&#125;, conn=&#123;&#125;"</span>, ctx.channel(), connection, cause);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logs.CONN.info(<span class="string">"client connected conn=&#123;&#125;"</span>, ctx.channel());</span><br><span class="line">        Connection connection = <span class="keyword">new</span> NettyConnection();</span><br><span class="line">        connection.init(ctx.channel(), security);</span><br><span class="line">        connectionManager.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = connectionManager.removeAndClose(ctx.channel());</span><br><span class="line">        EventBus.post(<span class="keyword">new</span> ConnectionCloseEvent(connection));</span><br><span class="line">        Logs.CONN.info(<span class="string">"client disconnected conn=&#123;&#125;"</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> TCP网关服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云到端-推送</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%88%B0%E7%AB%AF-%E6%8E%A8%E9%80%81/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E4%BA%91%E5%88%B0%E7%AB%AF-%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="云到端-推送.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> TCP网关服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UDP服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/UDP%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/UDP%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="/源码学习/MPush/源码分析/Mpush Server/UDP网关服务/UDP服务/UDP服务.png" alt="UDP服务">  </p><p>UDP服务启动类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayUDPConnector</span> <span class="keyword">extends</span> <span class="title">NettyUDPConnector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UDPChannelHandler channelHandler;</span><br><span class="line">    <span class="keyword">private</span> MessageDispatcher messageDispatcher;</span><br><span class="line">    <span class="keyword">private</span> MPushServer mPushServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayUDPConnector</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(CC.mp.net.gateway_server_port);</span><br><span class="line">        <span class="keyword">this</span>.mPushServer = mPushServer;</span><br><span class="line">        <span class="keyword">this</span>.messageDispatcher = <span class="keyword">new</span> MessageDispatcher(POLICY_LOG);</span><br><span class="line">        <span class="keyword">this</span>.channelHandler = <span class="keyword">new</span> UDPChannelHandler(messageDispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">        messageDispatcher.register(Command.GATEWAY_PUSH, () -&gt; <span class="keyword">new</span> GatewayPushHandler(mPushServer.getPushCenter()));</span><br><span class="line">        messageDispatcher.register(Command.GATEWAY_KICK, () -&gt; <span class="keyword">new</span> GatewayKickUserHandler(mPushServer.getRouterCenter()));</span><br><span class="line">        channelHandler.setMulticastAddress(Utils.getInetAddress(CC.mp.net.gateway_server_multicast));</span><br><span class="line">        channelHandler.setNetworkInterface(Utils.getLocalNetworkInterface());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initOptions</span><span class="params">(Bootstrap b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initOptions(b);</span><br><span class="line">        b.option(ChannelOption.IP_MULTICAST_LOOP_DISABLED, <span class="keyword">true</span>);<span class="comment">//默认情况下，当本机发送组播数据到某个网络接口时，在IP层，数据会回送到本地的回环接口，选项IP_MULTICAST_LOOP用于控制数据是否回送到本地的回环接口</span></span><br><span class="line">        b.option(ChannelOption.IP_MULTICAST_TTL, <span class="number">255</span>);<span class="comment">//选项IP_MULTICAST_TTL允许设置超时TTL，范围为0～255之间的任何值</span></span><br><span class="line">        <span class="comment">//b.option(ChannelOption.IP_MULTICAST_IF, null);//选项IP_MULTICAST_IF用于设置组播的默认网络接口，会从给定的网络接口发送，另一个网络接口会忽略此数据,参数addr是希望多播输出接口的IP地址，使用INADDR_ANY地址回送到默认接口。</span></span><br><span class="line">        <span class="comment">//b.option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(32 * 1024, 1024 * 1024));</span></span><br><span class="line">        <span class="keyword">if</span> (snd_buf.gateway_server &gt; <span class="number">0</span>) b.option(ChannelOption.SO_SNDBUF, snd_buf.gateway_server);</span><br><span class="line">        <span class="keyword">if</span> (rcv_buf.gateway_server &gt; <span class="number">0</span>) b.option(ChannelOption.SO_RCVBUF, rcv_buf.gateway_server);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">getChannelHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channelHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channelHandler.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageDispatcher <span class="title">getMessageDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>广播消息处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UDPChannelHandler.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NettyConnection connection = <span class="keyword">new</span> NettyConnection();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PacketReceiver receiver;</span><br><span class="line">    <span class="keyword">private</span> InetAddress multicastAddress;</span><br><span class="line">    <span class="keyword">private</span> NetworkInterface networkInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UDPChannelHandler</span><span class="params">(PacketReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        connection.init(ctx.channel(), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (multicastAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ((DatagramChannel) ctx.channel()).joinGroup(multicastAddress, networkInterface, <span class="keyword">null</span>).addListener(future -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                    LOGGER.info(<span class="string">"join multicast group success, channel=&#123;&#125;, group=&#123;&#125;"</span>, ctx.channel(), multicastAddress);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"join multicast group error, channel=&#123;&#125;, group=&#123;&#125;"</span>, ctx.channel(), multicastAddress, future.cause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"init udp channel=&#123;&#125;"</span>, ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        connection.close();</span><br><span class="line">        <span class="keyword">if</span> (multicastAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ((DatagramChannel) ctx.channel()).leaveGroup(multicastAddress, networkInterface, <span class="keyword">null</span>).addListener(future -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                    LOGGER.info(<span class="string">"leave multicast group success, channel=&#123;&#125;, group=&#123;&#125;"</span>, ctx.channel(), multicastAddress);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    LOGGER.error(<span class="string">"leave multicast group error, channel=&#123;&#125;, group=&#123;&#125;"</span>, ctx.channel(), multicastAddress, future.cause());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        LOGGER.info(<span class="string">"disconnect udp channel=&#123;&#125;, connection=&#123;&#125;"</span>, ctx.channel(), connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DatagramPacket datagramPacket = (DatagramPacket) msg;</span><br><span class="line">        Packet packet = PacketDecoder.decodeFrame(datagramPacket);</span><br><span class="line">        receiver.onReceive(packet, connection);</span><br><span class="line">        datagramPacket.release();<span class="comment">//最后一个使用方要释放引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        connection.close();</span><br><span class="line">        LOGGER.error(<span class="string">"udp handler caught an exception, channel=&#123;&#125;, conn=&#123;&#125;"</span>, ctx.channel(), connection, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UDPChannelHandler <span class="title">setMulticastAddress</span><span class="params">(InetAddress multicastAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!multicastAddress.isMulticastAddress()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(multicastAddress + <span class="string">"not a multicastAddress"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.multicastAddress = multicastAddress;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UDPChannelHandler <span class="title">setNetworkInterface</span><span class="params">(NetworkInterface networkInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.networkInterface = networkInterface;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> UDP网关服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接收客户端消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/websocket%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/websocket%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>websocket服务，接收客户端的消息种类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebsocketServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.HANDSHAKE, () -&gt; <span class="keyword">new</span> HandshakeHandler(mPushServer));</span><br><span class="line">messageDispatcher.register(Command.BIND, () -&gt; <span class="keyword">new</span> BindUserHandler(mPushServer));</span><br><span class="line">messageDispatcher.register(Command.UNBIND, () -&gt; <span class="keyword">new</span> BindUserHandler(mPushServer));</span><br><span class="line">messageDispatcher.register(Command.PUSH, PushHandlerFactory::create);</span><br><span class="line">messageDispatcher.register(Command.ACK, () -&gt; <span class="keyword">new</span> AckHandler(mPushServer));</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebsocketServer</span> <span class="keyword">extends</span> <span class="title">NettyTCPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ChannelHandler channelHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageDispatcher messageDispatcher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConnectionManager connectionManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MPushServer mPushServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebsocketServer</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(CC.mp.net.ws_server_port);</span><br><span class="line">        <span class="keyword">this</span>.mPushServer = mPushServer;</span><br><span class="line">        <span class="keyword">this</span>.messageDispatcher = <span class="keyword">new</span> MessageDispatcher();</span><br><span class="line">        <span class="keyword">this</span>.connectionManager = <span class="keyword">new</span> ServerConnectionManager(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.channelHandler = <span class="keyword">new</span> WebSocketChannelHandler(connectionManager, messageDispatcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init();</span><br><span class="line">        connectionManager.init();</span><br><span class="line">        messageDispatcher.register(Command.HANDSHAKE, () -&gt; <span class="keyword">new</span> HandshakeHandler(mPushServer));</span><br><span class="line">        messageDispatcher.register(Command.BIND, () -&gt; <span class="keyword">new</span> BindUserHandler(mPushServer));</span><br><span class="line">        messageDispatcher.register(Command.UNBIND, () -&gt; <span class="keyword">new</span> BindUserHandler(mPushServer));</span><br><span class="line">        messageDispatcher.register(Command.PUSH, PushHandlerFactory::create);</span><br><span class="line">        messageDispatcher.register(Command.ACK, () -&gt; <span class="keyword">new</span> AckHandler(mPushServer));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(Listener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.stop(listener);</span><br><span class="line">        connectionManager.destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventLoopGroup <span class="title">getBossGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPushServer.getConnectionServer().getBossGroup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EventLoopGroup <span class="title">getWorkerGroup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPushServer.getConnectionServer().getWorkerGroup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initPipeline</span><span class="params">(ChannelPipeline pipeline)</span> </span>&#123;</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">65536</span>));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketServerCompressionHandler());</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(CC.mp.net.ws_path, <span class="keyword">null</span>, <span class="keyword">true</span>));</span><br><span class="line">        pipeline.addLast(<span class="keyword">new</span> WebSocketIndexPageHandler());</span><br><span class="line">        pipeline.addLast(getChannelHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initOptions</span><span class="params">(ServerBootstrap b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.initOptions(b);</span><br><span class="line">        b.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line">        b.childOption(ChannelOption.SO_SNDBUF, <span class="number">32</span> * <span class="number">1024</span>);</span><br><span class="line">        b.childOption(ChannelOption.SO_RCVBUF, <span class="number">32</span> * <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelHandler <span class="title">getChannelHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channelHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConnectionManager <span class="title">getConnectionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connectionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageDispatcher <span class="title">getMessageDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebSocketChannelHandler.java   处理socket消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketChannelHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">WebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(WebSocketChannelHandler.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConnectionManager connectionManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PacketReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebSocketChannelHandler</span><span class="params">(ConnectionManager connectionManager, PacketReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connectionManager = connectionManager;</span><br><span class="line">        <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//接收消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, WebSocketFrame frame)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (frame <span class="keyword">instanceof</span> TextWebSocketFrame) &#123;</span><br><span class="line">            String text = ((TextWebSocketFrame) frame).text();</span><br><span class="line">            Connection connection = connectionManager.get(ctx.channel());</span><br><span class="line">            Packet packet = PacketDecoder.decodeFrame(text);</span><br><span class="line">            LOGGER.debug(<span class="string">"channelRead conn=&#123;&#125;, packet=&#123;&#125;"</span>, ctx.channel(), connection.getSessionContext(), packet);</span><br><span class="line">            receiver.onReceive(packet, connection);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String message = <span class="string">"unsupported frame type: "</span> + frame.getClass().getName();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//连接异常</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = connectionManager.get(ctx.channel());</span><br><span class="line">        Logs.CONN.error(<span class="string">"client caught ex, conn=&#123;&#125;"</span>, connection);</span><br><span class="line">        LOGGER.error(<span class="string">"caught an ex, channel=&#123;&#125;, conn=&#123;&#125;"</span>, ctx.channel(), connection, cause);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logs.CONN.info(<span class="string">"client connected conn=&#123;&#125;"</span>, ctx.channel());</span><br><span class="line">        Connection connection = <span class="keyword">new</span> NettyConnection();</span><br><span class="line">        connection.init(ctx.channel(), <span class="keyword">false</span>);</span><br><span class="line">        connectionManager.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//断开连接</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = connectionManager.removeAndClose(ctx.channel());</span><br><span class="line">        EventBus.post(<span class="keyword">new</span> ConnectionCloseEvent(connection));</span><br><span class="line">        Logs.CONN.info(<span class="string">"client disconnected conn=&#123;&#125;"</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> websocket接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>admin server测试</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/admin%20server%E6%B5%8B%E8%AF%95/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/admin%20server%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>启动mpush服务<br>运行ServerTestMain#testServer()，控制台日志会打印如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>:<span class="number">47</span>:<span class="number">00.097</span> - [mp-admin-boss-<span class="number">6</span>-<span class="number">1</span>] INFO  - com.mpush.core.server.AdminServer - server start success on:<span class="number">3002</span></span><br></pre></td></tr></table></figure></p><p>telnet连接到mpush admin控制台<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ telnet <span class="number">172.16</span>.177.134 <span class="number">3002</span></span><br><span class="line">Trying <span class="number">172.16</span>.177.134...</span><br><span class="line">Connected to <span class="number">172.16</span>.177.134.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">Welcome to MPush Console [<span class="number">172.16</span>.177.134]!</span><br><span class="line">since <span class="number">2018</span>-<span class="number">12</span>-<span class="number">26</span>T11:<span class="number">47</span>:<span class="number">00.087</span> has running <span class="number">0</span>(h)</span><br><span class="line"></span><br><span class="line">It is Wed Dec <span class="number">26</span> <span class="number">11</span>:<span class="number">47</span>:<span class="number">29</span> CST <span class="number">2018</span> now.</span><br><span class="line"></span><br><span class="line">help</span><br><span class="line">Option                               Description</span><br><span class="line">------                               -----------</span><br><span class="line">help                                 show help</span><br><span class="line">quit                                 exit console mode</span><br><span class="line">shutdown                             stop mpush server</span><br><span class="line">restart                              restart mpush server</span><br><span class="line">zk:&lt;redis, cs ,gs&gt;                   query zk node</span><br><span class="line">count:&lt;conn, online&gt;                 count conn num or online user count</span><br><span class="line">route:&lt;uid&gt;                          show user route info</span><br><span class="line">push:&lt;uid&gt;, &lt;msg&gt;                    push test msg to client</span><br><span class="line">conf:[key]                           show config info</span><br><span class="line">monitor:[mxBean]                     show system monitor</span><br><span class="line">profile:&lt;<span class="number">1</span>,<span class="number">0</span>&gt;                        enable/disable profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">count conn</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line">push</span><br><span class="line">unsupported option</span><br><span class="line"></span><br><span class="line">route user01</span><br><span class="line">user [user01] offline now.</span><br><span class="line"></span><br><span class="line">profile <span class="number">1</span></span><br><span class="line">Profiler enabled</span><br><span class="line"></span><br><span class="line">quit</span><br><span class="line">have a good day!</span><br><span class="line"></span><br><span class="line">Connection closed by foreign host.</span><br><span class="line">➜  ~</span><br></pre></td></tr></table></figure></p><p>mpush 后台输出日志：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>:<span class="number">06</span>:<span class="number">33.915</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=help</span><br><span class="line"><span class="number">12</span>:<span class="number">06</span>:<span class="number">45.343</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=count conn</span><br><span class="line"><span class="number">12</span>:<span class="number">07</span>:<span class="number">23.878</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=push</span><br><span class="line"><span class="number">12</span>:<span class="number">08</span>:<span class="number">14.383</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=route user01</span><br><span class="line"><span class="number">12</span>:<span class="number">08</span>:<span class="number">35.749</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=profile <span class="number">1</span></span><br><span class="line"><span class="number">12</span>:<span class="number">10</span>:<span class="number">26.446</span> - [mp-admin-work-<span class="number">7</span>-<span class="number">1</span>] INFO  - com.mpush.core.handler.AdminHandler - receive admin command=quit</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 控制台服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-入口</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/1-%E5%85%A5%E5%8F%A3/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/1-%E5%85%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="1-入口.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><font color="red">1-入口</font></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-MPushServer初始化</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/2-MPushServer%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/2-MPushServer%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="2-MPushServer初始化.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><font color="red">2-MPushServer初始化</font></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接收MPNS 广播PUSH消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20%E5%B9%BF%E6%92%ADPUSH%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20%E5%B9%BF%E6%92%ADPUSH%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>GatewayUDPConnector服务，接收MPNS的消息种类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GatewayUDPConnector#init()</span></span><br><span class="line"><span class="comment">//PUSH消息</span></span><br><span class="line">messageDispatcher.register(Command.GATEWAY_PUSH, () -&gt; <span class="keyword">new</span> GatewayPushHandler(mPushServer.getPushCenter()));</span><br><span class="line"><span class="comment">//踢人消息</span></span><br><span class="line">messageDispatcher.register(Command.GATEWAY_KICK, () -&gt; <span class="keyword">new</span> GatewayKickUserHandler(mPushServer.getRouterCenter()));</span><br></pre></td></tr></table></figure></p><p>处理PUSH消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayPushHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">GatewayPushMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PushCenter pushCenter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayPushHandler</span><span class="params">(PushCenter pushCenter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pushCenter = pushCenter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayPushMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GatewayPushMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(GatewayPushMessage message)</span> </span>&#123;</span><br><span class="line">        pushCenter.push(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>消息处理，走的是 BroadcastPushTask 任务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PushCenter.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(IPushMessage message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.isBroadcast()) &#123;</span><br><span class="line">        FlowControl flowControl = (message.getTaskId() == <span class="keyword">null</span>)</span><br><span class="line">                ? <span class="keyword">new</span> FastFlowControl(limit, max, duration)</span><br><span class="line">                : <span class="keyword">new</span> RedisFlowControl(message.getTaskId(), max);</span><br><span class="line">        <span class="comment">//添加到自定义的PushTaskTimer线程池中执行该任务</span></span><br><span class="line">        addTask(<span class="keyword">new</span> BroadcastPushTask(mPushServer, message, flowControl));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//添加到GatewayUDPConnector的netty work 线程池中执行该任务</span></span><br><span class="line">        addTask(<span class="keyword">new</span> SingleUserPushTask(mPushServer, message, globalFlowControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义的PushTaskTimer线程池:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PushCenter.java</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doStart</span><span class="params">(Listener listener)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.pushListener = PushListenerFactory.create();</span><br><span class="line">    <span class="keyword">this</span>.pushListener.init(mPushServer);</span><br><span class="line">    <span class="keyword">if</span> (CC.mp.net.udpGateway() || CC.mp.thread.pool.push_task &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        executor = <span class="keyword">new</span> CustomJDKExecutor(mPushServer.getMonitor().getThreadPoolManager().getPushTaskTimer());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//实际情况使用EventLoo并没有更快，还有待测试</span></span><br><span class="line">        executor = <span class="keyword">new</span> NettyEventLoopExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    MBeanRegistry.getInstance().register(<span class="keyword">new</span> PushCenterBean(taskNum), <span class="keyword">null</span>);</span><br><span class="line">    ackTaskQueue.start();</span><br><span class="line">    logger.info(<span class="string">"push center start success"</span>);</span><br><span class="line">    listener.onSuccess();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDP 模式使用自定义线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomJDKExecutor</span> <span class="keyword">implements</span> <span class="title">PushTaskExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService executorService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CustomJDKExecutor</span><span class="params">(ScheduledExecutorService executorService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.executorService = executorService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(PushTask task)</span> </span>&#123;</span><br><span class="line">        executorService.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delayTask</span><span class="params">(<span class="keyword">long</span> delay, PushTask task)</span> </span>&#123;</span><br><span class="line">        executorService.schedule(task, delay, TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>线程池调度任务时，执行 run() 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BroadcastPushTask</span> <span class="keyword">implements</span> <span class="title">PushTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger finishTasks = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeLine timeLine = <span class="keyword">new</span> TimeLine();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; successUserIds = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FlowControl flowControl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IPushMessage message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition condition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MPushServer mPushServer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Iterator, 记录任务遍历到的位置，因为有流控，一次任务可能会被分批发送，而且还有在推送过程中上/下线的用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;String, Map&lt;Integer, LocalRouter&gt;&gt;&gt; iterator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BroadcastPushTask</span><span class="params">(MPushServer mPushServer, IPushMessage message, FlowControl flowControl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mPushServer = mPushServer;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        <span class="keyword">this</span>.flowControl = flowControl;</span><br><span class="line">        <span class="keyword">this</span>.condition = message.getCondition();</span><br><span class="line">        <span class="keyword">this</span>.iterator = mPushServer.getRouterCenter().getLocalRouterManager().routers().entrySet().iterator();</span><br><span class="line">        <span class="keyword">this</span>.timeLine.begin(<span class="string">"push-center-begin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flowControl.reset();</span><br><span class="line">        <span class="keyword">boolean</span> done = broadcast();</span><br><span class="line">        <span class="keyword">if</span> (done) &#123;<span class="comment">//done 广播结束</span></span><br><span class="line">            <span class="keyword">if</span> (finishTasks.addAndGet(flowControl.total()) == <span class="number">0</span>) &#123;</span><br><span class="line">                report();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//没有结束，就延时进行下次任务 TODO 考虑优先级问题</span></span><br><span class="line">            mPushServer.getPushCenter().delayTask(flowControl.getDelay(), <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        flowControl.end(successUserIds.toArray(<span class="keyword">new</span> String[successUserIds.size()]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">broadcast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            iterator.forEachRemaining(entry -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                String userId = entry.getKey();</span><br><span class="line">                entry.getValue().forEach((clientType, router) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                    Connection connection = router.getRouteValue();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (checkCondition(condition, connection)) &#123;<span class="comment">//1.条件检测</span></span><br><span class="line">                        <span class="keyword">if</span> (connection.isConnected()) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (connection.getChannel().isWritable()) &#123; <span class="comment">//检测TCP缓冲区是否已满且写队列超过最高阀值</span></span><br><span class="line">                                PushMessage</span><br><span class="line">                                        .build(connection)</span><br><span class="line">                                        .setContent(message.getContent())</span><br><span class="line">                                        .send(future -&gt; operationComplete(future, userId));</span><br><span class="line">                                <span class="comment">//4. 检测qps, 是否超过流控限制，如果超过则结束当前循环直接进入catch</span></span><br><span class="line">                                <span class="keyword">if</span> (!flowControl.checkQps()) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> OverFlowException(<span class="keyword">false</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">//2.如果链接失效，先删除本地失效的路由，再查下远程路由，看用户是否登陆到其他机器</span></span><br><span class="line">                            Logs.PUSH.warn(<span class="string">"[Broadcast] find router in local but conn disconnect, message=&#123;&#125;, conn=&#123;&#125;"</span>, message, connection);</span><br><span class="line">                            <span class="comment">//删除已经失效的本地路由</span></span><br><span class="line">                            mPushServer.getRouterCenter().getLocalRouterManager().unRegister(userId, clientType);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OverFlowException e) &#123;</span><br><span class="line">            <span class="comment">//超出最大限制，或者遍历完毕，结束广播</span></span><br><span class="line">            <span class="keyword">return</span> e.isOverMaxLimit() || !iterator.hasNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !iterator.hasNext();<span class="comment">//遍历完毕, 广播结束</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Logs.PUSH.info(<span class="string">"[Broadcast] task finished, cost=&#123;&#125;, message=&#123;&#125;"</span>, (System.currentTimeMillis() - begin), message);</span><br><span class="line">        mPushServer.getPushCenter().getPushListener().onBroadcastComplete(message, timeLine.end().getTimePoints());<span class="comment">//通知发送方，广播推送完毕</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkCondition</span><span class="params">(Condition condition, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (condition == AwaysPassCondition.I) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        SessionContext sessionContext = connection.getSessionContext();</span><br><span class="line">        Map&lt;String, Object&gt; env = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        env.put(<span class="string">"userId"</span>, sessionContext.userId);</span><br><span class="line">        env.put(<span class="string">"tags"</span>, sessionContext.tags);</span><br><span class="line">        env.put(<span class="string">"clientVersion"</span>, sessionContext.clientVersion);</span><br><span class="line">        env.put(<span class="string">"osName"</span>, sessionContext.osName);</span><br><span class="line">        env.put(<span class="string">"osVersion"</span>, sessionContext.osVersion);</span><br><span class="line">        <span class="keyword">return</span> condition.test(env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future, String userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;<span class="comment">//推送成功</span></span><br><span class="line">            successUserIds.add(userId);</span><br><span class="line">            Logs.PUSH.info(<span class="string">"[Broadcast] push message to client success, userId=&#123;&#125;, message=&#123;&#125;"</span>, message.getUserId(), message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//推送失败</span></span><br><span class="line">            Logs.PUSH.warn(<span class="string">"[Broadcast] push message to client failure, userId=&#123;&#125;, message=&#123;&#125;, conn=&#123;&#125;"</span>, message.getUserId(), message, future.channel());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (finishTasks.decrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">            report();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledExecutorService <span class="title">getExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((Message) message).getConnection().getChannel().eventLoop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> UDP网关服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-1-缓存模块</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-1-%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-1-%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-1-缓存模块.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><font color="red">3-初始化和启动-1-缓存模块</font></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-10-HTTP和DNS服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-10-HTTP%E5%92%8CDNS%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-10-HTTP%E5%92%8CDNS%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-10-HTTP和DNS服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><font color="red">3-初始化和启动-10-HTTP和DNS服务</font></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdminHandler处理命令</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/AdminHandler%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/AdminHandler%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>1、注册命令处理器<br>2、建立连接，打印欢迎画面<br>3、接收命令，执行命令处理器  </p><h1 id="注册命令处理器"><a href="#注册命令处理器" class="headerlink" title="注册命令处理器"></a>注册命令处理器</h1><p>初始化AdminHandler时，调用init()注册所有的命令处理器到内存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, OptionHandler&gt; optionHandlers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AdminHandler</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mPushServer = mPushServer;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    register(<span class="string">"help"</span>, (ctx, args) -&gt;</span><br><span class="line">            <span class="string">"Option                               Description"</span> + EOL +</span><br><span class="line">                    <span class="string">"------                               -----------"</span> + EOL +</span><br><span class="line">                    <span class="string">"help                                 show help"</span> + EOL +</span><br><span class="line">                    <span class="string">"quit                                 exit console mode"</span> + EOL +</span><br><span class="line">                    <span class="string">"shutdown                             stop mpush server"</span> + EOL +</span><br><span class="line">                    <span class="string">"restart                              restart mpush server"</span> + EOL +</span><br><span class="line">                    <span class="string">"zk:&lt;redis, cs ,gs&gt;                   query zk node"</span> + EOL +</span><br><span class="line">                    <span class="string">"count:&lt;conn, online&gt;                 count conn num or online user count"</span> + EOL +</span><br><span class="line">                    <span class="string">"route:&lt;uid&gt;                          show user route info"</span> + EOL +</span><br><span class="line">                    <span class="string">"push:&lt;uid&gt;, &lt;msg&gt;                    push test msg to client"</span> + EOL +</span><br><span class="line">                    <span class="string">"conf:[key]                           show config info"</span> + EOL +</span><br><span class="line">                    <span class="string">"monitor:[mxBean]                     show system monitor"</span> + EOL +</span><br><span class="line">                    <span class="string">"profile:&lt;1,0&gt;                        enable/disable profile"</span> + EOL</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"quit"</span>, (ctx, args) -&gt; <span class="string">"have a good day!"</span>);</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"shutdown"</span>, (ctx, args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.exit(<span class="number">0</span>)).start();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"try close connect server..."</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"count"</span>, (ctx, args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">switch</span> (args) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"conn"</span>:</span><br><span class="line">                <span class="keyword">return</span> mPushServer.getConnectionServer().getConnectionManager().getConnNum();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"online"</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> mPushServer.getRouterCenter().getUserEventConsumer().getUserManager().getOnlineUserNum();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"["</span> + args + <span class="string">"] unsupported, try help."</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"route"</span>, (ctx, args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (Strings.isNullOrEmpty(args)) <span class="keyword">return</span> <span class="string">"please input userId"</span>;</span><br><span class="line">        Set&lt;RemoteRouter&gt; routers = mPushServer.getRouterCenter().getRemoteRouterManager().lookupAll(args);</span><br><span class="line">        <span class="keyword">if</span> (routers.isEmpty()) <span class="keyword">return</span> <span class="string">"user ["</span> + args + <span class="string">"] offline now."</span>;</span><br><span class="line">        <span class="keyword">return</span> Jsons.toJson(routers);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"conf"</span>, (ctx, args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (Strings.isNullOrEmpty(args)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CC.cfg.root().render(ConfigRenderOptions.concise().setFormatted(<span class="keyword">true</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (CC.cfg.hasPath(args)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CC.cfg.getAnyRef(args).toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"key ["</span> + args + <span class="string">"] not find in config"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    register(<span class="string">"profile"</span>, (ctx, args) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="keyword">null</span> || <span class="string">"0"</span>.equals(args)) &#123;</span><br><span class="line">            Profiler.enable(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Profiler disabled"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Profiler.enable(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Profiler enabled"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String option, OptionHandler handler)</span> </span>&#123;</span><br><span class="line">    optionHandlers.put(option, handler);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">handle</span><span class="params">(ChannelHandlerContext ctx, String args)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="建立连接，打印欢迎画面"><a href="#建立连接，打印欢迎画面" class="headerlink" title="建立连接，打印欢迎画面"></a>建立连接，打印欢迎画面</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ctx.write(<span class="string">"Welcome to MPush Console ["</span> + ConfigTools.getLocalIp() + <span class="string">"]!"</span> + EOL);</span><br><span class="line">    ctx.write(<span class="string">"since "</span> + startTime + <span class="string">" has running "</span> + startTime.until(LocalDateTime.now(), ChronoUnit.HOURS) + <span class="string">"(h)"</span> + EOL + EOL);</span><br><span class="line">    ctx.write(<span class="string">"It is "</span> + <span class="keyword">new</span> Date() + <span class="string">" now."</span> + EOL + EOL);</span><br><span class="line">    ctx.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ telnet <span class="number">172.16</span>.177.134 <span class="number">3002</span></span><br><span class="line">Trying <span class="number">172.16</span>.177.134...</span><br><span class="line">Connected to <span class="number">172.16</span>.177.134.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">Welcome to MPush Console [<span class="number">172.16</span>.177.134]!</span><br><span class="line">since <span class="number">2018</span>-<span class="number">12</span>-<span class="number">26</span>T11:<span class="number">47</span>:<span class="number">00.087</span> has running <span class="number">0</span>(h)</span><br><span class="line"></span><br><span class="line">It is Wed Dec <span class="number">26</span> <span class="number">11</span>:<span class="number">47</span>:<span class="number">29</span> CST <span class="number">2018</span> now.</span><br></pre></td></tr></table></figure><h1 id="接收命令，执行命令处理器"><a href="#接收命令，执行命令处理器" class="headerlink" title="接收命令，执行命令处理器"></a>接收命令，执行命令处理器</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当读取到消息时，Netty触发channelRead()</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, String request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String option = <span class="string">"help"</span>;</span><br><span class="line">    String arg = <span class="keyword">null</span>;</span><br><span class="line">    String[] args = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Strings.isNullOrEmpty(request)) &#123;</span><br><span class="line">        String[] cmd_args = request.split(<span class="string">" "</span>);</span><br><span class="line">        option = cmd_args[<span class="number">0</span>].trim().toLowerCase();</span><br><span class="line">        <span class="keyword">if</span> (cmd_args.length == <span class="number">2</span>) &#123;</span><br><span class="line">            arg = cmd_args[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd_args.length &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            args = Arrays.copyOfRange(cmd_args, <span class="number">1</span>, cmd_args.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//接收命令，并处理</span></span><br><span class="line">        Object result = optionHandlers.getOrDefault(option, unsupported_handler).handle(ctx, arg);</span><br><span class="line">        <span class="comment">//将处理结果输出到控制台</span></span><br><span class="line">        ChannelFuture future = ctx.writeAndFlush(result + EOL + EOL);</span><br><span class="line">        <span class="comment">//如果当前操作命令是quit，则监听CLOSE事件，做关闭连接处理</span></span><br><span class="line">        <span class="keyword">if</span> (option.equals(<span class="string">"quit"</span>)) &#123;</span><br><span class="line">            future.addListener(ChannelFutureListener.CLOSE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        ctx.writeAndFlush(throwable.getLocalizedMessage() + EOL + EOL);</span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter(<span class="number">1024</span>);</span><br><span class="line">        throwable.printStackTrace(<span class="keyword">new</span> PrintWriter(writer));</span><br><span class="line">        ctx.writeAndFlush(writer.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    LOGGER.info(<span class="string">"receive admin command=&#123;&#125;"</span>, request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在通道读取完成后会在这个方法里通知，对应可以做刷新操作 ctx.flush()</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ctx.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 控制台服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-2-服务注册与发现模块</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-2-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A8%A1%E5%9D%97/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-2-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-2-服务注册与发现模块.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><font color="red">3-初始化和启动-2-服务注册与发现模块</font></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-11-监控服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-11-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-11-%E7%9B%91%E6%8E%A7%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-11-监控服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><font color="red">3-初始化和启动-11-监控服务</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-3-接入服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-3-%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-3-%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-3-接入服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><font color="red">3-初始化和启动-3-接入服务</font></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-6-TCP网关服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-6-TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-6-TCP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-6-TCP网关服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><font color="red">3-初始化和启动-6-TCP网关服务</font></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-5-UDP网关服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-5-UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-5-UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-5-UDP网关服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><font color="red">3-初始化和启动-5-UDP网关服务</font></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RemoteRouterManager 远程路由管理器</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/RemoteRouterManager%20%E8%BF%9C%E7%A8%8B%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/RemoteRouterManager%20%E8%BF%9C%E7%A8%8B%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>1、通过SPI，找到mpush-cache模块中CacheManagerFactory接口的实现类RedisCacheManagerFactory，得到RedisManager实例；<br>2、远程路由信息的添加、删除、获取；<br>3、订阅连接关闭事件ConnectionCloseEvent，将远程路由信息修改为离线(connId=null)；  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteRouterManager</span> <span class="keyword">extends</span> <span class="title">EventConsumer</span> <span class="keyword">implements</span> <span class="title">RouterManager</span>&lt;<span class="title">RemoteRouter</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RemoteRouterManager.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheManager cacheManager = CacheManagerFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteRouter <span class="title">register</span><span class="params">(String userId, RemoteRouter router)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getUserRouteKey(userId);</span><br><span class="line">        String field = Integer.toString(router.getRouteValue().getClientType());</span><br><span class="line">        ClientLocation old = cacheManager.hget(key, field, ClientLocation.class);</span><br><span class="line">        cacheManager.hset(key, field, router.getRouteValue().toJson());</span><br><span class="line">        LOGGER.info(<span class="string">"register remote router success userId=&#123;&#125;, newRouter=&#123;&#125;, oldRoute=&#123;&#125;"</span>, userId, router, old);</span><br><span class="line">        <span class="keyword">return</span> old == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> RemoteRouter(old);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目前的实现方式是非原子操作(get:set)，可能会有并发问题，虽然概率很低</span></span><br><span class="line"><span class="comment">     * 后续考虑采用lua脚本，实现原子操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId     用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clientType 客户端类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除路由是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unRegister</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getUserRouteKey(userId);</span><br><span class="line">        String field = Integer.toString(clientType);</span><br><span class="line">        ClientLocation location = cacheManager.hget(key, field, ClientLocation.class);</span><br><span class="line">        <span class="keyword">if</span> (location == <span class="keyword">null</span> || location.isOffline()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        cacheManager.hset(key, field, location.offline().toJson());</span><br><span class="line">        LOGGER.info(<span class="string">"unRegister remote router success userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, location);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;RemoteRouter&gt; <span class="title">lookupAll</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getUserRouteKey(userId);</span><br><span class="line">        Map&lt;String, ClientLocation&gt; values = cacheManager.hgetAll(key, ClientLocation.class);</span><br><span class="line">        <span class="keyword">if</span> (values == <span class="keyword">null</span> || values.isEmpty()) <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        <span class="keyword">return</span> values.values().stream().map(RemoteRouter::<span class="keyword">new</span>).collect(Collectors.toSet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteRouter <span class="title">lookup</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getUserRouteKey(userId);</span><br><span class="line">        String field = Integer.toString(clientType);</span><br><span class="line">        ClientLocation location = cacheManager.hget(key, field, ClientLocation.class);</span><br><span class="line">        LOGGER.info(<span class="string">"lookup remote router userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, location);</span><br><span class="line">        <span class="keyword">return</span> location == <span class="keyword">null</span> ? <span class="keyword">null</span> : <span class="keyword">new</span> RemoteRouter(location);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听链接关闭事件，清理失效的路由</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@AllowConcurrentEvents</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(ConnectionCloseEvent event)</span> </span>&#123;</span><br><span class="line">        Connection connection = event.connection;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        SessionContext context = connection.getSessionContext();</span><br><span class="line">        String userId = context.userId;</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        String key = CacheKeys.getUserRouteKey(userId);</span><br><span class="line">        String field = Integer.toString(context.getClientType());</span><br><span class="line">        ClientLocation location = cacheManager.hget(key, field, ClientLocation.class);</span><br><span class="line">        <span class="keyword">if</span> (location == <span class="keyword">null</span> || location.isOffline()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        String connId = connection.getId();</span><br><span class="line">        <span class="comment">//2.检测下，是否是同一个链接, 如果客户端重连，老的路由会被新的链接覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (connId.equals(location.getConnId())) &#123;</span><br><span class="line">            cacheManager.hset(key, field, location.offline().toJson());</span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected remote route, userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, location);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected remote route, not clean:userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, location);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RemoteRouter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteRouter</span> <span class="keyword">implements</span> <span class="title">Router</span>&lt;<span class="title">ClientLocation</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClientLocation clientLocation;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteRouter</span><span class="params">(ClientLocation clientLocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clientLocation = clientLocation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOnline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientLocation.isOnline();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOffline</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientLocation.isOffline();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientLocation <span class="title">getRouteValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientLocation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterType <span class="title">getRouteType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterType.REMOTE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"RemoteRouter&#123;"</span> + clientLocation + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LocalRouterManager 本地路由管理器</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/LocalRouterManager%20%E6%9C%AC%E5%9C%B0%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/LocalRouterManager%20%E6%9C%AC%E5%9C%B0%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>1、本地路由信息的添加、删除、获取；<br>2、订阅连接关闭事件ConnectionCloseEvent，删除本地路由，发布离线事件UserOfflineEvent；  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.core.router;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.AllowConcurrentEvents;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.Subscribe;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.connection.Connection;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.connection.SessionContext;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.event.ConnectionCloseEvent;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.event.UserOfflineEvent;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.router.RouterManager;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.event.EventBus;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.event.EventConsumer;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2015/12/23.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalRouterManager</span> <span class="keyword">extends</span> <span class="title">EventConsumer</span> <span class="keyword">implements</span> <span class="title">RouterManager</span>&lt;<span class="title">LocalRouter</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LocalRouterManager.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, LocalRouter&gt; EMPTY = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本地路由表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Map&lt;Integer, LocalRouter&gt;&gt; routers = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加本地路由</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalRouter <span class="title">register</span><span class="params">(String userId, LocalRouter router)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"register local router success userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> routers.computeIfAbsent(userId, s -&gt; <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">1</span>)).put(router.getClientType(), router);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除本地路由</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unRegister</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        LocalRouter router = routers.getOrDefault(userId, EMPTY).remove(clientType);</span><br><span class="line">        LOGGER.info(<span class="string">"unRegister local router success userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找所有本地路由</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;LocalRouter&gt; <span class="title">lookupAll</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(routers.getOrDefault(userId, EMPTY).values());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查找userId和clientType对应的本地路由</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalRouter <span class="title">lookup</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        LocalRouter router = routers.getOrDefault(userId, EMPTY).get(clientType);</span><br><span class="line">        LOGGER.info(<span class="string">"lookup local router userId=&#123;&#125;, router=&#123;&#125;"</span>, userId, router);</span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回本地路由表</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Map&lt;Integer, LocalRouter&gt;&gt; routers() &#123;</span><br><span class="line">        <span class="keyword">return</span> routers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听链接关闭事件，清理失效的路由</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@AllowConcurrentEvents</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(ConnectionCloseEvent event)</span> </span>&#123;</span><br><span class="line">        Connection connection = event.connection;</span><br><span class="line">        <span class="keyword">if</span> (connection == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        SessionContext context = connection.getSessionContext();</span><br><span class="line"></span><br><span class="line">        String userId = context.userId;</span><br><span class="line">        <span class="keyword">if</span> (userId == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> clientType = context.getClientType();</span><br><span class="line">        <span class="comment">//获取userId和clientType对应的本地路由</span></span><br><span class="line">        LocalRouter localRouter = routers.getOrDefault(userId, EMPTY).get(clientType);</span><br><span class="line">        <span class="keyword">if</span> (localRouter == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        String connId = connection.getId();</span><br><span class="line">        <span class="comment">//2.检测下，是否是同一个链接, 如果客户端重连，老的路由会被新的链接覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (connId.equals(localRouter.getRouteValue().getId())) &#123;</span><br><span class="line">            <span class="comment">//3. 删除路由</span></span><br><span class="line">            routers.getOrDefault(userId, EMPTY).remove(clientType);</span><br><span class="line">            <span class="comment">//4. 发送用户下线事件, 只有老的路由存在的情况下才发送，因为有可能又用户重连了，而老的链接又是在新连接之后才断开的</span></span><br><span class="line">            <span class="comment">//这个时候就会有问题，会导致用户变成下线状态，实际用户应该是在线的。</span></span><br><span class="line">            EventBus.post(<span class="keyword">new</span> UserOfflineEvent(event.connection, userId));</span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected local route, userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, localRouter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不相等，则log一下</span></span><br><span class="line">            LOGGER.info(<span class="string">"clean disconnected local route, not clean:userId=&#123;&#125;, route=&#123;&#125;"</span>, userId, localRouter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LocalRouter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.core.router;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mpush.api.connection.Connection;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.router.Router;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2015/12/23.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalRouter</span> <span class="keyword">implements</span> <span class="title">Router</span>&lt;<span class="title">Connection</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Connection connection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LocalRouter</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connection = connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClientType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connection.getSessionContext().getClientType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getRouteValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterType <span class="title">getRouteType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RouterType.LOCAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        LocalRouter that = (LocalRouter) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getClientType() == that.getClientType();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.hashCode(getClientType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"LocalRouter&#123;"</span> + connection + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-4-websocket接入服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-4-websocket%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-4-websocket%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-4-websocket接入服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><font color="red">3-初始化和启动-4-websocket接入服务</font></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RouterChangeListener路由变更监听</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/RouterChangeListener%E8%B7%AF%E7%94%B1%E5%8F%98%E6%9B%B4%E7%9B%91%E5%90%AC/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/RouterChangeListener%E8%B7%AF%E7%94%B1%E5%8F%98%E6%9B%B4%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="RouterChangeListener路由变更监听.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-7-控制台服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-7-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-7-%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-7-控制台服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><font color="red">3-初始化和启动-7-控制台服务</font></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-9-推送中心</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-9-%E6%8E%A8%E9%80%81%E4%B8%AD%E5%BF%83/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-9-%E6%8E%A8%E9%80%81%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-9-推送中心.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><a href="../3-初始化和启动-8-路由服务">3-初始化和启动-8-路由服务</a></li><li><font color="red">3-初始化和启动-9-推送中心</font></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>路由中心启动和初始化</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83%E5%90%AF%E5%8A%A8%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83%E5%90%AF%E5%8A%A8%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="路由中心启动和初始化.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-初始化和启动-8-路由服务</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-8-%E8%B7%AF%E7%94%B1%E6%9C%8D%E5%8A%A1/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8-%E5%88%9D%E5%A7%8B%E5%8C%96/3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8-8-%E8%B7%AF%E7%94%B1%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-初始化和启动-8-路由服务.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>服务启动-初始化文章目录:</p><ul><li><a href="../1-入口">1-入口</a></li><li><a href="../2-MPushServer初始化">2-MPushServer初始化</a></li><li><a href="../3-初始化和启动-1-缓存模块">3-初始化和启动-1-缓存模块</a></li><li><a href="../3-初始化和启动-2-服务注册与发现模块">3-初始化和启动-2-服务注册与发现模块</a></li><li><a href="../3-初始化和启动-3-接入服务">3-初始化和启动-3-接入服务</a></li><li><a href="../3-初始化和启动-4-websocket接入服务">3-初始化和启动-4-websocket接入服务</a></li><li><a href="../3-初始化和启动-5-UDP网关服务">3-初始化和启动-5-UDP网关服务</a></li><li><a href="../3-初始化和启动-6-TCP网关服务">3-初始化和启动-6-TCP网关服务</a></li><li><a href="../3-初始化和启动-7-控制台服务">3-初始化和启动-7-控制台服务</a></li><li><font color="red">3-初始化和启动-8-路由服务</font></li><li><a href="../3-初始化和启动-9-推送中心">3-初始化和启动-9-推送中心</a></li><li><a href="../3-初始化和启动-10-HTTP和DNS服务">3-初始化和启动-10-HTTP和DNS服务</a></li><li><a href="../3-初始化和启动-11-监控服务">3-初始化和启动-11-监控服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 服务启动-初始化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户路由信息注册</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/%E7%94%A8%E6%88%B7%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E6%B3%A8%E5%86%8C/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/%E7%94%A8%E6%88%B7%E8%B7%AF%E7%94%B1%E4%BF%A1%E6%81%AF%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>BindUserHandler#bind()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.如果握手成功，就把用户链接信息注册到路由中心，本地和远程各一份</span></span><br><span class="line">success = routerCenter.register(message.userId, message.getConnection());</span><br><span class="line"><span class="comment">//3.注册失败再处理下，防止本地注册成功，远程注册失败的情况，只有都成功了才叫成功</span></span><br><span class="line">routerCenter.unRegister(message.userId, context.getClientType());</span><br></pre></td></tr></table></figure></p><p>RouterCenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//路由注册（本地、远程）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">register</span><span class="params">(String userId, Connection connection)</span> </span>&#123;</span><br><span class="line">    ClientLocation location = ClientLocation</span><br><span class="line">            .from(connection)</span><br><span class="line">            .setHost(mPushServer.getGatewayServerNode().getHost())</span><br><span class="line">            .setPort(mPushServer.getGatewayServerNode().getPort());</span><br><span class="line"></span><br><span class="line">    LocalRouter localRouter = <span class="keyword">new</span> LocalRouter(connection);</span><br><span class="line">    RemoteRouter remoteRouter = <span class="keyword">new</span> RemoteRouter(location);</span><br><span class="line"></span><br><span class="line">    LocalRouter oldLocalRouter = <span class="keyword">null</span>;</span><br><span class="line">    RemoteRouter oldRemoteRouter = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        oldLocalRouter = localRouterManager.register(userId, localRouter);</span><br><span class="line">        oldRemoteRouter = remoteRouterManager.register(userId, remoteRouter);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">"register router ex, userId=&#123;&#125;, connection=&#123;&#125;"</span>, userId, connection, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果本地路由已经存在，则通过事件，发送踢人消息给客户端，由客户端发出解绑消息unbind</span></span><br><span class="line">    <span class="keyword">if</span> (oldLocalRouter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        EventBus.post(<span class="keyword">new</span> RouterChangeEvent(userId, oldLocalRouter));</span><br><span class="line">        LOGGER.info(<span class="string">"register router success, find old local router=&#123;&#125;, userId=&#123;&#125;"</span>, oldLocalRouter, userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果远程路由已经存在，并且是在线状态，则通过事件，发送踢人消息给客户端，由客户端发出解绑消息unbind</span></span><br><span class="line">    <span class="keyword">if</span> (oldRemoteRouter != <span class="keyword">null</span> &amp;&amp; oldRemoteRouter.isOnline()) &#123;</span><br><span class="line">        EventBus.post(<span class="keyword">new</span> RouterChangeEvent(userId, oldRemoteRouter));</span><br><span class="line">        LOGGER.info(<span class="string">"register router success, find old remote router=&#123;&#125;, userId=&#123;&#125;"</span>, oldRemoteRouter, userId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除路由（本地路由、远程路由）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unRegister</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">    localRouterManager.unRegister(userId, clientType);</span><br><span class="line">    remoteRouterManager.unRegister(userId, clientType);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RouterChangeListener.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span></span><br><span class="line"><span class="meta">@AllowConcurrentEvents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(RouterChangeEvent event)</span> </span>&#123;</span><br><span class="line">    String userId = event.userId;</span><br><span class="line">    Router&lt;?&gt; r = event.router;</span><br><span class="line">    <span class="keyword">if</span> (r.getRouteType().equals(Router.RouterType.LOCAL)) &#123;</span><br><span class="line">        <span class="comment">//发送踢人消息到客户端</span></span><br><span class="line">        sendKickUserMessage2Client(userId, (LocalRouter) r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//广播踢人消息到消息中心（MQ）</span></span><br><span class="line">        <span class="comment">//所有机器订阅MQ消息，如果当前机器不是目标机器，直接忽略，</span></span><br><span class="line">        <span class="comment">//否则查询本地路由，找到要被踢下线的链接，发送踢人消息到客户端</span></span><br><span class="line">        sendKickUserMessage2MQ(userId, (RemoteRouter) r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-心跳 HEARTBEAT</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/1-%E5%BF%83%E8%B7%B3%20HEARTBEAT/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/1-%E5%BF%83%E8%B7%B3%20HEARTBEAT/</url>
      
        <content type="html"><![CDATA[<p>接收消息，解码协议、解码body内容，<code>站内搜索文章: 编码解码</code></p><p>客户端发送心跳：<br>场景一：  </p><blockquote><p>当与服务端建立连接时(ConnClientChannelHandler#channelActive)，发送握手或者快速连接请求；<br>在接收到握手或者快速连接响应时(ConnClientChannelHandler#channelRead)，发送心跳请求；  </p></blockquote><p>场景二：  </p><blockquote><p>当网络断开时不主动关闭连接，而是尝试发送一次心跳检测，如果能收到响应，说明网络短时间内又恢复了，否则就断开连接，等待网络恢复并重建连接。<br>见mpush-client-java工程 MPushClient#onNetStateChange()方法；</p></blockquote><p>服务端接收处理心跳：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectionServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.HEARTBEAT, HeartBeatHandler::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatHandler</span> <span class="keyword">implements</span> <span class="title">MessageHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        connection.send(packet);<span class="comment">//ping -&gt; pong</span></span><br><span class="line">        Logs.HB.info(<span class="string">"ping -&gt; pong, &#123;&#125;"</span>, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>接入服务文章目录:</p><ul><li><font color="red">1-心跳 HEARTBEAT</font></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-握手 HANDSHAKE</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/2-%E6%8F%A1%E6%89%8B%20HANDSHAKE/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/2-%E6%8F%A1%E6%89%8B%20HANDSHAKE/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectionServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.HANDSHAKE, () -&gt; <span class="keyword">new</span> HandshakeHandler(mPushServer));</span><br></pre></td></tr></table></figure><p>接收到客户端的Handshake请求，根据SessionContext中是否设置是否启用加密，分2种处理请求：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HandshakeHandler.java</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HandshakeMessage message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.getConnection().getSessionContext().isSecurity()) &#123;</span><br><span class="line">        doSecurity(message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        doInsecurity(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启用加密的处理：<br>加解密的交互细节，<code>站内搜索文章：深度进阶-加解密</code><br>握手成功，生成session并保存到redis中，用于快速重连；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSecurity</span><span class="params">(HandshakeMessage message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] iv = message.iv;<span class="comment">//AES密钥向量16位</span></span><br><span class="line">    <span class="keyword">byte</span>[] clientKey = message.clientKey;<span class="comment">//客户端随机数16位</span></span><br><span class="line">    <span class="keyword">byte</span>[] serverKey = CipherBox.I.randomAESKey();<span class="comment">//服务端随机数16位</span></span><br><span class="line">    <span class="keyword">byte</span>[] sessionKey = CipherBox.I.mixKey(clientKey, serverKey);<span class="comment">//会话密钥16位</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.校验客户端消息字段</span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(message.deviceId)</span><br><span class="line">            || iv.length != CipherBox.I.getAesKeyLength()</span><br><span class="line">            || clientKey.length != CipherBox.I.getAesKeyLength()) &#123;</span><br><span class="line">        ErrorMessage.from(message).setReason(<span class="string">"Param invalid"</span>).close();</span><br><span class="line">        Logs.CONN.error(<span class="string">"handshake failure, message=&#123;&#125;, conn=&#123;&#125;"</span>, message, message.getConnection());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.重复握手判断</span></span><br><span class="line">    SessionContext context = message.getConnection().getSessionContext();</span><br><span class="line">    <span class="keyword">if</span> (message.deviceId.equals(context.deviceId)) &#123;</span><br><span class="line">        ErrorMessage.from(message).setErrorCode(REPEAT_HANDSHAKE).send();</span><br><span class="line">        Logs.CONN.warn(<span class="string">"handshake failure, repeat handshake, conn=&#123;&#125;"</span>, message.getConnection());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.更换会话密钥RSA=&gt;AES(clientKey)</span></span><br><span class="line">    context.changeCipher(<span class="keyword">new</span> AesCipher(clientKey, iv));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.生成可复用session, 用于快速重连</span></span><br><span class="line">    ReusableSession session = reusableSessionManager.genSession(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.计算心跳时间</span></span><br><span class="line">    <span class="keyword">int</span> heartbeat = ConfigTools.getHeartbeat(message.minHeartbeat, message.maxHeartbeat);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.响应握手成功消息</span></span><br><span class="line">    HandshakeOkMessage</span><br><span class="line">            .from(message)</span><br><span class="line">            .setServerKey(serverKey)</span><br><span class="line">            .setHeartbeat(heartbeat)</span><br><span class="line">            .setSessionId(session.sessionId)</span><br><span class="line">            .setExpireTime(session.expireTime)</span><br><span class="line">            .send(f -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f.isSuccess()) &#123;</span><br><span class="line">                            <span class="comment">//7.更换会话密钥AES(clientKey)=&gt;AES(sessionKey)</span></span><br><span class="line">                            context.changeCipher(<span class="keyword">new</span> AesCipher(sessionKey, iv));</span><br><span class="line">                            <span class="comment">//8.保存client信息到当前连接</span></span><br><span class="line">                            context.setOsName(message.osName)</span><br><span class="line">                                    .setOsVersion(message.osVersion)</span><br><span class="line">                                    .setClientVersion(message.clientVersion)</span><br><span class="line">                                    .setDeviceId(message.deviceId)</span><br><span class="line">                                    .setHeartbeat(heartbeat);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//9.保存可复用session到Redis, 用于快速重连</span></span><br><span class="line">                            reusableSessionManager.cacheSession(session);</span><br><span class="line"></span><br><span class="line">                            Logs.CONN.info(<span class="string">"handshake success, conn=&#123;&#125;"</span>, message.getConnection());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Logs.CONN.info(<span class="string">"handshake failure, conn=&#123;&#125;"</span>, message.getConnection(), f.cause());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没有启用加密的处理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doInsecurity</span><span class="params">(HandshakeMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.校验客户端消息字段</span></span><br><span class="line">        <span class="keyword">if</span> (Strings.isNullOrEmpty(message.deviceId)) &#123;</span><br><span class="line">            ErrorMessage.from(message).setReason(<span class="string">"Param invalid"</span>).close();</span><br><span class="line">            Logs.CONN.error(<span class="string">"handshake failure, message=&#123;&#125;, conn=&#123;&#125;"</span>, message, message.getConnection());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.重复握手判断</span></span><br><span class="line">        SessionContext context = message.getConnection().getSessionContext();</span><br><span class="line">        <span class="keyword">if</span> (message.deviceId.equals(context.deviceId)) &#123;</span><br><span class="line">            ErrorMessage.from(message).setErrorCode(REPEAT_HANDSHAKE).send();</span><br><span class="line">            Logs.CONN.warn(<span class="string">"handshake failure, repeat handshake, conn=&#123;&#125;"</span>, message.getConnection());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.响应握手成功消息</span></span><br><span class="line">        HandshakeOkMessage.from(message).send();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.保存client信息到当前连接</span></span><br><span class="line">        context.setOsName(message.osName)</span><br><span class="line">                .setOsVersion(message.osVersion)</span><br><span class="line">                .setClientVersion(message.clientVersion)</span><br><span class="line">                .setDeviceId(message.deviceId)</span><br><span class="line">                .setHeartbeat(Integer.MAX_VALUE);</span><br><span class="line"></span><br><span class="line">        Logs.CONN.info(<span class="string">"handshake success, conn=&#123;&#125;"</span>, message.getConnection());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>session管理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReusableSessionManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> expiredTime = CC.mp.core.session_expired_time;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheManager cacheManager = CacheManagerFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cacheSession</span><span class="params">(ReusableSession session)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getSessionKey(session.sessionId);</span><br><span class="line">        cacheManager.set(key, ReusableSession.encode(session.context), expiredTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReusableSession <span class="title">querySession</span><span class="params">(String sessionId)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getSessionKey(sessionId);</span><br><span class="line">        String value = cacheManager.get(key, String.class);</span><br><span class="line">        <span class="keyword">if</span> (Strings.isBlank(value)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> ReusableSession.decode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReusableSession <span class="title">genSession</span><span class="params">(SessionContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        ReusableSession session = <span class="keyword">new</span> ReusableSession();</span><br><span class="line">        session.context = context;</span><br><span class="line">        session.sessionId = MD5Utils.encrypt(context.deviceId + now);</span><br><span class="line">        session.expireTime = now + expiredTime * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>是否加密的设置代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionServer</span> <span class="keyword">extends</span> <span class="title">NettyTCPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionServer</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channelHandler = <span class="keyword">new</span> ServerChannelHandler(<span class="keyword">true</span>, connectionManager, messageDispatcher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ChannelHandler</span>.Sharable</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> security; <span class="comment">//是否启用加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerChannelHandler</span><span class="params">(<span class="keyword">boolean</span> security, ConnectionManager connectionManager, PacketReceiver receiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.security = security;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Logs.CONN.info(<span class="string">"client connected conn=&#123;&#125;"</span>, ctx.channel());</span><br><span class="line">        Connection connection = <span class="keyword">new</span> NettyConnection();</span><br><span class="line">        connection.init(ctx.channel(), security);</span><br><span class="line">        connectionManager.add(connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span>, <span class="title">ChannelFutureListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(NettyConnection.class);</span><br><span class="line">    <span class="keyword">private</span> SessionContext context;</span><br><span class="line">    <span class="keyword">private</span> Channel channel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">byte</span> status = STATUS_NEW;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastReadTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastWriteTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Channel channel, <span class="keyword">boolean</span> security)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        <span class="keyword">this</span>.context = <span class="keyword">new</span> SessionContext();</span><br><span class="line">        <span class="keyword">this</span>.lastReadTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.status = STATUS_CONNECTED;</span><br><span class="line">        <span class="keyword">if</span> (security) &#123;</span><br><span class="line">            <span class="keyword">this</span>.context.changeCipher(RsaCipherFactory.create());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><font color="red">2-握手 HANDSHAKE</font></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-用户绑定-解绑 BIND-UNBIND</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/3-%E7%94%A8%E6%88%B7%E7%BB%91%E5%AE%9A-%E8%A7%A3%E7%BB%91%20BIND-UNBIND/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/3-%E7%94%A8%E6%88%B7%E7%BB%91%E5%AE%9A-%E8%A7%A3%E7%BB%91%20BIND-UNBIND/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-用户绑定-解绑 BIND-UNBIND.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><font color="red">3-用户绑定-解绑 BIND-UNBIND</font></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-快速连接 FAST_CONNECT</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/4-%E5%BF%AB%E9%80%9F%E8%BF%9E%E6%8E%A5%20FAST_CONNECT/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/4-%E5%BF%AB%E9%80%9F%E8%BF%9E%E6%8E%A5%20FAST_CONNECT/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectionServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.FAST_CONNECT, () -&gt; <span class="keyword">new</span> FastConnectHandler(mPushServer));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FastConnectHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">FastConnectMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReusableSessionManager reusableSessionManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastConnectHandler</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reusableSessionManager = mPushServer.getReusableSessionManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FastConnectMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastConnectMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(FastConnectMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从缓存中心查询session</span></span><br><span class="line">        Profiler.enter(<span class="string">"time cost on [query session]"</span>);</span><br><span class="line">        ReusableSession session = reusableSessionManager.querySession(message.sessionId);</span><br><span class="line">        Profiler.release();</span><br><span class="line">        <span class="keyword">if</span> (session == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//1.没查到说明session已经失效了</span></span><br><span class="line">            ErrorMessage.from(message).setErrorCode(SESSION_EXPIRED).send();</span><br><span class="line">            Logs.CONN.warn(<span class="string">"fast connect failure, session is expired, sessionId=&#123;&#125;, deviceId=&#123;&#125;, conn=&#123;&#125;"</span></span><br><span class="line">                    , message.sessionId, message.deviceId, message.getConnection().getChannel());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!session.context.deviceId.equals(message.deviceId)) &#123;</span><br><span class="line">            <span class="comment">//2.非法的设备, 当前设备不是上次生成session时的设备</span></span><br><span class="line">            ErrorMessage.from(message).setErrorCode(INVALID_DEVICE).send();</span><br><span class="line">            Logs.CONN.warn(<span class="string">"fast connect failure, not the same device, deviceId=&#123;&#125;, session=&#123;&#125;, conn=&#123;&#125;"</span></span><br><span class="line">                    , message.deviceId, session.context, message.getConnection().getChannel());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//3.校验成功，重新计算心跳，完成快速重连</span></span><br><span class="line">            <span class="keyword">int</span> heartbeat = ConfigTools.getHeartbeat(message.minHeartbeat, message.maxHeartbeat);</span><br><span class="line">            session.context.setHeartbeat(heartbeat);</span><br><span class="line"></span><br><span class="line">            Profiler.enter(<span class="string">"time cost on [send FastConnectOkMessage]"</span>);</span><br><span class="line">            FastConnectOkMessage</span><br><span class="line">                    .from(message)</span><br><span class="line">                    .setHeartbeat(heartbeat)</span><br><span class="line">                    .sendRaw(f -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f.isSuccess()) &#123;</span><br><span class="line">                            <span class="comment">//4. 恢复缓存的会话信息(包含会话密钥等)</span></span><br><span class="line">                            message.getConnection().setSessionContext(session.context);</span><br><span class="line">                            Logs.CONN.info(<span class="string">"fast connect success, session=&#123;&#125;, conn=&#123;&#125;"</span>, session.context, message.getConnection().getChannel());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            Logs.CONN.info(<span class="string">"fast connect failure, session=&#123;&#125;, conn=&#123;&#125;"</span>, session.context, message.getConnection().getChannel());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            Profiler.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><font color="red">4-快速连接 FAST_CONNECT</font></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UserEventConsumer 用户事件订阅</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/UserEventConsumer%20%E7%94%A8%E6%88%B7%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E8%B7%AF%E7%94%B1%E4%B8%AD%E5%BF%83/UserEventConsumer%20%E7%94%A8%E6%88%B7%E4%BA%8B%E4%BB%B6%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<p>用户在线列表的key为 <code>mp:oul:127.0.0.1</code><br>1、初始化UserManager<br>踢人、清空在线用户列表、将用户添加到在线列表中、从在线列表中删除用户；<br>统计在线用户数量、获取在线用户列表；<br>2、订阅用户在线事件UserOnlineEvent<br>将用户添加到在线列表中；<br>发布MQ在线消息ONLINE_CHANNEL给订阅方；<br>3、订阅用户离线事件UserOfflineEvent<br>从在线列表中删除用户；<br>发布MQ离线消息OFFLINE_CHANNEL给订阅方；  </p><p>UserEventConsumer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mpush.core.router;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.AllowConcurrentEvents;</span><br><span class="line"><span class="keyword">import</span> com.google.common.eventbus.Subscribe;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.event.UserOfflineEvent;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.event.UserOnlineEvent;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.common.MQClient;</span><br><span class="line"><span class="keyword">import</span> com.mpush.api.spi.common.MQClientFactory;</span><br><span class="line"><span class="keyword">import</span> com.mpush.common.router.RemoteRouterManager;</span><br><span class="line"><span class="keyword">import</span> com.mpush.common.user.UserManager;</span><br><span class="line"><span class="keyword">import</span> com.mpush.tools.event.EventConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.api.event.Topics.OFFLINE_CHANNEL;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.mpush.api.event.Topics.ONLINE_CHANNEL;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by ohun on 2015/12/23.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ohun@live.cn</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEventConsumer</span> <span class="keyword">extends</span> <span class="title">EventConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MQClient mqClient = MQClientFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserManager userManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEventConsumer</span><span class="params">(RemoteRouterManager remoteRouterManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userManager = <span class="keyword">new</span> UserManager(remoteRouterManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@AllowConcurrentEvents</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(UserOnlineEvent event)</span> </span>&#123;</span><br><span class="line">        userManager.addToOnlineList(event.getUserId());</span><br><span class="line">        mqClient.publish(ONLINE_CHANNEL, event.getUserId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="meta">@AllowConcurrentEvents</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">(UserOfflineEvent event)</span> </span>&#123;</span><br><span class="line">        userManager.remFormOnlineList(event.getUserId());</span><br><span class="line">        mqClient.publish(OFFLINE_CHANNEL, event.getUserId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserManager <span class="title">getUserManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UserManager.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在线列表是存在redis里的，服务被kill -9的时候，无法修改redis。</span></span><br><span class="line"><span class="comment"> * 查询全部在线列表的时候，要通过当前ZK里可用的机器来循环查询。</span></span><br><span class="line"><span class="comment"> * 每台机器的在线列表是分开存的，如果都存储在一起，某台机器挂了，反而不好处理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(UserManager.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String onlineUserListKey = CacheKeys.getOnlineUserListKey(ConfigTools.getPublicIp());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CacheManager cacheManager = CacheManagerFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MQClient mqClient = MQClientFactory.create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RemoteRouterManager remoteRouterManager;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserManager</span><span class="params">(RemoteRouterManager remoteRouterManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.remoteRouterManager = remoteRouterManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kickUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        kickUser(userId, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kickUser</span><span class="params">(String userId, <span class="keyword">int</span> clientType)</span> </span>&#123;</span><br><span class="line">        Set&lt;RemoteRouter&gt; remoteRouters = remoteRouterManager.lookupAll(userId);</span><br><span class="line">        <span class="keyword">if</span> (remoteRouters != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RemoteRouter remoteRouter : remoteRouters) &#123;</span><br><span class="line">                ClientLocation location = remoteRouter.getRouteValue();</span><br><span class="line">                <span class="keyword">if</span> (clientType == -<span class="number">1</span> || location.getClientType() == clientType) &#123;</span><br><span class="line">                    MQKickRemoteMsg message = <span class="keyword">new</span> MQKickRemoteMsg()</span><br><span class="line">                            .setUserId(userId)</span><br><span class="line">                            .setClientType(location.getClientType())</span><br><span class="line">                            .setConnId(location.getConnId())</span><br><span class="line">                            .setDeviceId(location.getDeviceId())</span><br><span class="line">                            .setTargetServer(location.getHost())</span><br><span class="line">                            .setTargetPort(location.getPort());</span><br><span class="line">                    mqClient.publish(Constants.getKickChannel(location.getHostAndPort()), message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearOnlineUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cacheManager.del(onlineUserListKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addToOnlineList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        cacheManager.zAdd(onlineUserListKey, userId);</span><br><span class="line">        LOGGER.info(<span class="string">"user online &#123;&#125;"</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remFormOnlineList</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        cacheManager.zRem(onlineUserListKey, userId);</span><br><span class="line">        LOGGER.info(<span class="string">"user offline &#123;&#125;"</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在线用户数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getOnlineUserNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long value = cacheManager.zCard(onlineUserListKey);</span><br><span class="line">        <span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="number">0</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在线用户数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getOnlineUserNum</span><span class="params">(String publicIP)</span> </span>&#123;</span><br><span class="line">        String online_key = CacheKeys.getOnlineUserListKey(publicIP);</span><br><span class="line">        Long value = cacheManager.zCard(online_key);</span><br><span class="line">        <span class="keyword">return</span> value == <span class="keyword">null</span> ? <span class="number">0</span> : value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在线用户列表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getOnlineUserList</span><span class="params">(String publicIP, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        String key = CacheKeys.getOnlineUserListKey(publicIP);</span><br><span class="line">        <span class="keyword">return</span> cacheManager.zrange(key, start, end, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 路由中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-HTTP代理 HTTP_PROXY</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/7-HTTP%E4%BB%A3%E7%90%86%20HTTP_PROXY/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/7-HTTP%E4%BB%A3%E7%90%86%20HTTP_PROXY/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="7-HTTP代理 HTTP_PROXY.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><font color="red">7-HTTP代理 HTTP_PROXY</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-握手消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/1-%E6%8F%A1%E6%89%8B%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/1-%E6%8F%A1%E6%89%8B%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="1-握手消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><strong><a href="../1-握手消息">1-握手消息</a></strong></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-客户端推送 PUSH</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/5-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A8%E9%80%81%20PUSH/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/5-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8E%A8%E9%80%81%20PUSH/</url>
      
        <content type="html"><![CDATA[<p>接收客户端的PUSH请求，请求处理器走的SPI机制，业务实现由SPI扩展实现；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectionServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.PUSH, PushHandlerFactory::create);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PushHandlerFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span>&lt;<span class="title">MessageHandler</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> MessageHandler <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SpiLoader.load(PushHandlerFactory.class).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Spi</span>(order = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientPushHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">PushMessage</span>&gt; <span class="keyword">implements</span> <span class="title">PushHandlerFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PushMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PushMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(PushMessage message)</span> </span>&#123;</span><br><span class="line">        Logs.PUSH.info(<span class="string">"receive client push message=&#123;&#125;"</span>, message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (message.autoAck()) &#123;</span><br><span class="line">            AckMessage.from(message).sendRaw();</span><br><span class="line">            Logs.PUSH.info(<span class="string">"send ack for push message=&#123;&#125;"</span>, message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//biz code write here</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageHandler <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><font color="red">5-客户端推送 PUSH</font></li><li><a href="../6-消息确认 ACK">6-消息确认 ACK</a></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-快速连接消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/2-%E5%BF%AB%E9%80%9F%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/2-%E5%BF%AB%E9%80%9F%E8%BF%9E%E6%8E%A5%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="2-快速连接消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><strong><a href="../2-快速连接消息">2-快速连接消息</a></strong></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-消息确认 ACK</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/6-%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%20ACK/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/%E6%8E%A5%E5%85%A5%E6%9C%8D%E5%8A%A1/6-%E6%B6%88%E6%81%AF%E7%A1%AE%E8%AE%A4%20ACK/</url>
      
        <content type="html"><![CDATA[<p>接收到客户端的ACK响应<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ConnectionServer#init()</span></span><br><span class="line">messageDispatcher.register(Command.ACK, () -&gt; <span class="keyword">new</span> AckHandler(mPushServer));</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AckHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">AckMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AckTaskQueue ackTaskQueue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AckHandler</span><span class="params">(MPushServer mPushServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ackTaskQueue = mPushServer.getPushCenter().getAckTaskQueue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AckMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AckMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(AckMessage message)</span> </span>&#123;</span><br><span class="line">        AckTask task = ackTaskQueue.getAndRemove(message.getSessionId());</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;<span class="comment">//ack 超时了</span></span><br><span class="line">            Logs.PUSH.info(<span class="string">"receive client ack, but task timeout message=&#123;&#125;"</span>, message);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        task.onResponse();<span class="comment">//成功收到客户的ACK响应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br>接入服务文章目录:</p><ul><li><a href="../1-心跳 HEARTBEAT">1-心跳 HEARTBEAT</a></li><li><a href="../2-握手 HANDSHAKE">2-握手 HANDSHAKE</a></li><li><a href="../3-用户绑定-解绑 BIND-UNBIND">3-用户绑定-解绑 BIND-UNBIND</a></li><li><a href="../4-快速连接 FAST_CONNECT">4-快速连接 FAST_CONNECT</a></li><li><a href="../5-客户端推送 PUSH">5-客户端推送 PUSH</a></li><li><font color="red">6-消息确认 ACK</font></li><li><a href="../7-HTTP代理 HTTP_PROXY">7-HTTP代理 HTTP_PROXY</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> 接入服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-踢人消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/3-%E8%B8%A2%E4%BA%BA%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/3-%E8%B8%A2%E4%BA%BA%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-踢人消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><strong><a href="../3-踢人消息">3-踢人消息</a></strong></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-心跳消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/6-%E5%BF%83%E8%B7%B3%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/6-%E5%BF%83%E8%B7%B3%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="6-心跳消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><strong><a href="../6-心跳消息">6-心跳消息</a></strong></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-错误消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/4-%E9%94%99%E8%AF%AF%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/4-%E9%94%99%E8%AF%AF%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="4-错误消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><strong><a href="../4-错误消息">4-错误消息</a></strong></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-HTTP代理消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/8-HTTP%E4%BB%A3%E7%90%86%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/8-HTTP%E4%BB%A3%E7%90%86%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="8-HTTP代理消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><strong><a href="../8-HTTP代理消息">8-HTTP代理消息</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-推送消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/5-%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/5-%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="5-推送消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><strong><a href="../5-推送消息">5-推送消息</a></strong></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>握手-绑定用户</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/%E6%8F%A1%E6%89%8B-%E7%BB%91%E5%AE%9A%E7%94%A8%E6%88%B7/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/%E6%8F%A1%E6%89%8B-%E7%BB%91%E5%AE%9A%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="握手-绑定用户.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><strong><a href="../握手-绑定用户">握手-绑定用户</a></strong></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><a href="../7-成功消息">7-成功消息</a></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-成功消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/7-%E6%88%90%E5%8A%9F%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/ConnClient(%E6%A8%A1%E6%8B%9F%E5%AE%A2%E6%88%B7%E7%AB%AF)/7-%E6%88%90%E5%8A%9F%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="7-成功消息.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br>ConnClient(模拟客户端)文章目录:</p><ul><li><a href="../握手-绑定用户">握手-绑定用户</a></li><li><a href="../1-握手消息">1-握手消息</a></li><li><a href="../2-快速连接消息">2-快速连接消息</a></li><li><a href="../3-踢人消息">3-踢人消息</a></li><li><a href="../4-错误消息">4-错误消息</a></li><li><a href="../5-推送消息">5-推送消息</a></li><li><a href="../6-心跳消息">6-心跳消息</a></li><li><strong><a href="../7-成功消息">7-成功消息</a></strong></li><li><a href="../8-HTTP代理消息">8-HTTP代理消息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> ConnClient(模拟客户端) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-启动-建立连接</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/1-%E5%90%AF%E5%8A%A8-%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/1-%E5%90%AF%E5%8A%A8-%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="1-启动-建立连接.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> mpush-client-java文章目录:</p><ul><li><a href="../0-关于">0-关于</a></li><li><strong><a href="../1-启动-建立连接">1-启动-建立连接</a></strong></li><li><a href="../2-读数据">2-读数据</a></li><li><a href="../3-写数据">3-写数据</a></li><li><a href="../4-握手">4-握手</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-读数据</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/2-%E8%AF%BB%E6%95%B0%E6%8D%AE/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/2-%E8%AF%BB%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="2-读数据.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> mpush-client-java文章目录:</p><ul><li><a href="../0-关于">0-关于</a></li><li><a href="../1-启动-建立连接">1-启动-建立连接</a></li><li><strong><a href="../2-读数据">2-读数据</a></strong></li><li><a href="../3-写数据">3-写数据</a></li><li><a href="../4-握手">4-握手</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-写数据</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/3-%E5%86%99%E6%95%B0%E6%8D%AE/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/3-%E5%86%99%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="3-写数据.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> mpush-client-java文章目录:</p><ul><li><a href="../0-关于">0-关于</a></li><li><a href="../1-启动-建立连接">1-启动-建立连接</a></li><li><a href="../2-读数据">2-读数据</a></li><li><strong><a href="../3-写数据">3-写数据</a></strong></li><li><a href="../4-握手">4-握手</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0-关于</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/0-%E5%85%B3%E4%BA%8E/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/0-%E5%85%B3%E4%BA%8E/</url>
      
        <content type="html"><![CDATA[<p>mpush-client-java是一个纯java实现的一个MPUS客户端，不依赖其他任何第三方框架。<br>主要用于android sdk底层通信，该工程本身不包含任何android相关代码。  </p><p>参考：<a href="https://github.com/mpusher/mpush-client-java" target="_blank" rel="noopener">https://github.com/mpusher/mpush-client-java</a>  </p><p><br><br> mpush-client-java文章目录:</p><ul><li><strong><a href="../0-关于">0-关于</a></strong></li><li><a href="../1-启动-建立连接">1-启动-建立连接</a></li><li><a href="../2-读数据">2-读数据</a></li><li><a href="../3-写数据">3-写数据</a></li><li><a href="../4-握手">4-握手</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-握手</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/4-%E6%8F%A1%E6%89%8B/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/SDK/mpush-client-java/4-%E6%8F%A1%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="4-握手.pdf" width="100%" height="550" type="application/pdf"></div><p><br><br> mpush-client-java文章目录:</p><ul><li><a href="../0-关于">0-关于</a></li><li><a href="../1-启动-建立连接">1-启动-建立连接</a></li><li><a href="../2-读数据">2-读数据</a></li><li><a href="../3-写数据">3-写数据</a></li><li><strong><a href="../4-握手">4-握手</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> SDK </category>
          
          <category> mpush-client-java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接收MPNS 广播踢人消息</title>
      <link href="/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20%E5%B9%BF%E6%92%AD%E8%B8%A2%E4%BA%BA%E6%B6%88%E6%81%AF/"/>
      <url>/%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/MPush/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/Mpush%20Server/UDP%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1/%E6%8E%A5%E6%94%B6MPNS%20%E5%B9%BF%E6%92%AD%E8%B8%A2%E4%BA%BA%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>GatewayUDPConnector服务，接收MPNS的消息种类如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//GatewayUDPConnector#init()</span></span><br><span class="line"><span class="comment">//PUSH消息</span></span><br><span class="line">messageDispatcher.register(Command.GATEWAY_PUSH, () -&gt; <span class="keyword">new</span> GatewayPushHandler(mPushServer.getPushCenter()));</span><br><span class="line"><span class="comment">//踢人消息</span></span><br><span class="line">messageDispatcher.register(Command.GATEWAY_KICK, () -&gt; <span class="keyword">new</span> GatewayKickUserHandler(mPushServer.getRouterCenter()));</span><br></pre></td></tr></table></figure></p><p>处理踢人消息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayKickUserHandler</span> <span class="keyword">extends</span> <span class="title">BaseMessageHandler</span>&lt;<span class="title">GatewayKickUserMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RouterCenter routerCenter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayKickUserHandler</span><span class="params">(RouterCenter routerCenter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.routerCenter = routerCenter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayKickUserMessage <span class="title">decode</span><span class="params">(Packet packet, Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GatewayKickUserMessage(packet, connection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(GatewayKickUserMessage message)</span> </span>&#123;</span><br><span class="line">        routerCenter.getRouterChangeListener().onReceiveKickRemoteMsg(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RouterChangeListener.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理远程机器发送的踢人广播.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 一台机器发送广播所有的机器都能收到，</span></span><br><span class="line"><span class="comment"> * 包括发送广播的机器，所有要做一次过滤</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveKickRemoteMsg</span><span class="params">(KickRemoteMsg msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.如果当前机器不是目标机器，直接忽略</span></span><br><span class="line">    <span class="keyword">if</span> (!mPushServer.isTargetMachine(msg.getTargetServer(), msg.getTargetPort())) &#123;</span><br><span class="line">        Logs.CONN.error(<span class="string">"receive kick remote msg, target server error, localIp=&#123;&#125;, msg=&#123;&#125;"</span>, ConfigTools.getLocalIp(), msg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.查询本地路由，找到要被踢下线的链接，并删除该本地路由</span></span><br><span class="line">    String userId = msg.getUserId();</span><br><span class="line">    <span class="keyword">int</span> clientType = msg.getClientType();</span><br><span class="line">    LocalRouterManager localRouterManager = mPushServer.getRouterCenter().getLocalRouterManager();</span><br><span class="line">    LocalRouter localRouter = localRouterManager.lookup(userId, clientType);</span><br><span class="line">    <span class="keyword">if</span> (localRouter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Logs.CONN.info(<span class="string">"receive kick remote msg, msg=&#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="keyword">if</span> (localRouter.getRouteValue().getId().equals(msg.getConnId())) &#123;<span class="comment">//二次校验，防止误杀</span></span><br><span class="line">            <span class="comment">//fix 0.8.1 踢人的时候不再主动删除路由信息，只发踢人消息到客户端，路由信息有客户端主动解绑的时候再处理。</span></span><br><span class="line">            <span class="comment">//2.1删除本地路由信息</span></span><br><span class="line">            <span class="comment">//localRouterManager.unRegister(userId, clientType);</span></span><br><span class="line">            <span class="comment">//2.2发送踢人消息到客户端</span></span><br><span class="line">            sendKickUserMessage2Client(userId, localRouter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logs.CONN.warn(<span class="string">"kick router failure target connId not match, localRouter=&#123;&#125;, msg=&#123;&#125;"</span>, localRouter, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Logs.CONN.warn(<span class="string">"kick router failure can't find local router, msg=&#123;&#125;"</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送踢人消息到客户端</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 当前用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> router 本地路由信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendKickUserMessage2Client</span><span class="params">(<span class="keyword">final</span> String userId, <span class="keyword">final</span> LocalRouter router)</span> </span>&#123;</span><br><span class="line">    Connection connection = router.getRouteValue();</span><br><span class="line">    SessionContext context = connection.getSessionContext();</span><br><span class="line">    KickUserMessage message = KickUserMessage.build(connection);</span><br><span class="line">    message.deviceId = context.deviceId;</span><br><span class="line">    message.userId = userId;</span><br><span class="line">    message.send(future -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            Logs.CONN.info(<span class="string">"kick local connection success, userId=&#123;&#125;, router=&#123;&#125;, conn=&#123;&#125;"</span>, userId, router, connection);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logs.CONN.warn(<span class="string">"kick local connection failure, userId=&#123;&#125;, router=&#123;&#125;, conn=&#123;&#125;"</span>, userId, router, connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 源码学习 </category>
          
          <category> MPush </category>
          
          <category> 源码分析 </category>
          
          <category> Mpush Server </category>
          
          <category> UDP网关服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
